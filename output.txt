# 1 "wm/main.c"
# 1 "<built-in>"
# 1 "<command line>"
# 1 "wm/main.c"
# 1 "/usr/local/arm-wince-pe/include/SDL.h" 1 3
# 1 "/usr/local/arm-wince-pe/include/sdl/sdl.h" 1 3
# 33 "/usr/local/arm-wince-pe/include/sdl/sdl.h" 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_main.h" 1 3
# 34 "/usr/local/arm-wince-pe/include/sdl/sdl.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_types.h" 1 3
# 37 "/usr/local/arm-wince-pe/include/sdl/SDL_types.h" 3
typedef enum {
        SDL_FALSE = 0,
        SDL_TRUE = 1
} SDL_bool;
typedef unsigned char Uint8;
typedef signed char Sint8;
typedef unsigned short Uint16;
typedef signed short Sint16;
typedef unsigned int Uint32;
typedef signed int Sint32;
# 65 "/usr/local/arm-wince-pe/include/sdl/SDL_types.h" 3
typedef unsigned long long Uint64;

typedef long long Sint64;
# 80 "/usr/local/arm-wince-pe/include/sdl/SDL_types.h" 3
typedef int SDL_dummy_uint8[(sizeof(Uint8) == 1) * 2 - 1];
typedef int SDL_dummy_sint8[(sizeof(Sint8) == 1) * 2 - 1];
typedef int SDL_dummy_uint16[(sizeof(Uint16) == 2) * 2 - 1];
typedef int SDL_dummy_sint16[(sizeof(Sint16) == 2) * 2 - 1];
typedef int SDL_dummy_uint32[(sizeof(Uint32) == 4) * 2 - 1];
typedef int SDL_dummy_sint32[(sizeof(Sint32) == 4) * 2 - 1];
typedef int SDL_dummy_uint64[(sizeof(Uint64) == 8) * 2 - 1];
typedef int SDL_dummy_sint64[(sizeof(Sint64) == 8) * 2 - 1];
# 99 "/usr/local/arm-wince-pe/include/sdl/SDL_types.h" 3
typedef enum {
        DUMMY_ENUM_VALUE
} SDL_DUMMY_ENUM;

typedef int SDL_dummy_enum[(sizeof(SDL_DUMMY_ENUM) == sizeof(int)) * 2 - 1];




enum { SDL_PRESSED = 0x01, SDL_RELEASED = 0x00 };
# 35 "/usr/local/arm-wince-pe/include/sdl/sdl.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_getenv.h" 1 3
# 36 "/usr/local/arm-wince-pe/include/sdl/sdl.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_error.h" 1 3
# 33 "/usr/local/arm-wince-pe/include/sdl/SDL_error.h" 3
# 1 "/usr/local/arm-wince-pe/include/sdl/begin_code.h" 1 3
# 34 "/usr/local/arm-wince-pe/include/sdl/SDL_error.h" 2 3






extern void SDL_SetError(const char *fmt, ...);
extern char * SDL_GetError(void);
extern void SDL_ClearError(void);



typedef enum {
        SDL_ENOMEM,
        SDL_EFREAD,
        SDL_EFWRITE,
        SDL_EFSEEK,
        SDL_LASTERROR
} SDL_errorcode;
extern void SDL_Error(SDL_errorcode code);






# 1 "/usr/local/arm-wince-pe/include/sdl/close_code.h" 1 3
# 61 "/usr/local/arm-wince-pe/include/sdl/SDL_error.h" 2 3
# 37 "/usr/local/arm-wince-pe/include/sdl/sdl.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_rwops.h" 1 3
# 35 "/usr/local/arm-wince-pe/include/sdl/SDL_rwops.h" 3
# 1 "/usr/local/arm-wince-pe/include/stdio.h" 1 3
# 29 "/usr/local/arm-wince-pe/include/stdio.h" 3
# 1 "/usr/local/arm-wince-pe/include/_ansi.h" 1 3
# 15 "/usr/local/arm-wince-pe/include/_ansi.h" 3
# 1 "/usr/local/arm-wince-pe/include/newlib.h" 1 3
# 16 "/usr/local/arm-wince-pe/include/_ansi.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sys/config.h" 1 3



# 1 "/usr/local/arm-wince-pe/include/machine/ieeefp.h" 1 3
# 5 "/usr/local/arm-wince-pe/include/sys/config.h" 2 3
# 17 "/usr/local/arm-wince-pe/include/_ansi.h" 2 3
# 30 "/usr/local/arm-wince-pe/include/stdio.h" 2 3




# 1 "/usr/local/lib/gcc-lib/arm-wince-pe/3.3.3/include/stddef.h" 1 3 4
# 213 "/usr/local/lib/gcc-lib/arm-wince-pe/3.3.3/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 35 "/usr/local/arm-wince-pe/include/stdio.h" 2 3


# 1 "/usr/local/lib/gcc-lib/arm-wince-pe/3.3.3/include/stdarg.h" 1 3 4
# 43 "/usr/local/lib/gcc-lib/arm-wince-pe/3.3.3/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 38 "/usr/local/arm-wince-pe/include/stdio.h" 2 3







# 1 "/usr/local/arm-wince-pe/include/sys/reent.h" 1 3
# 14 "/usr/local/arm-wince-pe/include/sys/reent.h" 3
# 1 "/usr/local/arm-wince-pe/include/sys/_types.h" 1 3
# 12 "/usr/local/arm-wince-pe/include/sys/_types.h" 3
typedef long _off_t;
__extension__ typedef long long _off64_t;


typedef int _ssize_t;





# 1 "/usr/local/lib/gcc-lib/arm-wince-pe/3.3.3/include/stddef.h" 1 3 4
# 354 "/usr/local/lib/gcc-lib/arm-wince-pe/3.3.3/include/stddef.h" 3 4
typedef unsigned int wint_t;
# 23 "/usr/local/arm-wince-pe/include/sys/_types.h" 2 3


typedef struct
{
  int __count;
  union
  {
    wint_t __wch;
    unsigned char __wchb[4];
  } __value;
} _mbstate_t;

typedef int _flock_t;
# 15 "/usr/local/arm-wince-pe/include/sys/reent.h" 2 3




typedef unsigned long __ULong;
# 40 "/usr/local/arm-wince-pe/include/sys/reent.h" 3
struct _Bigint
{
  struct _Bigint *_next;
  int _k, _maxwds, _sign, _wds;
  __ULong _x[1];
};


struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};
# 68 "/usr/local/arm-wince-pe/include/sys/reent.h" 3
struct _atexit {
        struct _atexit *_next;
        int _ind;
        void (*_fns[32])(void);
        void *_fnargs[32];
        __ULong _fntypes;
};
# 91 "/usr/local/arm-wince-pe/include/sys/reent.h" 3
struct __sbuf {
        unsigned char *_base;
        int _size;
};






typedef long _fpos_t;
# 156 "/usr/local/arm-wince-pe/include/sys/reent.h" 3
struct __sFILE {
  unsigned char *_p;
  int _r;
  int _w;
  short _flags;
  short _file;
  struct __sbuf _bf;
  int _lbfsize;






  void * _cookie;

  int (*_read) (void * _cookie, char *_buf, int _n);
  int (*_write) (void * _cookie, const char *_buf, int _n);

  _fpos_t (*_seek) (void * _cookie, _fpos_t _offset, int _whence);
  int (*_close) (void * _cookie);


  struct __sbuf _ub;
  unsigned char *_up;
  int _ur;


  unsigned char _ubuf[3];
  unsigned char _nbuf[1];


  struct __sbuf _lb;


  int _blksize;
  int _offset;


  struct _reent *_data;



  _flock_t _lock;

};
# 249 "/usr/local/arm-wince-pe/include/sys/reent.h" 3
typedef struct __sFILE __FILE;


struct _glue
{
  struct _glue *_next;
  int _niobs;
  __FILE *_iobs;
};
# 280 "/usr/local/arm-wince-pe/include/sys/reent.h" 3
struct _rand48 {
  unsigned short _seed[3];
  unsigned short _mult[3];
  unsigned short _add;




};
# 532 "/usr/local/arm-wince-pe/include/sys/reent.h" 3
struct _reent
{
  int _errno;




  __FILE *_stdin, *_stdout, *_stderr;

  int _inc;
  char _emergency[25];

  int _current_category;
  const char *_current_locale;

  int __sdidinit;

  void (*__cleanup) (struct _reent *);


  struct _Bigint *_result;
  int _result_k;
  struct _Bigint *_p5s;
  struct _Bigint **_freelist;


  int _cvtlen;
  char *_cvtbuf;

  union
    {
      struct
        {
          unsigned int _unused_rand;
          char * _strtok_last;
          char _asctime_buf[26];
          struct __tm _localtime_buf;
          int _gamma_signgam;
          __extension__ unsigned long long _rand_next;
          struct _rand48 _r48;
          _mbstate_t _mblen_state;
          _mbstate_t _mbtowc_state;
          _mbstate_t _wctomb_state;
          char _l64a_buf[8];
          char _signal_buf[24];
          int _getdate_err;
          _mbstate_t _mbrlen_state;
          _mbstate_t _mbrtowc_state;
          _mbstate_t _mbsrtowcs_state;
          _mbstate_t _wcrtomb_state;
          _mbstate_t _wcsrtombs_state;
        } _reent;



      struct
        {

          unsigned char * _nextf[30];
          unsigned int _nmalloc[30];
        } _unused;
    } _new;


  struct _atexit *_atexit;
  struct _atexit _atexit0;


  void (**(_sig_func))(int);




  struct _glue __sglue;
  __FILE __sf[3];
};
# 728 "/usr/local/arm-wince-pe/include/sys/reent.h" 3
extern struct _reent *_impure_ptr ;

void _reclaim_reent (struct _reent *);
# 46 "/usr/local/arm-wince-pe/include/stdio.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sys/types.h" 1 3
# 24 "/usr/local/arm-wince-pe/include/sys/types.h" 3
typedef short int __int16_t;
typedef unsigned short int __uint16_t;





typedef int __int32_t;
typedef unsigned int __uint32_t;






__extension__ typedef long long __int64_t;
__extension__ typedef unsigned long long __uint64_t;
# 59 "/usr/local/arm-wince-pe/include/sys/types.h" 3
# 1 "/usr/local/lib/gcc-lib/arm-wince-pe/3.3.3/include/stddef.h" 1 3 4
# 151 "/usr/local/lib/gcc-lib/arm-wince-pe/3.3.3/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 325 "/usr/local/lib/gcc-lib/arm-wince-pe/3.3.3/include/stddef.h" 3 4
typedef short unsigned int wchar_t;
# 60 "/usr/local/arm-wince-pe/include/sys/types.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/machine/types.h" 1 3
# 36 "/usr/local/arm-wince-pe/include/machine/types.h" 3
typedef long int __off_t;
typedef int __pid_t;

__extension__ typedef long long int __loff_t;
# 61 "/usr/local/arm-wince-pe/include/sys/types.h" 2 3
# 82 "/usr/local/arm-wince-pe/include/sys/types.h" 3
typedef unsigned char u_char;
typedef unsigned short u_short;
typedef unsigned int u_int;
typedef unsigned long u_long;



typedef unsigned short ushort;
typedef unsigned int uint;



typedef unsigned long clock_t;




typedef long time_t;





struct timespec {
  time_t tv_sec;
  long tv_nsec;
};

struct itimerspec {
  struct timespec it_interval;
  struct timespec it_value;
};

typedef long daddr_t;
typedef char * caddr_t;







typedef unsigned short ino_t;
# 158 "/usr/local/arm-wince-pe/include/sys/types.h" 3
typedef short dev_t;




typedef long off_t;

typedef unsigned short uid_t;
typedef unsigned short gid_t;


typedef int pid_t;
typedef long key_t;
typedef _ssize_t ssize_t;
# 184 "/usr/local/arm-wince-pe/include/sys/types.h" 3
typedef unsigned int mode_t __attribute__ ((__mode__ (__SI__)));



typedef unsigned short nlink_t;
# 210 "/usr/local/arm-wince-pe/include/sys/types.h" 3
typedef long fd_mask;
# 224 "/usr/local/arm-wince-pe/include/sys/types.h" 3
typedef struct _types_fd_set {
        fd_mask fds_bits[(((64)+(((sizeof (fd_mask) * 8))-1))/((sizeof (fd_mask) * 8)))];
} _types_fd_set;
# 47 "/usr/local/arm-wince-pe/include/stdio.h" 2 3



typedef _fpos_t fpos_t;
typedef __FILE FILE;





# 1 "/usr/local/arm-wince-pe/include/sys/stdio.h" 1 3
# 58 "/usr/local/arm-wince-pe/include/stdio.h" 2 3
# 162 "/usr/local/arm-wince-pe/include/stdio.h" 3
FILE * tmpfile (void);
char * tmpnam (char *);
int fclose (FILE *);
int fflush (FILE *);
FILE * freopen (const char *, const char *, FILE *);
void setbuf (FILE *, char *);
int setvbuf (FILE *, char *, int, size_t);
int fprintf (FILE *, const char *, ...);
int fscanf (FILE *, const char *, ...);
int printf (const char *, ...);
int scanf (const char *, ...);
int sscanf (const char *, const char *, ...);
int vfprintf (FILE *, const char *, __gnuc_va_list);
int vprintf (const char *, __gnuc_va_list);
int vsprintf (char *, const char *, __gnuc_va_list);
int fgetc (FILE *);
char * fgets (char *, int, FILE *);
int fputc (int, FILE *);
int fputs (const char *, FILE *);
int getc (FILE *);
int getchar (void);
char * gets (char *);
int putc (int, FILE *);
int putchar (int);
int puts (const char *);
int ungetc (int, FILE *);
size_t fread (void *, size_t _size, size_t _n, FILE *);
size_t fwrite (const void * , size_t _size, size_t _n, FILE *);
int fgetpos (FILE *, fpos_t *);
int fseek (FILE *, long, int);
int fsetpos (FILE *, const fpos_t *);
long ftell ( FILE *);
void rewind (FILE *);
void clearerr (FILE *);
int feof (FILE *);
int ferror (FILE *);
void perror (const char *);

FILE * fopen (const char *_name, const char *_type);
int sprintf (char *, const char *, ...);
int remove (const char *);
int rename (const char *, const char *);


int asprintf (char **, const char *, ...);
int fseeko (FILE *, off_t, int);
off_t ftello ( FILE *);
int vfiprintf (FILE *, const char *, __gnuc_va_list);
int iprintf (const char *, ...);
int fiprintf (FILE *, const char *, ...);
int siprintf (char *, const char *, ...);
char * tempnam (const char *, const char *);
int vasprintf (char **, const char *, __gnuc_va_list);
int vsnprintf (char *, size_t, const char *, __gnuc_va_list);
int vfscanf (FILE *, const char *, __gnuc_va_list);
int vscanf (const char *, __gnuc_va_list);
int vsscanf (const char *, const char *, __gnuc_va_list);

int fcloseall (void);
int snprintf (char *, size_t, const char *, ...);
# 231 "/usr/local/arm-wince-pe/include/stdio.h" 3
FILE * fdopen (int, const char *);

int fileno (FILE *);
int getw (FILE *);
int pclose (FILE *);
FILE * popen (const char *, const char *);
int putw (int, FILE *);
void setbuffer (FILE *, char *, int);
int setlinebuf (FILE *);
int getc_unlocked (FILE *);
int getchar_unlocked (void);
void flockfile (FILE *);
int ftrylockfile (FILE *);
void funlockfile (FILE *);
int putc_unlocked (int, FILE *);
int putchar_unlocked (int);






int _asprintf_r (struct _reent *, char **, const char *, ...);
int _fcloseall_r (struct _reent *);
FILE * _fdopen_r (struct _reent *, int, const char *);
FILE * _fopen_r (struct _reent *, const char *, const char *);
int _fscanf_r (struct _reent *, FILE *, const char *, ...);
int _getchar_r (struct _reent *);
char * _gets_r (struct _reent *, char *);
int _iprintf_r (struct _reent *, const char *, ...);
int _mkstemp_r (struct _reent *, char *);
char * _mktemp_r (struct _reent *, char *);
void _perror_r (struct _reent *, const char *);
int _printf_r (struct _reent *, const char *, ...);
int _putchar_r (struct _reent *, int);
int _puts_r (struct _reent *, const char *);
int _remove_r (struct _reent *, const char *);
int _rename_r (struct _reent *, const char *_old, const char *_new);

int _scanf_r (struct _reent *, const char *, ...);
int _sprintf_r (struct _reent *, char *, const char *, ...);
int _snprintf_r (struct _reent *, char *, size_t, const char *, ...);
int _sscanf_r (struct _reent *, const char *, const char *, ...);
char * _tempnam_r (struct _reent *, const char *, const char *);
FILE * _tmpfile_r (struct _reent *);
char * _tmpnam_r (struct _reent *, char *);
int _vasprintf_r (struct _reent *, char **, const char *, __gnuc_va_list);
int _vfprintf_r (struct _reent *, FILE *, const char *, __gnuc_va_list);
int _vprintf_r (struct _reent *, const char *, __gnuc_va_list);
int _vsprintf_r (struct _reent *, char *, const char *, __gnuc_va_list);
int _vsnprintf_r (struct _reent *, char *, size_t, const char *, __gnuc_va_list);
int _vfscanf_r (struct _reent *, FILE *, const char *, __gnuc_va_list);
int _vscanf_r (struct _reent *, const char *, __gnuc_va_list);
int _vsscanf_r (struct _reent *, const char *, const char *, __gnuc_va_list);

ssize_t __getdelim (char **, size_t *, int, FILE *);
ssize_t __getline (char **, size_t *, FILE *);
# 309 "/usr/local/arm-wince-pe/include/stdio.h" 3
int __srget (FILE *);
int __swbuf (int, FILE *);






FILE *funopen (const void * _cookie, int (*readfn)(void * _cookie, char *_buf, int _n), int (*writefn)(void * _cookie, const char *_buf, int _n), fpos_t (*seekfn)(void * _cookie, fpos_t _off, int _whence), int (*closefn)(void * _cookie));
# 416 "/usr/local/arm-wince-pe/include/stdio.h" 3

# 36 "/usr/local/arm-wince-pe/include/sdl/SDL_rwops.h" 2 3

# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_types.h" 1 3
# 38 "/usr/local/arm-wince-pe/include/sdl/SDL_rwops.h" 2 3

# 1 "/usr/local/arm-wince-pe/include/sdl/begin_code.h" 1 3
# 40 "/usr/local/arm-wince-pe/include/sdl/SDL_rwops.h" 2 3







typedef struct SDL_RWops {




        int (*seek)(struct SDL_RWops *context, int offset, int whence);





        int (*read)(struct SDL_RWops *context, void *ptr, int size, int maxnum);





        int (*write)(struct SDL_RWops *context, const void *ptr, int size, int num);


        int (*close)(struct SDL_RWops *context);

        Uint32 type;
        union {
            struct {
                int autoclose;
                FILE *fp;
            } stdio;
            struct {
                Uint8 *base;
                Uint8 *here;
                Uint8 *stop;
            } mem;
            struct {
                void *data1;
            } unknown;
        } hidden;

} SDL_RWops;




extern SDL_RWops * SDL_RWFromFile(const char *file, const char *mode);

extern SDL_RWops * SDL_RWFromFP(FILE *fp, int autoclose);

extern SDL_RWops * SDL_RWFromMem(void *mem, int size);

extern SDL_RWops * SDL_AllocRW(void);
extern void SDL_FreeRW(SDL_RWops *area);
# 111 "/usr/local/arm-wince-pe/include/sdl/SDL_rwops.h" 3
# 1 "/usr/local/arm-wince-pe/include/sdl/close_code.h" 1 3
# 112 "/usr/local/arm-wince-pe/include/sdl/SDL_rwops.h" 2 3
# 38 "/usr/local/arm-wince-pe/include/sdl/sdl.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_timer.h" 1 3
# 33 "/usr/local/arm-wince-pe/include/sdl/SDL_timer.h" 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_main.h" 1 3
# 34 "/usr/local/arm-wince-pe/include/sdl/SDL_timer.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_types.h" 1 3
# 35 "/usr/local/arm-wince-pe/include/sdl/SDL_timer.h" 2 3

# 1 "/usr/local/arm-wince-pe/include/sdl/begin_code.h" 1 3
# 37 "/usr/local/arm-wince-pe/include/sdl/SDL_timer.h" 2 3
# 51 "/usr/local/arm-wince-pe/include/sdl/SDL_timer.h" 3
extern Uint32 SDL_GetTicks(void);


extern void SDL_Delay(Uint32 ms);


typedef Uint32 ( *SDL_TimerCallback)(Uint32 interval);
# 85 "/usr/local/arm-wince-pe/include/sdl/SDL_timer.h" 3
extern int SDL_SetTimer(Uint32 interval, SDL_TimerCallback callback);
# 97 "/usr/local/arm-wince-pe/include/sdl/SDL_timer.h" 3
typedef Uint32 ( *SDL_NewTimerCallback)(Uint32 interval, void *param);


typedef struct _SDL_TimerID *SDL_TimerID;




extern SDL_TimerID SDL_AddTimer(Uint32 interval, SDL_NewTimerCallback callback, void *param);




extern SDL_bool SDL_RemoveTimer(SDL_TimerID t);





# 1 "/usr/local/arm-wince-pe/include/sdl/close_code.h" 1 3
# 117 "/usr/local/arm-wince-pe/include/sdl/SDL_timer.h" 2 3
# 39 "/usr/local/arm-wince-pe/include/sdl/sdl.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_audio.h" 1 3
# 35 "/usr/local/arm-wince-pe/include/sdl/SDL_audio.h" 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_main.h" 1 3
# 36 "/usr/local/arm-wince-pe/include/sdl/SDL_audio.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_types.h" 1 3
# 37 "/usr/local/arm-wince-pe/include/sdl/SDL_audio.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_error.h" 1 3
# 38 "/usr/local/arm-wince-pe/include/sdl/SDL_audio.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_rwops.h" 1 3
# 39 "/usr/local/arm-wince-pe/include/sdl/SDL_audio.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_byteorder.h" 1 3
# 40 "/usr/local/arm-wince-pe/include/sdl/SDL_audio.h" 2 3

# 1 "/usr/local/arm-wince-pe/include/sdl/begin_code.h" 1 3
# 42 "/usr/local/arm-wince-pe/include/sdl/SDL_audio.h" 2 3






typedef struct {
        int freq;
        Uint16 format;
        Uint8 channels;
        Uint8 silence;
        Uint16 samples;
        Uint16 padding;
        Uint32 size;
        Uint8 thread_priority;






        void (*callback)(void *userdata, Uint8 *stream, int len);
        void *userdata;
} SDL_AudioSpec;
# 88 "/usr/local/arm-wince-pe/include/sdl/SDL_audio.h" 3
typedef struct SDL_AudioCVT {
        int needed;
        Uint16 src_format;
        Uint16 dst_format;
        double rate_incr;
        Uint8 *buf;
        int len;
        int len_cvt;
        int len_mult;
        double len_ratio;
        void (*filters[10])(struct SDL_AudioCVT *cvt, Uint16 format);
        int filter_index;
} SDL_AudioCVT;
# 109 "/usr/local/arm-wince-pe/include/sdl/SDL_audio.h" 3
extern int SDL_AudioInit(const char *driver_name);
extern void SDL_AudioQuit(void);





extern char * SDL_AudioDriverName(char *namebuf, int maxlen);
# 159 "/usr/local/arm-wince-pe/include/sdl/SDL_audio.h" 3
extern int SDL_OpenAudio(SDL_AudioSpec *desired, SDL_AudioSpec *obtained);




typedef enum {
        SDL_AUDIO_STOPPED = 0,
        SDL_AUDIO_PLAYING,
        SDL_AUDIO_PAUSED
} SDL_audiostatus;
extern SDL_audiostatus SDL_GetAudioStatus(void);
# 178 "/usr/local/arm-wince-pe/include/sdl/SDL_audio.h" 3
extern void SDL_PauseAudio(int pause_on);
# 197 "/usr/local/arm-wince-pe/include/sdl/SDL_audio.h" 3
extern SDL_AudioSpec * SDL_LoadWAV_RW(SDL_RWops *src, int freesrc, SDL_AudioSpec *spec, Uint8 **audio_buf, Uint32 *audio_len);
# 206 "/usr/local/arm-wince-pe/include/sdl/SDL_audio.h" 3
extern void SDL_FreeWAV(Uint8 *audio_buf);
# 215 "/usr/local/arm-wince-pe/include/sdl/SDL_audio.h" 3
extern int SDL_BuildAudioCVT(SDL_AudioCVT *cvt,
                Uint16 src_format, Uint8 src_channels, int src_rate,
                Uint16 dst_format, Uint8 dst_channels, int dst_rate);
# 227 "/usr/local/arm-wince-pe/include/sdl/SDL_audio.h" 3
extern int SDL_ConvertAudio(SDL_AudioCVT *cvt);
# 237 "/usr/local/arm-wince-pe/include/sdl/SDL_audio.h" 3
extern void SDL_MixAudio(Uint8 *dst, const Uint8 *src, Uint32 len, int volume);







extern void SDL_LockAudio(void);
extern void SDL_UnlockAudio(void);




extern void SDL_CloseAudio(void);






# 1 "/usr/local/arm-wince-pe/include/sdl/close_code.h" 1 3
# 259 "/usr/local/arm-wince-pe/include/sdl/SDL_audio.h" 2 3
# 40 "/usr/local/arm-wince-pe/include/sdl/sdl.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_cdrom.h" 1 3
# 33 "/usr/local/arm-wince-pe/include/sdl/SDL_cdrom.h" 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_types.h" 1 3
# 34 "/usr/local/arm-wince-pe/include/sdl/SDL_cdrom.h" 2 3

# 1 "/usr/local/arm-wince-pe/include/sdl/begin_code.h" 1 3
# 36 "/usr/local/arm-wince-pe/include/sdl/SDL_cdrom.h" 2 3
# 54 "/usr/local/arm-wince-pe/include/sdl/SDL_cdrom.h" 3
typedef enum {
        CD_TRAYEMPTY,
        CD_STOPPED,
        CD_PLAYING,
        CD_PAUSED,
        CD_ERROR = -1
} CDstatus;




typedef struct {
        Uint8 id;
        Uint8 type;
        Uint16 unused;
        Uint32 length;
        Uint32 offset;
} SDL_CDtrack;


typedef struct SDL_CD {
        int id;
        CDstatus status;


        int numtracks;
        int cur_track;
        int cur_frame;
        SDL_CDtrack track[99 +1];
} SDL_CD;
# 102 "/usr/local/arm-wince-pe/include/sdl/SDL_cdrom.h" 3
extern int SDL_CDNumDrives(void);







extern const char * SDL_CDName(int drive);







extern SDL_CD * SDL_CDOpen(int drive);





extern CDstatus SDL_CDStatus(SDL_CD *cdrom);
# 145 "/usr/local/arm-wince-pe/include/sdl/SDL_cdrom.h" 3
extern int SDL_CDPlayTracks(SDL_CD *cdrom,
                int start_track, int start_frame, int ntracks, int nframes);




extern int SDL_CDPlay(SDL_CD *cdrom, int start, int length);


extern int SDL_CDPause(SDL_CD *cdrom);


extern int SDL_CDResume(SDL_CD *cdrom);


extern int SDL_CDStop(SDL_CD *cdrom);


extern int SDL_CDEject(SDL_CD *cdrom);


extern void SDL_CDClose(SDL_CD *cdrom);






# 1 "/usr/local/arm-wince-pe/include/sdl/close_code.h" 1 3
# 174 "/usr/local/arm-wince-pe/include/sdl/SDL_cdrom.h" 2 3
# 41 "/usr/local/arm-wince-pe/include/sdl/sdl.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_joystick.h" 1 3
# 33 "/usr/local/arm-wince-pe/include/sdl/SDL_joystick.h" 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_types.h" 1 3
# 34 "/usr/local/arm-wince-pe/include/sdl/SDL_joystick.h" 2 3

# 1 "/usr/local/arm-wince-pe/include/sdl/begin_code.h" 1 3
# 36 "/usr/local/arm-wince-pe/include/sdl/SDL_joystick.h" 2 3
# 47 "/usr/local/arm-wince-pe/include/sdl/SDL_joystick.h" 3
struct _SDL_Joystick;
typedef struct _SDL_Joystick SDL_Joystick;






extern int SDL_NumJoysticks(void);






extern const char * SDL_JoystickName(int device_index);
# 71 "/usr/local/arm-wince-pe/include/sdl/SDL_joystick.h" 3
extern SDL_Joystick * SDL_JoystickOpen(int device_index);




extern int SDL_JoystickOpened(int device_index);




extern int SDL_JoystickIndex(SDL_Joystick *joystick);




extern int SDL_JoystickNumAxes(SDL_Joystick *joystick);






extern int SDL_JoystickNumBalls(SDL_Joystick *joystick);




extern int SDL_JoystickNumHats(SDL_Joystick *joystick);




extern int SDL_JoystickNumButtons(SDL_Joystick *joystick);






extern void SDL_JoystickUpdate(void);
# 119 "/usr/local/arm-wince-pe/include/sdl/SDL_joystick.h" 3
extern int SDL_JoystickEventState(int state);






extern Sint16 SDL_JoystickGetAxis(SDL_Joystick *joystick, int axis);
# 144 "/usr/local/arm-wince-pe/include/sdl/SDL_joystick.h" 3
extern Uint8 SDL_JoystickGetHat(SDL_Joystick *joystick, int hat);






extern int SDL_JoystickGetBall(SDL_Joystick *joystick, int ball, int *dx, int *dy);





extern Uint8 SDL_JoystickGetButton(SDL_Joystick *joystick, int button);




extern void SDL_JoystickClose(SDL_Joystick *joystick);






# 1 "/usr/local/arm-wince-pe/include/sdl/close_code.h" 1 3
# 170 "/usr/local/arm-wince-pe/include/sdl/SDL_joystick.h" 2 3
# 42 "/usr/local/arm-wince-pe/include/sdl/sdl.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_events.h" 1 3
# 33 "/usr/local/arm-wince-pe/include/sdl/SDL_events.h" 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_types.h" 1 3
# 34 "/usr/local/arm-wince-pe/include/sdl/SDL_events.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_active.h" 1 3
# 33 "/usr/local/arm-wince-pe/include/sdl/SDL_active.h" 3
# 1 "/usr/local/arm-wince-pe/include/sdl/begin_code.h" 1 3
# 34 "/usr/local/arm-wince-pe/include/sdl/SDL_active.h" 2 3
# 51 "/usr/local/arm-wince-pe/include/sdl/SDL_active.h" 3
extern Uint8 SDL_GetAppState(void);






# 1 "/usr/local/arm-wince-pe/include/sdl/close_code.h" 1 3
# 59 "/usr/local/arm-wince-pe/include/sdl/SDL_active.h" 2 3
# 35 "/usr/local/arm-wince-pe/include/sdl/SDL_events.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_keyboard.h" 1 3
# 33 "/usr/local/arm-wince-pe/include/sdl/SDL_keyboard.h" 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_types.h" 1 3
# 34 "/usr/local/arm-wince-pe/include/sdl/SDL_keyboard.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_keysym.h" 1 3
# 37 "/usr/local/arm-wince-pe/include/sdl/SDL_keysym.h" 3
typedef enum {

        SDLK_UNKNOWN = 0,
        SDLK_FIRST = 0,
        SDLK_BACKSPACE = 8,
        SDLK_TAB = 9,
        SDLK_CLEAR = 12,
        SDLK_RETURN = 13,
        SDLK_PAUSE = 19,
        SDLK_ESCAPE = 27,
        SDLK_SPACE = 32,
        SDLK_EXCLAIM = 33,
        SDLK_QUOTEDBL = 34,
        SDLK_HASH = 35,
        SDLK_DOLLAR = 36,
        SDLK_AMPERSAND = 38,
        SDLK_QUOTE = 39,
        SDLK_LEFTPAREN = 40,
        SDLK_RIGHTPAREN = 41,
        SDLK_ASTERISK = 42,
        SDLK_PLUS = 43,
        SDLK_COMMA = 44,
        SDLK_MINUS = 45,
        SDLK_PERIOD = 46,
        SDLK_SLASH = 47,
        SDLK_0 = 48,
        SDLK_1 = 49,
        SDLK_2 = 50,
        SDLK_3 = 51,
        SDLK_4 = 52,
        SDLK_5 = 53,
        SDLK_6 = 54,
        SDLK_7 = 55,
        SDLK_8 = 56,
        SDLK_9 = 57,
        SDLK_COLON = 58,
        SDLK_SEMICOLON = 59,
        SDLK_LESS = 60,
        SDLK_EQUALS = 61,
        SDLK_GREATER = 62,
        SDLK_QUESTION = 63,
        SDLK_AT = 64,



        SDLK_LEFTBRACKET = 91,
        SDLK_BACKSLASH = 92,
        SDLK_RIGHTBRACKET = 93,
        SDLK_CARET = 94,
        SDLK_UNDERSCORE = 95,
        SDLK_BACKQUOTE = 96,
        SDLK_a = 97,
        SDLK_b = 98,
        SDLK_c = 99,
        SDLK_d = 100,
        SDLK_e = 101,
        SDLK_f = 102,
        SDLK_g = 103,
        SDLK_h = 104,
        SDLK_i = 105,
        SDLK_j = 106,
        SDLK_k = 107,
        SDLK_l = 108,
        SDLK_m = 109,
        SDLK_n = 110,
        SDLK_o = 111,
        SDLK_p = 112,
        SDLK_q = 113,
        SDLK_r = 114,
        SDLK_s = 115,
        SDLK_t = 116,
        SDLK_u = 117,
        SDLK_v = 118,
        SDLK_w = 119,
        SDLK_x = 120,
        SDLK_y = 121,
        SDLK_z = 122,
        SDLK_DELETE = 127,



        SDLK_WORLD_0 = 160,
        SDLK_WORLD_1 = 161,
        SDLK_WORLD_2 = 162,
        SDLK_WORLD_3 = 163,
        SDLK_WORLD_4 = 164,
        SDLK_WORLD_5 = 165,
        SDLK_WORLD_6 = 166,
        SDLK_WORLD_7 = 167,
        SDLK_WORLD_8 = 168,
        SDLK_WORLD_9 = 169,
        SDLK_WORLD_10 = 170,
        SDLK_WORLD_11 = 171,
        SDLK_WORLD_12 = 172,
        SDLK_WORLD_13 = 173,
        SDLK_WORLD_14 = 174,
        SDLK_WORLD_15 = 175,
        SDLK_WORLD_16 = 176,
        SDLK_WORLD_17 = 177,
        SDLK_WORLD_18 = 178,
        SDLK_WORLD_19 = 179,
        SDLK_WORLD_20 = 180,
        SDLK_WORLD_21 = 181,
        SDLK_WORLD_22 = 182,
        SDLK_WORLD_23 = 183,
        SDLK_WORLD_24 = 184,
        SDLK_WORLD_25 = 185,
        SDLK_WORLD_26 = 186,
        SDLK_WORLD_27 = 187,
        SDLK_WORLD_28 = 188,
        SDLK_WORLD_29 = 189,
        SDLK_WORLD_30 = 190,
        SDLK_WORLD_31 = 191,
        SDLK_WORLD_32 = 192,
        SDLK_WORLD_33 = 193,
        SDLK_WORLD_34 = 194,
        SDLK_WORLD_35 = 195,
        SDLK_WORLD_36 = 196,
        SDLK_WORLD_37 = 197,
        SDLK_WORLD_38 = 198,
        SDLK_WORLD_39 = 199,
        SDLK_WORLD_40 = 200,
        SDLK_WORLD_41 = 201,
        SDLK_WORLD_42 = 202,
        SDLK_WORLD_43 = 203,
        SDLK_WORLD_44 = 204,
        SDLK_WORLD_45 = 205,
        SDLK_WORLD_46 = 206,
        SDLK_WORLD_47 = 207,
        SDLK_WORLD_48 = 208,
        SDLK_WORLD_49 = 209,
        SDLK_WORLD_50 = 210,
        SDLK_WORLD_51 = 211,
        SDLK_WORLD_52 = 212,
        SDLK_WORLD_53 = 213,
        SDLK_WORLD_54 = 214,
        SDLK_WORLD_55 = 215,
        SDLK_WORLD_56 = 216,
        SDLK_WORLD_57 = 217,
        SDLK_WORLD_58 = 218,
        SDLK_WORLD_59 = 219,
        SDLK_WORLD_60 = 220,
        SDLK_WORLD_61 = 221,
        SDLK_WORLD_62 = 222,
        SDLK_WORLD_63 = 223,
        SDLK_WORLD_64 = 224,
        SDLK_WORLD_65 = 225,
        SDLK_WORLD_66 = 226,
        SDLK_WORLD_67 = 227,
        SDLK_WORLD_68 = 228,
        SDLK_WORLD_69 = 229,
        SDLK_WORLD_70 = 230,
        SDLK_WORLD_71 = 231,
        SDLK_WORLD_72 = 232,
        SDLK_WORLD_73 = 233,
        SDLK_WORLD_74 = 234,
        SDLK_WORLD_75 = 235,
        SDLK_WORLD_76 = 236,
        SDLK_WORLD_77 = 237,
        SDLK_WORLD_78 = 238,
        SDLK_WORLD_79 = 239,
        SDLK_WORLD_80 = 240,
        SDLK_WORLD_81 = 241,
        SDLK_WORLD_82 = 242,
        SDLK_WORLD_83 = 243,
        SDLK_WORLD_84 = 244,
        SDLK_WORLD_85 = 245,
        SDLK_WORLD_86 = 246,
        SDLK_WORLD_87 = 247,
        SDLK_WORLD_88 = 248,
        SDLK_WORLD_89 = 249,
        SDLK_WORLD_90 = 250,
        SDLK_WORLD_91 = 251,
        SDLK_WORLD_92 = 252,
        SDLK_WORLD_93 = 253,
        SDLK_WORLD_94 = 254,
        SDLK_WORLD_95 = 255,


        SDLK_KP0 = 256,
        SDLK_KP1 = 257,
        SDLK_KP2 = 258,
        SDLK_KP3 = 259,
        SDLK_KP4 = 260,
        SDLK_KP5 = 261,
        SDLK_KP6 = 262,
        SDLK_KP7 = 263,
        SDLK_KP8 = 264,
        SDLK_KP9 = 265,
        SDLK_KP_PERIOD = 266,
        SDLK_KP_DIVIDE = 267,
        SDLK_KP_MULTIPLY = 268,
        SDLK_KP_MINUS = 269,
        SDLK_KP_PLUS = 270,
        SDLK_KP_ENTER = 271,
        SDLK_KP_EQUALS = 272,


        SDLK_UP = 273,
        SDLK_DOWN = 274,
        SDLK_RIGHT = 275,
        SDLK_LEFT = 276,
        SDLK_INSERT = 277,
        SDLK_HOME = 278,
        SDLK_END = 279,
        SDLK_PAGEUP = 280,
        SDLK_PAGEDOWN = 281,


        SDLK_F1 = 282,
        SDLK_F2 = 283,
        SDLK_F3 = 284,
        SDLK_F4 = 285,
        SDLK_F5 = 286,
        SDLK_F6 = 287,
        SDLK_F7 = 288,
        SDLK_F8 = 289,
        SDLK_F9 = 290,
        SDLK_F10 = 291,
        SDLK_F11 = 292,
        SDLK_F12 = 293,
        SDLK_F13 = 294,
        SDLK_F14 = 295,
        SDLK_F15 = 296,


        SDLK_NUMLOCK = 300,
        SDLK_CAPSLOCK = 301,
        SDLK_SCROLLOCK = 302,
        SDLK_RSHIFT = 303,
        SDLK_LSHIFT = 304,
        SDLK_RCTRL = 305,
        SDLK_LCTRL = 306,
        SDLK_RALT = 307,
        SDLK_LALT = 308,
        SDLK_RMETA = 309,
        SDLK_LMETA = 310,
        SDLK_LSUPER = 311,
        SDLK_RSUPER = 312,
        SDLK_MODE = 313,
        SDLK_COMPOSE = 314,


        SDLK_HELP = 315,
        SDLK_PRINT = 316,
        SDLK_SYSREQ = 317,
        SDLK_BREAK = 318,
        SDLK_MENU = 319,
        SDLK_POWER = 320,
        SDLK_EURO = 321,
        SDLK_UNDO = 322,



        SDLK_LAST
} SDLKey;


typedef enum {
        KMOD_NONE = 0x0000,
        KMOD_LSHIFT= 0x0001,
        KMOD_RSHIFT= 0x0002,
        KMOD_LCTRL = 0x0040,
        KMOD_RCTRL = 0x0080,
        KMOD_LALT = 0x0100,
        KMOD_RALT = 0x0200,
        KMOD_LMETA = 0x0400,
        KMOD_RMETA = 0x0800,
        KMOD_NUM = 0x1000,
        KMOD_CAPS = 0x2000,
        KMOD_MODE = 0x4000,
        KMOD_RESERVED = 0x8000
} SDLMod;
# 35 "/usr/local/arm-wince-pe/include/sdl/SDL_keyboard.h" 2 3

# 1 "/usr/local/arm-wince-pe/include/sdl/begin_code.h" 1 3
# 37 "/usr/local/arm-wince-pe/include/sdl/SDL_keyboard.h" 2 3
# 58 "/usr/local/arm-wince-pe/include/sdl/SDL_keyboard.h" 3
typedef struct {
        Uint8 scancode;
        SDLKey sym;
        SDLMod mod;
        Uint16 unicode;
} SDL_keysym;
# 77 "/usr/local/arm-wince-pe/include/sdl/SDL_keyboard.h" 3
extern int SDL_EnableUNICODE(int enable);
# 90 "/usr/local/arm-wince-pe/include/sdl/SDL_keyboard.h" 3
extern int SDL_EnableKeyRepeat(int delay, int interval);
# 99 "/usr/local/arm-wince-pe/include/sdl/SDL_keyboard.h" 3
extern Uint8 * SDL_GetKeyState(int *numkeys);




extern SDLMod SDL_GetModState(void);





extern void SDL_SetModState(SDLMod modstate);




extern char * SDL_GetKeyName(SDLKey key);






# 1 "/usr/local/arm-wince-pe/include/sdl/close_code.h" 1 3
# 123 "/usr/local/arm-wince-pe/include/sdl/SDL_keyboard.h" 2 3
# 36 "/usr/local/arm-wince-pe/include/sdl/SDL_events.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_mouse.h" 1 3
# 33 "/usr/local/arm-wince-pe/include/sdl/SDL_mouse.h" 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_types.h" 1 3
# 34 "/usr/local/arm-wince-pe/include/sdl/SDL_mouse.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 1 3
# 35 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_types.h" 1 3
# 36 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_mutex.h" 1 3
# 36 "/usr/local/arm-wince-pe/include/sdl/SDL_mutex.h" 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_main.h" 1 3
# 37 "/usr/local/arm-wince-pe/include/sdl/SDL_mutex.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_types.h" 1 3
# 38 "/usr/local/arm-wince-pe/include/sdl/SDL_mutex.h" 2 3

# 1 "/usr/local/arm-wince-pe/include/sdl/begin_code.h" 1 3
# 40 "/usr/local/arm-wince-pe/include/sdl/SDL_mutex.h" 2 3
# 59 "/usr/local/arm-wince-pe/include/sdl/SDL_mutex.h" 3
struct SDL_mutex;
typedef struct SDL_mutex SDL_mutex;


extern SDL_mutex * SDL_CreateMutex(void);



extern int SDL_mutexP(SDL_mutex *mutex);






extern int SDL_mutexV(SDL_mutex *mutex);


extern void SDL_DestroyMutex(SDL_mutex *mutex);







struct SDL_semaphore;
typedef struct SDL_semaphore SDL_sem;


extern SDL_sem * SDL_CreateSemaphore(Uint32 initial_value);


extern void SDL_DestroySemaphore(SDL_sem *sem);





extern int SDL_SemWait(SDL_sem *sem);




extern int SDL_SemTryWait(SDL_sem *sem);







extern int SDL_SemWaitTimeout(SDL_sem *sem, Uint32 ms);




extern int SDL_SemPost(SDL_sem *sem);


extern Uint32 SDL_SemValue(SDL_sem *sem);







struct SDL_cond;
typedef struct SDL_cond SDL_cond;


extern SDL_cond * SDL_CreateCond(void);


extern void SDL_DestroyCond(SDL_cond *cond);




extern int SDL_CondSignal(SDL_cond *cond);




extern int SDL_CondBroadcast(SDL_cond *cond);





extern int SDL_CondWait(SDL_cond *cond, SDL_mutex *mut);







extern int SDL_CondWaitTimeout(SDL_cond *cond, SDL_mutex *mutex, Uint32 ms);





# 1 "/usr/local/arm-wince-pe/include/sdl/close_code.h" 1 3
# 165 "/usr/local/arm-wince-pe/include/sdl/SDL_mutex.h" 2 3
# 37 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_rwops.h" 1 3
# 38 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 2 3

# 1 "/usr/local/arm-wince-pe/include/sdl/begin_code.h" 1 3
# 40 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 2 3
# 50 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
typedef struct {
        Sint16 x, y;
        Uint16 w, h;
} SDL_Rect;

typedef struct {
        Uint8 r;
        Uint8 g;
        Uint8 b;
        Uint8 unused;
} SDL_Color;


typedef struct {
        int ncolors;
        SDL_Color *colors;
} SDL_Palette;


typedef struct SDL_PixelFormat {
        SDL_Palette *palette;
        Uint8 BitsPerPixel;
        Uint8 BytesPerPixel;
        Uint8 Rloss;
        Uint8 Gloss;
        Uint8 Bloss;
        Uint8 Aloss;
        Uint8 Rshift;
        Uint8 Gshift;
        Uint8 Bshift;
        Uint8 Ashift;
        Uint32 Rmask;
        Uint32 Gmask;
        Uint32 Bmask;
        Uint32 Amask;


        Uint32 colorkey;

        Uint8 alpha;
} SDL_PixelFormat;


struct SDL_Surface;
typedef int (*SDL_blit)(struct SDL_Surface *src, SDL_Rect *srcrect,
                        struct SDL_Surface *dst, SDL_Rect *dstrect);




typedef struct SDL_Surface {
        Uint32 flags;
        SDL_PixelFormat *format;
        int w, h;
        Uint16 pitch;
        void *pixels;
        int offset;


        struct private_hwdata *hwdata;


        SDL_Rect clip_rect;
        Uint32 unused1;


        Uint32 locked;


        struct SDL_BlitMap *map;


        unsigned int format_version;


        int refcount;
} SDL_Surface;
# 158 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
typedef struct {
        Uint32 hw_available :1;
        Uint32 wm_available :1;
        Uint32 UnusedBits1 :6;
        Uint32 UnusedBits2 :1;
        Uint32 blit_hw :1;
        Uint32 blit_hw_CC :1;
        Uint32 blit_hw_A :1;
        Uint32 blit_sw :1;
        Uint32 blit_sw_CC :1;
        Uint32 blit_sw_A :1;
        Uint32 blit_fill :1;
        Uint32 UnusedBits3 :16;
        Uint32 video_mem;
        SDL_PixelFormat *vfmt;
} SDL_VideoInfo;
# 190 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
typedef struct SDL_Overlay {
        Uint32 format;
        int w, h;
        int planes;
        Uint16 *pitches;
        Uint8 **pixels;


        struct private_yuvhwfuncs *hwfuncs;
        struct private_yuvhwdata *hwdata;


        Uint32 hw_overlay :1;
        Uint32 UnusedBits :31;
} SDL_Overlay;



typedef enum {
    SDL_GL_RED_SIZE,
    SDL_GL_GREEN_SIZE,
    SDL_GL_BLUE_SIZE,
    SDL_GL_ALPHA_SIZE,
    SDL_GL_BUFFER_SIZE,
    SDL_GL_DOUBLEBUFFER,
    SDL_GL_DEPTH_SIZE,
    SDL_GL_STENCIL_SIZE,
    SDL_GL_ACCUM_RED_SIZE,
    SDL_GL_ACCUM_GREEN_SIZE,
    SDL_GL_ACCUM_BLUE_SIZE,
    SDL_GL_ACCUM_ALPHA_SIZE,
    SDL_GL_STEREO,
    SDL_GL_MULTISAMPLEBUFFERS,
    SDL_GL_MULTISAMPLESAMPLES
} SDL_GLattr;
# 245 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
extern int SDL_VideoInit(const char *driver_name, Uint32 flags);
extern void SDL_VideoQuit(void);

extern void _FreeGAPIBuffer(void);
extern unsigned char * _GetGAPIBuffer(void);





extern char * SDL_VideoDriverName(char *namebuf, int maxlen);







extern SDL_Surface * SDL_GetVideoSurface(void);







extern const SDL_VideoInfo * SDL_GetVideoInfo(void);
# 284 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
extern int SDL_VideoModeOK(int width, int height, int bpp, Uint32 flags);
# 295 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
extern SDL_Rect ** SDL_ListModes(SDL_PixelFormat *format, Uint32 flags);
# 355 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
extern SDL_Surface * SDL_SetVideoMode
                        (int width, int height, int bpp, Uint32 flags);







extern void SDL_UpdateRects
                (SDL_Surface *screen, int numrects, SDL_Rect *rects);
extern void SDL_UpdateRect
                (SDL_Surface *screen, Sint32 x, Sint32 y, Uint32 w, Uint32 h);
# 379 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
extern int SDL_Flip(SDL_Surface *screen);
# 389 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
extern int SDL_SetGamma(float red, float green, float blue);
# 403 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
extern int SDL_SetGammaRamp(const Uint16 *red, const Uint16 *green, const Uint16 *blue);
# 414 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
extern int SDL_GetGammaRamp(Uint16 *red, Uint16 *green, Uint16 *blue);
# 431 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
extern int SDL_SetColors(SDL_Surface *surface,
                        SDL_Color *colors, int firstcolor, int ncolors);
# 450 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
extern int SDL_SetPalette(SDL_Surface *surface, int flags,
                                   SDL_Color *colors, int firstcolor,
                                   int ncolors);




extern Uint32 SDL_MapRGB
                        (SDL_PixelFormat *format, Uint8 r, Uint8 g, Uint8 b);




extern Uint32 SDL_MapRGBA(SDL_PixelFormat *format,
                                   Uint8 r, Uint8 g, Uint8 b, Uint8 a);




extern void SDL_GetRGB(Uint32 pixel, SDL_PixelFormat *fmt,
                                Uint8 *r, Uint8 *g, Uint8 *b);




extern void SDL_GetRGBA(Uint32 pixel, SDL_PixelFormat *fmt,
                                 Uint8 *r, Uint8 *g, Uint8 *b, Uint8 *a);
# 513 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
extern SDL_Surface * SDL_CreateRGBSurface
                        (Uint32 flags, int width, int height, int depth,
                        Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask);
extern SDL_Surface * SDL_CreateRGBSurfaceFrom(void *pixels,
                        int width, int height, int depth, int pitch,
                        Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask);
extern void SDL_FreeSurface(SDL_Surface *surface);
# 539 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
extern int SDL_LockSurface(SDL_Surface *surface);
extern void SDL_UnlockSurface(SDL_Surface *surface);







extern SDL_Surface * SDL_LoadBMP_RW(SDL_RWops *src, int freesrc);
# 558 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
extern int SDL_SaveBMP_RW
                (SDL_Surface *surface, SDL_RWops *dst, int freedst);
# 574 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
extern int SDL_SetColorKey
                        (SDL_Surface *surface, Uint32 flag, Uint32 key);
# 592 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
extern int SDL_SetAlpha(SDL_Surface *surface, Uint32 flag, Uint8 alpha);
# 606 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
extern SDL_bool SDL_SetClipRect(SDL_Surface *surface, const SDL_Rect *rect);






extern void SDL_GetClipRect(SDL_Surface *surface, SDL_Rect *rect);
# 627 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
extern SDL_Surface * SDL_ConvertSurface
                        (SDL_Surface *src, SDL_PixelFormat *fmt, Uint32 flags);
# 704 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
extern int SDL_UpperBlit
                        (SDL_Surface *src, SDL_Rect *srcrect,
                         SDL_Surface *dst, SDL_Rect *dstrect);



extern int SDL_LowerBlit
                        (SDL_Surface *src, SDL_Rect *srcrect,
                         SDL_Surface *dst, SDL_Rect *dstrect);
# 723 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
extern int SDL_FillRect
                (SDL_Surface *dst, SDL_Rect *dstrect, Uint32 color);
# 737 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
extern SDL_Surface * SDL_DisplayFormat(SDL_Surface *surface);
# 751 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
extern SDL_Surface * SDL_DisplayFormatAlpha(SDL_Surface *surface);
# 763 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
extern SDL_Overlay * SDL_CreateYUVOverlay(int width, int height,
                                Uint32 format, SDL_Surface *display);


extern int SDL_LockYUVOverlay(SDL_Overlay *overlay);
extern void SDL_UnlockYUVOverlay(SDL_Overlay *overlay);







extern int SDL_DisplayYUVOverlay(SDL_Overlay *overlay, SDL_Rect *dstrect);


extern void SDL_FreeYUVOverlay(SDL_Overlay *overlay);
# 796 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
extern int SDL_GL_LoadLibrary(const char *path);




extern void * SDL_GL_GetProcAddress(const char* proc);




extern int SDL_GL_SetAttribute(SDL_GLattr attr, int value);
# 817 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
extern int SDL_GL_GetAttribute(SDL_GLattr attr, int* value);




extern void SDL_GL_SwapBuffers(void);





extern void SDL_GL_UpdateRects(int numrects, SDL_Rect* rects);
extern void SDL_GL_Lock(void);
extern void SDL_GL_Unlock(void);
# 839 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
extern void SDL_WM_SetCaption(const char *title, const char *icon);
extern void SDL_WM_GetCaption(char **title, char **icon);







extern void SDL_WM_SetIcon(SDL_Surface *icon, Uint8 *mask);






extern int SDL_WM_IconifyWindow(void);
# 872 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 3
extern int SDL_WM_ToggleFullScreen(SDL_Surface *surface);





typedef enum {
        SDL_GRAB_QUERY = -1,
        SDL_GRAB_OFF = 0,
        SDL_GRAB_ON = 1,
        SDL_GRAB_FULLSCREEN
} SDL_GrabMode;





extern SDL_GrabMode SDL_WM_GrabInput(SDL_GrabMode mode);


extern int SDL_SoftStretch(SDL_Surface *src, SDL_Rect *srcrect,
                                    SDL_Surface *dst, SDL_Rect *dstrect);





# 1 "/usr/local/arm-wince-pe/include/sdl/close_code.h" 1 3
# 900 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 2 3
# 35 "/usr/local/arm-wince-pe/include/sdl/SDL_mouse.h" 2 3

# 1 "/usr/local/arm-wince-pe/include/sdl/begin_code.h" 1 3
# 37 "/usr/local/arm-wince-pe/include/sdl/SDL_mouse.h" 2 3





typedef struct WMcursor WMcursor;
typedef struct {
        SDL_Rect area;
        Sint16 hot_x, hot_y;
        Uint8 *data;
        Uint8 *mask;
        Uint8 *save[2];
        WMcursor *wm_cursor;
} SDL_Cursor;
# 59 "/usr/local/arm-wince-pe/include/sdl/SDL_mouse.h" 3
extern Uint8 SDL_GetMouseState(int *x, int *y);







extern Uint8 SDL_GetRelativeMouseState(int *x, int *y);




extern void SDL_WarpMouse(Uint16 x, Uint16 y);
# 87 "/usr/local/arm-wince-pe/include/sdl/SDL_mouse.h" 3
extern SDL_Cursor * SDL_CreateCursor
                (Uint8 *data, Uint8 *mask, int w, int h, int hot_x, int hot_y);






extern void SDL_SetCursor(SDL_Cursor *cursor);




extern SDL_Cursor * SDL_GetCursor(void);




extern void SDL_FreeCursor(SDL_Cursor *cursor);
# 114 "/usr/local/arm-wince-pe/include/sdl/SDL_mouse.h" 3
extern int SDL_ShowCursor(int toggle);
# 138 "/usr/local/arm-wince-pe/include/sdl/SDL_mouse.h" 3
# 1 "/usr/local/arm-wince-pe/include/sdl/close_code.h" 1 3
# 139 "/usr/local/arm-wince-pe/include/sdl/SDL_mouse.h" 2 3
# 37 "/usr/local/arm-wince-pe/include/sdl/SDL_events.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_joystick.h" 1 3
# 38 "/usr/local/arm-wince-pe/include/sdl/SDL_events.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_quit.h" 1 3
# 39 "/usr/local/arm-wince-pe/include/sdl/SDL_events.h" 2 3

# 1 "/usr/local/arm-wince-pe/include/sdl/begin_code.h" 1 3
# 41 "/usr/local/arm-wince-pe/include/sdl/SDL_events.h" 2 3






enum { SDL_NOEVENT = 0,
       SDL_ACTIVEEVENT,
       SDL_KEYDOWN,
       SDL_KEYUP,
       SDL_MOUSEMOTION,
       SDL_MOUSEBUTTONDOWN,
       SDL_MOUSEBUTTONUP,
       SDL_JOYAXISMOTION,
       SDL_JOYBALLMOTION,
       SDL_JOYHATMOTION,
       SDL_JOYBUTTONDOWN,
       SDL_JOYBUTTONUP,
       SDL_QUIT,
       SDL_SYSWMEVENT,
       SDL_EVENT_RESERVEDA,
       SDL_EVENT_RESERVEDB,
       SDL_VIDEORESIZE,
       SDL_VIDEOEXPOSE,
       SDL_EVENT_RESERVED2,
       SDL_EVENT_RESERVED3,
       SDL_EVENT_RESERVED4,
       SDL_EVENT_RESERVED5,
       SDL_EVENT_RESERVED6,
       SDL_EVENT_RESERVED7,

       SDL_USEREVENT = 24,



       SDL_NUMEVENTS = 32
};



enum {
        SDL_ACTIVEEVENTMASK = (1<<(SDL_ACTIVEEVENT)),
        SDL_KEYDOWNMASK = (1<<(SDL_KEYDOWN)),
        SDL_KEYUPMASK = (1<<(SDL_KEYUP)),
        SDL_MOUSEMOTIONMASK = (1<<(SDL_MOUSEMOTION)),
        SDL_MOUSEBUTTONDOWNMASK = (1<<(SDL_MOUSEBUTTONDOWN)),
        SDL_MOUSEBUTTONUPMASK = (1<<(SDL_MOUSEBUTTONUP)),
        SDL_MOUSEEVENTMASK = (1<<(SDL_MOUSEMOTION))|
                                  (1<<(SDL_MOUSEBUTTONDOWN))|
                                  (1<<(SDL_MOUSEBUTTONUP)),
        SDL_JOYAXISMOTIONMASK = (1<<(SDL_JOYAXISMOTION)),
        SDL_JOYBALLMOTIONMASK = (1<<(SDL_JOYBALLMOTION)),
        SDL_JOYHATMOTIONMASK = (1<<(SDL_JOYHATMOTION)),
        SDL_JOYBUTTONDOWNMASK = (1<<(SDL_JOYBUTTONDOWN)),
        SDL_JOYBUTTONUPMASK = (1<<(SDL_JOYBUTTONUP)),
        SDL_JOYEVENTMASK = (1<<(SDL_JOYAXISMOTION))|
                                  (1<<(SDL_JOYBALLMOTION))|
                                  (1<<(SDL_JOYHATMOTION))|
                                  (1<<(SDL_JOYBUTTONDOWN))|
                                  (1<<(SDL_JOYBUTTONUP)),
        SDL_VIDEORESIZEMASK = (1<<(SDL_VIDEORESIZE)),
        SDL_VIDEOEXPOSEMASK = (1<<(SDL_VIDEOEXPOSE)),
        SDL_QUITMASK = (1<<(SDL_QUIT)),
        SDL_SYSWMEVENTMASK = (1<<(SDL_SYSWMEVENT))
};



typedef struct {
        Uint8 type;
        Uint8 gain;
        Uint8 state;
} SDL_ActiveEvent;


typedef struct {
        Uint8 type;
        Uint8 which;
        Uint8 state;
        SDL_keysym keysym;
} SDL_KeyboardEvent;


typedef struct {
        Uint8 type;
        Uint8 which;
        Uint8 state;
        Uint16 x, y;
        Sint16 xrel;
        Sint16 yrel;
} SDL_MouseMotionEvent;


typedef struct {
        Uint8 type;
        Uint8 which;
        Uint8 button;
        Uint8 state;
        Uint16 x, y;
} SDL_MouseButtonEvent;


typedef struct {
        Uint8 type;
        Uint8 which;
        Uint8 axis;
        Sint16 value;
} SDL_JoyAxisEvent;


typedef struct {
        Uint8 type;
        Uint8 which;
        Uint8 ball;
        Sint16 xrel;
        Sint16 yrel;
} SDL_JoyBallEvent;


typedef struct {
        Uint8 type;
        Uint8 which;
        Uint8 hat;
        Uint8 value;





} SDL_JoyHatEvent;


typedef struct {
        Uint8 type;
        Uint8 which;
        Uint8 button;
        Uint8 state;
} SDL_JoyButtonEvent;





typedef struct {
        Uint8 type;
        int w;
        int h;
} SDL_ResizeEvent;


typedef struct {
        Uint8 type;
} SDL_ExposeEvent;


typedef struct {
        Uint8 type;
} SDL_QuitEvent;


typedef struct {
        Uint8 type;
        int code;
        void *data1;
        void *data2;
} SDL_UserEvent;


struct SDL_SysWMmsg;
typedef struct SDL_SysWMmsg SDL_SysWMmsg;
typedef struct {
        Uint8 type;
        SDL_SysWMmsg *msg;
} SDL_SysWMEvent;


typedef union {
        Uint8 type;
        SDL_ActiveEvent active;
        SDL_KeyboardEvent key;
        SDL_MouseMotionEvent motion;
        SDL_MouseButtonEvent button;
        SDL_JoyAxisEvent jaxis;
        SDL_JoyBallEvent jball;
        SDL_JoyHatEvent jhat;
        SDL_JoyButtonEvent jbutton;
        SDL_ResizeEvent resize;
        SDL_ExposeEvent expose;
        SDL_QuitEvent quit;
        SDL_UserEvent user;
        SDL_SysWMEvent syswm;
} SDL_Event;
# 241 "/usr/local/arm-wince-pe/include/sdl/SDL_events.h" 3
extern void SDL_PumpEvents(void);
# 255 "/usr/local/arm-wince-pe/include/sdl/SDL_events.h" 3
typedef enum {
        SDL_ADDEVENT,
        SDL_PEEKEVENT,
        SDL_GETEVENT
} SDL_eventaction;

extern int SDL_PeepEvents(SDL_Event *events, int numevents,
                                SDL_eventaction action, Uint32 mask);





extern int SDL_PollEvent(SDL_Event *event);





extern int SDL_WaitEvent(SDL_Event *event);





extern int SDL_PushEvent(SDL_Event *event);







typedef int (*SDL_EventFilter)(const SDL_Event *event);
# 305 "/usr/local/arm-wince-pe/include/sdl/SDL_events.h" 3
extern void SDL_SetEventFilter(SDL_EventFilter filter);





extern SDL_EventFilter SDL_GetEventFilter(void);
# 325 "/usr/local/arm-wince-pe/include/sdl/SDL_events.h" 3
extern Uint8 SDL_EventState(Uint8 type, int state);






# 1 "/usr/local/arm-wince-pe/include/sdl/close_code.h" 1 3
# 333 "/usr/local/arm-wince-pe/include/sdl/SDL_events.h" 2 3
# 43 "/usr/local/arm-wince-pe/include/sdl/sdl.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_video.h" 1 3
# 44 "/usr/local/arm-wince-pe/include/sdl/sdl.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_byteorder.h" 1 3
# 45 "/usr/local/arm-wince-pe/include/sdl/sdl.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_version.h" 1 3
# 33 "/usr/local/arm-wince-pe/include/sdl/SDL_version.h" 3
# 1 "/usr/local/arm-wince-pe/include/sdl/SDL_types.h" 1 3
# 34 "/usr/local/arm-wince-pe/include/sdl/SDL_version.h" 2 3

# 1 "/usr/local/arm-wince-pe/include/sdl/begin_code.h" 1 3
# 36 "/usr/local/arm-wince-pe/include/sdl/SDL_version.h" 2 3
# 47 "/usr/local/arm-wince-pe/include/sdl/SDL_version.h" 3
typedef struct {
        Uint8 major;
        Uint8 minor;
        Uint8 patch;
} SDL_version;
# 82 "/usr/local/arm-wince-pe/include/sdl/SDL_version.h" 3
extern const SDL_version * SDL_Linked_Version(void);





# 1 "/usr/local/arm-wince-pe/include/sdl/close_code.h" 1 3
# 89 "/usr/local/arm-wince-pe/include/sdl/SDL_version.h" 2 3
# 46 "/usr/local/arm-wince-pe/include/sdl/sdl.h" 2 3

# 1 "/usr/local/arm-wince-pe/include/sdl/begin_code.h" 1 3
# 48 "/usr/local/arm-wince-pe/include/sdl/sdl.h" 2 3
# 72 "/usr/local/arm-wince-pe/include/sdl/sdl.h" 3
extern int SDL_Init(Uint32 flags);


extern int SDL_InitSubSystem(Uint32 flags);


extern void SDL_QuitSubSystem(Uint32 flags);





extern Uint32 SDL_WasInit(Uint32 flags);




extern void SDL_Quit(void);





# 1 "/usr/local/arm-wince-pe/include/sdl/close_code.h" 1 3
# 96 "/usr/local/arm-wince-pe/include/sdl/sdl.h" 2 3
# 2 "/usr/local/arm-wince-pe/include/SDL.h" 2 3
# 2 "wm/main.c" 2
# 1 "shared.h" 1




# 1 "/usr/local/arm-wince-pe/include/math.h" 1 3






# 1 "/usr/local/arm-wince-pe/include/machine/ieeefp.h" 1 3
# 8 "/usr/local/arm-wince-pe/include/math.h" 2 3









union __dmath
{
  __ULong i[2];
  double d;
};




extern const union __dmath __infinity[];
# 35 "/usr/local/arm-wince-pe/include/math.h" 3
extern double atan (double);
extern double cos (double);
extern double sin (double);
extern double tan (double);
extern double tanh (double);
extern double frexp (double, int *);
extern double modf (double, double *);
extern double ceil (double);
extern double fabs (double);
extern double floor (double);






extern double acos (double);
extern double asin (double);
extern double atan2 (double, double);
extern double cosh (double);
extern double sinh (double);
extern double exp (double);
extern double ldexp (double, int);
extern double log (double);
extern double log10 (double);
extern double pow (double, double);
extern double sqrt (double);
extern double fmod (double, double);
# 72 "/usr/local/arm-wince-pe/include/math.h" 3
typedef float float_t;
typedef double double_t;
# 82 "/usr/local/arm-wince-pe/include/math.h" 3
extern int __fpclassifyf (float x);
extern int __fpclassifyd (double x);
# 121 "/usr/local/arm-wince-pe/include/math.h" 3
extern double infinity (void);
extern double nan (void);
extern int isnan (double);
extern int isinf (double);
extern int finite (double);
extern double copysign (double, double);
extern int ilogb (double);

extern double asinh (double);
extern double cbrt (double);
extern double nextafter (double, double);
extern double rint (double);
extern double scalbn (double, int);

extern double exp2 (double);
extern double scalbln (double, long int);
extern double tgamma (double);
extern double nearbyint (double);
extern long int lrint (double);
extern double round (double);
extern long int lround (double);
extern double trunc (double);
extern double remquo (double, double, int *);
extern double copysign (double, double);
extern double fdim (double, double);
extern double fmax (double, double);
extern double fmin (double, double);
extern double fma (double, double, double);
extern void sincos (double, double *, double *);


extern double log1p (double);
extern double expm1 (double);



extern double acosh (double);
extern double atanh (double);
extern double remainder (double, double);
extern double gamma (double);
extern double gamma_r (double, int *);
extern double lgamma (double);
extern double lgamma_r (double, int *);
extern double erf (double);
extern double erfc (double);
extern double y0 (double);
extern double y1 (double);
extern double yn (int, double);
extern double j0 (double);
extern double j1 (double);
extern double jn (int, double);



extern double hypot (double, double);


extern double cabs();
extern double drem (double, double);
# 189 "/usr/local/arm-wince-pe/include/math.h" 3
extern float atanf (float);
extern float cosf (float);
extern float sinf (float);
extern float tanf (float);
extern float tanhf (float);
extern float frexpf (float, int *);
extern float modff (float, float *);
extern float ceilf (float);
extern float fabsf (float);
extern float floorf (float);


extern float acosf (float);
extern float asinf (float);
extern float atan2f (float, float);
extern float coshf (float);
extern float sinhf (float);
extern float expf (float);
extern float ldexpf (float, int);
extern float logf (float);
extern float log10f (float);
extern float powf (float, float);
extern float sqrtf (float);
extern float fmodf (float, float);
# 221 "/usr/local/arm-wince-pe/include/math.h" 3
extern float exp2f (float);
extern float scalblnf (float, long int);
extern float tgammaf (float);
extern float nearbyintf (float);
extern long int lrintf (float);
extern float roundf (float);
extern long int lroundf (float);
extern float truncf (float);
extern float remquof (float, float, int *);
extern float copysignf (float, float);
extern float fdimf (float, float);
extern float fmaxf (float, float);
extern float fminf (float, float);
extern float fmaf (float, float, float);

extern float infinityf (void);
extern float nanf (void);
extern int isnanf (float);
extern int isinff (float);
extern int finitef (float);
extern float copysignf (float, float);
extern int ilogbf (float);

extern float asinhf (float);
extern float cbrtf (float);
extern float nextafterf (float, float);
extern float rintf (float);
extern float scalbnf (float, int);
extern float log1pf (float);
extern float expm1f (float);
extern void sincosf (float, float *, float *);


extern float acoshf (float);
extern float atanhf (float);
extern float remainderf (float, float);
extern float gammaf (float);
extern float gammaf_r (float, int *);
extern float lgammaf (float);
extern float lgammaf_r (float, int *);
extern float erff (float);
extern float erfcf (float);
extern float y0f (float);
extern float y1f (float);
extern float ynf (int, float);
extern float j0f (float);
extern float j1f (float);
extern float jnf (int, float);

extern float hypotf (float, float);

extern float cabsf();
extern float dremf (float, float);






extern int *__signgam (void);
# 290 "/usr/local/arm-wince-pe/include/math.h" 3
struct exception

{
  int type;
  char *name;
  double arg1;
  double arg2;
  double retval;
  int err;
};




extern int matherr (struct exception *e);
# 345 "/usr/local/arm-wince-pe/include/math.h" 3
enum __fdlibm_version
{
  __fdlibm_ieee = -1,
  __fdlibm_svid,
  __fdlibm_xopen,
  __fdlibm_posix
};




extern const enum __fdlibm_version __fdlib_version;
# 365 "/usr/local/arm-wince-pe/include/math.h" 3

# 6 "shared.h" 2


# 1 "mtypes.h" 1



typedef unsigned char uint8;
typedef unsigned short int uint16;
typedef unsigned long int uint32;

typedef signed char int8;
typedef signed short int int16;
typedef signed long int int32;
# 9 "shared.h" 2
# 1 "macros.h" 1
# 10 "shared.h" 2
# 1 "genesis.h" 1




extern uint8 cart_rom[0x400000];
extern uint8 work_ram[0x10000];
extern uint8 zram[0x2000];
extern uint8 zbusreq;
extern uint8 zbusack;
extern uint8 zreset;
extern uint8 zirq;
extern uint32 zbank;
extern uint8 gen_running;


void gen_init(void);
void gen_reset(void);
void gen_shutdown(void);
int gen_busack_r(void);
void gen_busreq_w(int state);
void gen_reset_w(int state);
void gen_bank_w(int state);
void bswap(uint8 *mem, int length);
int z80_irq_callback(int param);
void m68k_irq_ack_callback(int int_level);

int CycloneDoRun(int cyc);
int CycloneInterrupt(int irq);

extern struct Cyclone CycloneCPU;
extern struct DrZ80 DrZ80CPU;
extern int32 total_cycles;
extern uint32 rom_size;
# 11 "shared.h" 2
# 1 "eeprom.h" 1
uint32 lastSSRamWrite;
void SRAMWriteEEPROM(uint32 d);
uint32 SRAMReadEEPROM();
void SRAMUpdPending(uint32 a, uint32 d);
# 12 "shared.h" 2





# 1 "vdp.h" 1





extern uint8 is_color_dirty;
extern uint8 color_dirty[0x40];
extern uint8 is_border_dirty;

typedef struct
{
        uint8 bg_name_dirty[0x800];
        uint32 bg_name_list[0x800];
        uint8 bg_pattern_cache[0x80000];
        uint32 bg_list_index;
}t_bg;

extern t_bg bg;

typedef struct
{
uint8 sat[0x400];
uint8 vram[0x10000];
uint8 cram[0x80];
uint8 vsram[0x80];
uint8 reg[0x20];
uint16 addr;
uint16 addr_latch;
uint8 code;
uint8 pending;
uint16 buffer;
uint16 status;
uint16 ntab;
uint16 ntbb;
uint16 ntwb;
uint16 satb;
uint16 hscb;
uint16 sat_base_mask;
uint16 sat_addr_mask;
uint8 border;
uint8 playfield_shift;
uint16 playfield_row_mask;
uint32 y_mask;
uint8 playfield_col_mask;
int hint_pending;
int vint_pending;
int dma_fill;
int im2_flag;
int frame_end;
int v_counter;
int v_update;
int collision;
uint8 pal;
uint8 dma;
}t_vdp;

extern t_vdp vdp;


void vdp_init(void);
void vdp_reset(void);
void vdp_shutdown(void);
void vdp_ctrl_w(uint16 data);
uint16 vdp_ctrl_r(void);
void vdp_data_w(uint16 data);
uint16 vdp_data_r(void);
void vdp_reg_w(uint8 r, uint8 d);
uint16 vdp_hvc_r(void);
void dma_copy(void);
void dma_vbus(void);
void vdp_test_w(uint16 value);
# 18 "shared.h" 2
# 1 "render.h" 1
# 11 "render.h"
typedef struct
{
    uint8 left;
    uint8 right;
    uint8 enable;
}clip_t;


int render_init(void);
void set_renderer(void);
void render_reset(void);
void render_shutdown(void);
void render_line(int line);
void render_line_with_collition(int line);
void render_obj(int line, uint8 *buf, uint8 *table);
void render_obj_im2(int line, uint8 *buf, uint8 *table);
void render_ntw(int line, uint8 *buf);
void render_ntw_im2(int line, uint8 *buf);
void render_ntx(int which, int line, uint8 *buf);
void render_ntx_im2(int which, int line, uint8 *buf);
void render_ntx_vs(int which, int line, uint8 *buf);
void update_bg_pattern_cache(void);
void get_hscroll(int line, uint16 *scrolla, uint16 *scrollb);
void window_clip(int line);
int make_lut_bg(int bx, int ax);
int make_lut_obj(int bx, int sx);
int make_lut_bg_ste(int bx, int ax);
int make_lut_obj_ste(int bx, int sx);
int make_lut_bgobj_ste(int bx, int sx);
void remap_8(uint8 *src, uint8 *dst, uint8 *table, int length);
void remap_16(uint8 *src, uint16 *dst, uint16 *table, int length);
void remap_32(uint8 *src, uint32 *dst, uint32 *table, int length);
void merge(uint8 *srca, uint8 *srcb, uint8 *dst, uint8 *table, int width);
void color_update_16(int index, uint16 data);
void make_name_lut(void);
void parse_satb(int line);
# 19 "shared.h" 2
# 1 "mem68k.h" 1
# 20 "shared.h" 2
# 1 "memz80.h" 1





unsigned int cpu_readmem16(unsigned int address);
void cpu_writemem16(unsigned int address, unsigned int data);
unsigned int cpu_readport16(unsigned int port);
void cpu_writeport16(unsigned int port, unsigned int data);
int z80_vdp_r(int address);
void z80_vdp_w(int address, int data);

unsigned int drz80_rebasePC(unsigned short address);
unsigned int drz80_rebaseSP(unsigned short address);
unsigned char drz80_in(unsigned char p);
void drz80_out(unsigned char p, unsigned char d);
unsigned char drz80_read8(unsigned short address);
unsigned short drz80_read16(unsigned short address);
void drz80_write8(unsigned char data,unsigned short address);
void drz80_write16(unsigned short data,unsigned short address);
# 21 "shared.h" 2
# 1 "membnk.h" 1





void z80_write_banked_memory(unsigned int address, unsigned int data);
int z80_read_banked_memory(unsigned int address);

void z80bank_vdp_w(int address, int data);
int z80bank_vdp_r(int address);

void z80bank_unused_w(int address, int data);
int z80bank_unused_r(int address);
void z80bank_lockup_w(int address, int data);
int z80bank_lockup_r(int address);
# 22 "shared.h" 2
# 1 "memvdp.h" 1





unsigned int vdp_dma_r(unsigned int address);
# 23 "shared.h" 2
# 1 "system.h" 1
# 25 "system.h"
typedef struct
{
    uint8 *data;
    int width;
    int height;
    int depth;
    int pitch;
    int granularity;
    int remap;
    struct {
        int x;
        int y;
        int w;
        int h;
        int ow;
        int oh;
        int changed;
    }viewport;
}t_bitmap;

typedef struct
{
uint32 data;
uint32 delay;
uint32 phase;
}t_pad;

typedef struct
{
    uint8 dev[(8)];
    t_pad pad[(8)];
    uint32 system;
}t_input;

typedef struct
{
    int sample_rate;
    int enabled;

    int buffer_size;
    int block_size;
    int block_offset;
    int16 *buffer;
    struct {
        int curStage;
        int lastStage;
        int16 *buffer;
    } fm;
    struct {
        int curStage;
        int lastStage;
        int16 *buffer;
    } psg;
}t_snd;


extern t_bitmap bitmap;
extern t_input input;
extern t_snd snd;


void system_init(void);
int system_frame(int skip);
void system_reset(void);
void system_shutdown(void);
int audio_init(int rate);
void audio_shutdown(void);
void audio_update(void);
void audio_update_f(void);
int m68k_total_cycles(void);
# 24 "shared.h" 2
# 1 "unzip.h" 1
# 57 "unzip.h"
typedef voidp unzFile;
# 71 "unzip.h"
typedef struct tm_unz_s
{
        uInt tm_sec;
        uInt tm_min;
        uInt tm_hour;
        uInt tm_mday;
        uInt tm_mon;
        uInt tm_year;
} tm_unz;



typedef struct unz_global_info_s
{
        uLong number_entry;

        uLong size_comment;
} unz_global_info;



typedef struct unz_file_info_s
{
    uLong version;
    uLong version_needed;
    uLong flag;
    uLong compression_method;
    uLong dosDate;
    uLong crc;
    uLong compressed_size;
    uLong uncompressed_size;
    uLong size_filename;
    uLong size_file_extra;
    uLong size_file_comment;

    uLong disk_num_start;
    uLong internal_fa;
    uLong external_fa;

    tm_unz tmu_date;
} unz_file_info;

extern int ZEXPORT unzStringFileNameCompare OF ((const char* fileName1,
                                                                                                 const char* fileName2,
                                                                                                 int iCaseSensitivity));
# 126 "unzip.h"
extern unzFile ZEXPORT unzOpen OF((const char *path));
# 137 "unzip.h"
extern int ZEXPORT unzClose OF((unzFile file));






extern int ZEXPORT unzGetGlobalInfo OF((unzFile file,
                                        unz_global_info *pglobal_info));






extern int ZEXPORT unzGetGlobalComment OF((unzFile file,
                                                                                   char *szComment,
                                           uLong uSizeBuf));
# 165 "unzip.h"
extern int ZEXPORT unzGoToFirstFile OF((unzFile file));





extern int ZEXPORT unzGoToNextFile OF((unzFile file));






extern int ZEXPORT unzLocateFile OF((unzFile file,
                                     const char *szFileName,
                                     int iCaseSensitivity));
# 191 "unzip.h"
extern int ZEXPORT unzGetCurrentFileInfo OF((unzFile file,
                                             unz_file_info *pfile_info,
                                             char *szFileName,
                                             uLong fileNameBufferSize,
                                             void *extraField,
                                             uLong extraFieldBufferSize,
                                             char *szComment,
                                             uLong commentBufferSize));
# 217 "unzip.h"
extern int ZEXPORT unzOpenCurrentFile OF((unzFile file));





extern int ZEXPORT unzCloseCurrentFile OF((unzFile file));






extern int ZEXPORT unzReadCurrentFile OF((unzFile file,
                                          voidp buf,
                                          unsigned len));
# 244 "unzip.h"
extern z_off_t ZEXPORT unztell OF((unzFile file));




extern int ZEXPORT unzeof OF((unzFile file));




extern int ZEXPORT unzGetLocalExtrafield OF((unzFile file,
                                                                                         voidp buf,
                                                                                         unsigned len));
# 25 "shared.h" 2
# 1 "fileio.h" 1





extern int cart_size;
extern char cart_name[0x100];


uint8 *load_archive(char *filename, int *file_size);
int load_cart(char *filename);
int check_zip(char *filename);
int gzsize(gzFile *gd);
# 26 "shared.h" 2
# 1 "loadrom.h" 1





void deinterleave_block(uint8 *src);
int load_rom(char *filename);

typedef struct {
int start;
int len;
int end;
int reg;
int eeprom;
uint8 *mem;
uint16 addr;
uint8 cycle;
uint8 slave;
} t_sram;

t_sram sram;

extern uint8 vdp_rate;
# 27 "shared.h" 2
# 1 "mio.h" 1
# 12 "mio.h"
typedef struct
{
    void (*data_w)(uint8 data);
    uint8 (*data_r)(void);
} port_t;

typedef struct
{
    uint8 state;
} t_input_3b;


extern port_t port[3];
extern uint8 io_reg[0x10];


extern void io_reset(void);
extern void gen_io_w(int offset, int value);
extern int gen_io_r(int offset);
extern uint8 pad_2b_r(void);
extern uint8 device_3b_r(void);
extern void device_3b_w(uint8 data);
extern uint8 device_6b_r(void);
extern void device_6b_w(uint8 data);
# 28 "shared.h" 2
# 1 "gtkopts.h" 1
int gtkopts_load(const char *file);
int gtkopts_save(const char *file);
const char *gtkopts_getvalue(const char *key);
int gtkopts_setvalue(const char *key, const char *val);


typedef struct _t_conf {
  struct _t_conf *next;
  char *key;
  char *value;
} t_conf;

extern t_conf *gtkopts_conf;
# 29 "shared.h" 2
# 1 "locopts.h" 1
int locopts_load(const char *file);
int locopts_save(const char *file);
const char *locopts_getvalue(const char *key);
int locopts_setvalue(const char *key, const char *val);
# 13 "locopts.h"
extern t_conf *locopts_conf;
# 30 "shared.h" 2
# 1 "sound/sound.h" 1




typedef struct
{
    int running;
    int enable;
    int count;
    int base;
    int index;
} t_timer;


extern int fm_timera_tab[1024];
extern int fm_timerb_tab[256];
extern uint8 fm_reg[2][0x100];
extern uint8 fm_latch[2];
extern int timer_status;
extern t_timer timer[2];


void sound_init(void);
void sound_reset(void);
void fm_write(int address, int data);

void fm_update_timers(void);
void psg_write(int data);
# 31 "shared.h" 2
# 1 "sound/fm.h" 1
# 24 "sound/fm.h"
typedef unsigned char UINT8;
typedef unsigned short UINT16;
typedef unsigned int UINT32;
typedef signed char INT8;
typedef signed short INT16;
typedef signed int INT32;
# 46 "sound/fm.h"
typedef INT16 FMSAMPLE;
typedef unsigned long FMSAMPLE_MIX;






typedef void (*FM_TIMERHANDLER)(int n,int c,int cnt,double stepTime);
typedef void (*FM_IRQHANDLER)(int n,int irq);
# 149 "sound/fm.h"
int YM2612Init(int baseclock, int rate);
void YM2612Shutdown(void);
void YM2612ResetChip(void);
void YM2612UpdateOne(INT16 *buffer, int length);
int YM2612Write(int a,unsigned char v);
unsigned char YM2612Read(void);
int YM2612TimerOver(int c );
# 32 "shared.h" 2
# 1 "sound/sn76496.h" 1





struct SN76496interface
{
    int num;
        int baseclock[1];
        int volume[1];
};

struct SN76496
{
        int SampleRate;
        unsigned int UpdateStep;
    int VolTable[16];
    int Register[8];
    int LastRegister;
    int Volume[4];
    unsigned int RNG;
    int NoiseFB;
        int Period[4];
        int Count[4];
        int Output[4];
};

struct SN76496 sn[1];


void SN76496Write(int chip,int data);
void SN76496Update(int chip,signed short int *buffer,int length);
void SN76496_set_clock(int chip,int clock);
void SN76496_set_gain(int chip,int gain);
int SN76496_init(int chip,int clock,int volume,int sample_rate);
int SN76496_sh_start(int clock, int volume, int rate);
# 33 "shared.h" 2



# 1 "Drz80.h" 1
# 31 "Drz80.h"
extern int DrZ80Ver;

struct DrZ80
{
  unsigned int Z80PC;
  unsigned int Z80A;
  unsigned int Z80F;
  unsigned int Z80BC;
  unsigned int Z80DE;
  unsigned int Z80HL;
  unsigned int Z80SP;
  unsigned int Z80PC_BASE;
  unsigned int Z80SP_BASE;
  unsigned int Z80IX;
  unsigned int Z80IY;
  unsigned int Z80I;
  unsigned int Z80A2;
  unsigned int Z80F2;
  unsigned int Z80BC2;
  unsigned int Z80DE2;
  unsigned int Z80HL2;
  int cycles;
  int previouspc;
  unsigned char Z80_IRQ;
  unsigned char Z80IF;
  unsigned char Z80IM;
  unsigned char spare;
  unsigned int z80irqvector;
  void (*z80_irq_callback )(void);
  void (*z80_write8 )(unsigned char d,unsigned short a);
  void (*z80_write16 )(unsigned short d,unsigned short a);
  unsigned char (*z80_in)(unsigned short p);
  void (*z80_out )(unsigned short p,unsigned char d);
  unsigned char (*z80_read8)(unsigned short a);
  unsigned short (*z80_read16)(unsigned short a);
  unsigned int (*z80_rebaseSP)(unsigned short new_sp);
  unsigned int (*z80_rebasePC)(unsigned short new_pc);
  unsigned int bla;
};

extern int DrZ80Run(struct DrZ80 *pcy,unsigned int cyc);
# 37 "shared.h" 2

extern uint8 use_cyclone;
extern uint8 use_drz80;
extern uint8 use_z80;
extern uint8 fm_status;
extern uint8 fastsound;
extern uint8 sound;
# 3 "wm/main.c" 2
# 1 "/usr/local/arm-wince-pe/include/wtypes.h" 1 3
# 12 "/usr/local/arm-wince-pe/include/wtypes.h" 3
# 1 "/usr/local/arm-wince-pe/include/rpc.h" 1 3
# 16 "/usr/local/arm-wince-pe/include/rpc.h" 3
# 1 "/usr/local/arm-wince-pe/include/windows.h" 1 3
# 18 "/usr/local/arm-wince-pe/include/windows.h" 3
# 1 "/usr/local/arm-wince-pe/include/windef.h" 1 3
# 43 "/usr/local/arm-wince-pe/include/windef.h" 3
typedef unsigned long ULONG;
typedef ULONG *PULONG;
typedef unsigned short USHORT;
typedef USHORT *PUSHORT;
typedef unsigned char UCHAR;
typedef UCHAR *PUCHAR;
typedef char *PSZ;
# 146 "/usr/local/arm-wince-pe/include/windef.h" 3
typedef unsigned long DWORD;
typedef int BOOL;
typedef unsigned char BYTE;
typedef unsigned short WORD;
typedef float FLOAT;
typedef FLOAT *PFLOAT;
typedef BOOL *PBOOL;
typedef BOOL *LPBOOL;
typedef BYTE *PBYTE;
typedef BYTE *LPBYTE;
typedef int *PINT;
typedef int *LPINT;
typedef WORD *PWORD;
typedef WORD *LPWORD;
typedef long *LPLONG;
typedef DWORD *PDWORD;
typedef DWORD *LPDWORD;
typedef short *LPSHORT;
typedef void *LPVOID;
typedef const void *LPCVOID;

typedef int INT;
typedef unsigned int UINT;
typedef unsigned int *PUINT;


# 1 "/usr/local/arm-wince-pe/include/winnt.h" 1 3
# 26 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef long unsigned int size_t;


# 1 "/usr/local/arm-wince-pe/include/ctype.h" 1 3







int isalnum (int __c);
int isalpha (int __c);
int iscntrl (int __c);
int isdigit (int __c);
int isgraph (int __c);
int islower (int __c);
int isprint (int __c);
int ispunct (int __c);
int isspace (int __c);
int isupper (int __c);
int isxdigit (int __c);
int tolower (int __c);
int toupper (int __c);


int isblank (int __c);
int isascii (int __c);
int toascii (int __c);
int _tolower (int __c);
int _toupper (int __c);
# 39 "/usr/local/arm-wince-pe/include/ctype.h" 3
extern const char _ctype_[];
# 68 "/usr/local/arm-wince-pe/include/ctype.h" 3

# 30 "/usr/local/arm-wince-pe/include/winnt.h" 2 3
# 58 "/usr/local/arm-wince-pe/include/winnt.h" 3
#pragma warning(disable:4116)
# 92 "/usr/local/arm-wince-pe/include/winnt.h" 3
# 1 "/usr/local/arm-wince-pe/include/basetsd.h" 1 3
# 28 "/usr/local/arm-wince-pe/include/basetsd.h" 3
typedef int LONG32, *PLONG32;
typedef int INT32, *PINT32;





typedef unsigned int ULONG32, *PULONG32;
typedef unsigned int DWORD32, *PDWORD32;
typedef unsigned int UINT32, *PUINT32;
# 122 "/usr/local/arm-wince-pe/include/basetsd.h" 3
typedef int INT_PTR, *PINT_PTR;
typedef unsigned int UINT_PTR, *PUINT_PTR;

typedef long LONG_PTR, *PLONG_PTR;
typedef unsigned long ULONG_PTR, *PULONG_PTR;

typedef unsigned short UHALF_PTR, *PUHALF_PTR;
typedef short HALF_PTR, *PHALF_PTR;
# 157 "/usr/local/arm-wince-pe/include/basetsd.h" 3
typedef ULONG_PTR SIZE_T, *PSIZE_T;
typedef LONG_PTR SSIZE_T, *PSSIZE_T;





typedef ULONG_PTR DWORD_PTR, *PDWORD_PTR;





typedef __int64 LONG64, *PLONG64;
typedef __int64 INT64, *PINT64;






typedef unsigned __int64 ULONG64, *PULONG64;
typedef unsigned __int64 DWORD64, *PDWORD64;
typedef unsigned __int64 UINT64, *PUINT64;
# 93 "/usr/local/arm-wince-pe/include/winnt.h" 2 3
# 107 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef void *PVOID;
typedef void * PVOID64;
# 135 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef char CHAR;
typedef short SHORT;
typedef long LONG;







typedef wchar_t WCHAR;





typedef WCHAR *PWCHAR;
typedef WCHAR *LPWCH, *PWCH;
typedef const WCHAR *LPCWCH, *PCWCH;
typedef WCHAR *NWPSTR;
typedef WCHAR *LPWSTR, *PWSTR;

typedef const WCHAR *LPCWSTR, *PCWSTR;




typedef CHAR *PCHAR;
typedef CHAR *LPCH, *PCH;

typedef const CHAR *LPCCH, *PCCH;
typedef CHAR *NPSTR;
typedef CHAR *LPSTR, *PSTR;
typedef const CHAR *LPCSTR, *PCSTR;
# 196 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef char TCHAR, *PTCHAR;
typedef unsigned char TBYTE , *PTBYTE ;



typedef LPSTR LPTCH, PTCH;
typedef LPSTR PTSTR, LPTSTR;
typedef LPCSTR PCTSTR, LPCTSTR;






typedef SHORT *PSHORT;
typedef LONG *PLONG;


typedef void *HANDLE;





typedef HANDLE *PHANDLE;





typedef BYTE FCHAR;
typedef WORD FSHORT;
typedef DWORD FLONG;





typedef LONG HRESULT;
# 283 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef char CCHAR;
typedef DWORD LCID;
typedef PDWORD PLCID;
typedef WORD LANGID;
# 310 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _FLOAT128 {
    __int64 LowPart;
    __int64 HighPart;
} FLOAT128;

typedef FLOAT128 *PFLOAT128;
# 332 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef __int64 LONGLONG;
typedef unsigned __int64 ULONGLONG;
# 350 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef LONGLONG *PLONGLONG;
typedef ULONGLONG *PULONGLONG;



typedef LONGLONG USN;




typedef union _LARGE_INTEGER {
    struct {
        DWORD LowPart;
        LONG HighPart;
    };
    struct {
        DWORD LowPart;
        LONG HighPart;
    } u;

    LONGLONG QuadPart;
} LARGE_INTEGER;

typedef LARGE_INTEGER *PLARGE_INTEGER;





typedef union _ULARGE_INTEGER {
    struct {
        DWORD LowPart;
        DWORD HighPart;
    };
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } u;

    ULONGLONG QuadPart;
} ULARGE_INTEGER;

typedef ULARGE_INTEGER *PULARGE_INTEGER;
# 401 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _LUID {
    DWORD LowPart;
    LONG HighPart;
} LUID, *PLUID;


typedef ULONGLONG DWORDLONG;
typedef DWORDLONG *PDWORDLONG;
# 643 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef BYTE BOOLEAN;
typedef BOOLEAN *PBOOLEAN;





typedef struct _LIST_ENTRY {
   struct _LIST_ENTRY *Flink;
   struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY, * PRLIST_ENTRY;






typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;
# 671 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _GUID {
    DWORD Data1;
    WORD Data2;
    WORD Data3;
    BYTE Data4[8];
} GUID;






typedef struct _OBJECTID {
    GUID Lineage;
    DWORD Uniquifier;
} OBJECTID;
# 1483 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _LDT_ENTRY {
    WORD LimitLow;
    WORD BaseLow;
    union {
        struct {
            BYTE BaseMid;
            BYTE Flags1;
            BYTE Flags2;
            BYTE BaseHi;
        } Bytes;
        struct {
            DWORD BaseMid : 8;
            DWORD Type : 5;
            DWORD Dpl : 2;
            DWORD Pres : 1;
            DWORD LimitHi : 4;
            DWORD Sys : 1;
            DWORD Reserved_0 : 1;
            DWORD Default_Big : 1;
            DWORD Granularity : 1;
            DWORD BaseHi : 8;
        } Bits;
    } HighWord;
} LDT_ENTRY, *PLDT_ENTRY;
# 2944 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _EXCEPTION_RECORD {
    DWORD ExceptionCode;
    DWORD ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    ULONG_PTR ExceptionInformation[15];
    } EXCEPTION_RECORD;

typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;





typedef struct _EXCEPTION_POINTERS {
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;
typedef PVOID PACCESS_TOKEN;
typedef PVOID PSECURITY_DESCRIPTOR;
typedef PVOID PSID;
# 3005 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef DWORD ACCESS_MASK;
typedef ACCESS_MASK *PACCESS_MASK;
# 3063 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _GENERIC_MAPPING {
    ACCESS_MASK GenericRead;
    ACCESS_MASK GenericWrite;
    ACCESS_MASK GenericExecute;
    ACCESS_MASK GenericAll;
} GENERIC_MAPPING;
typedef GENERIC_MAPPING *PGENERIC_MAPPING;
# 3082 "/usr/local/arm-wince-pe/include/winnt.h" 3
# 1 "/usr/local/arm-wince-pe/include/pshpack4.h" 1 3
# 30 "/usr/local/arm-wince-pe/include/pshpack4.h" 3
#pragma pack(4)
# 3083 "/usr/local/arm-wince-pe/include/winnt.h" 2 3

typedef struct _LUID_AND_ATTRIBUTES {
    LUID Luid;
    DWORD Attributes;
    } LUID_AND_ATTRIBUTES, * PLUID_AND_ATTRIBUTES;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;

# 1 "/usr/local/arm-wince-pe/include/poppack.h" 1 3
# 34 "/usr/local/arm-wince-pe/include/poppack.h" 3
#pragma pack()
# 3092 "/usr/local/arm-wince-pe/include/winnt.h" 2 3
# 3126 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _SID_IDENTIFIER_AUTHORITY {
    BYTE Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;





typedef struct _SID {
   BYTE Revision;
   BYTE SubAuthorityCount;
   SID_IDENTIFIER_AUTHORITY IdentifierAuthority;



   DWORD SubAuthority[1];

} SID, *PISID;







typedef enum _SID_NAME_USE {
    SidTypeUser = 1,
    SidTypeGroup,
    SidTypeDomain,
    SidTypeAlias,
    SidTypeWellKnownGroup,
    SidTypeDeletedAccount,
    SidTypeInvalid,
    SidTypeUnknown,
    SidTypeComputer
} SID_NAME_USE, *PSID_NAME_USE;

typedef struct _SID_AND_ATTRIBUTES {
    PSID Sid;
    DWORD Attributes;
    } SID_AND_ATTRIBUTES, * PSID_AND_ATTRIBUTES;

typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;
# 3385 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _ACL {
    BYTE AclRevision;
    BYTE Sbz1;
    WORD AclSize;
    WORD AceCount;
    WORD Sbz2;
} ACL;
typedef ACL *PACL;
# 3414 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _ACE_HEADER {
    BYTE AceType;
    BYTE AceFlags;
    WORD AceSize;
} ACE_HEADER;
typedef ACE_HEADER *PACE_HEADER;
# 3512 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _ACCESS_ALLOWED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_ALLOWED_ACE;

typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;

typedef struct _ACCESS_DENIED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_DENIED_ACE;
typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;

typedef struct _SYSTEM_AUDIT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_AUDIT_ACE;
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

typedef struct _SYSTEM_ALARM_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_ALARM_ACE;
typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;




typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_ALLOWED_OBJECT_ACE, *PACCESS_ALLOWED_OBJECT_ACE;

typedef struct _ACCESS_DENIED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_DENIED_OBJECT_ACE, *PACCESS_DENIED_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_AUDIT_OBJECT_ACE, *PSYSTEM_AUDIT_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_ALARM_OBJECT_ACE, *PSYSTEM_ALARM_OBJECT_ACE;
# 3594 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef enum _ACL_INFORMATION_CLASS {
    AclRevisionInformation = 1,
    AclSizeInformation
} ACL_INFORMATION_CLASS;






typedef struct _ACL_REVISION_INFORMATION {
    DWORD AclRevision;
} ACL_REVISION_INFORMATION;
typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;





typedef struct _ACL_SIZE_INFORMATION {
    DWORD AceCount;
    DWORD AclBytesInUse;
    DWORD AclBytesFree;
} ACL_SIZE_INFORMATION;
typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;
# 3645 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef WORD SECURITY_DESCRIPTOR_CONTROL, *PSECURITY_DESCRIPTOR_CONTROL;
# 3734 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
    BYTE Revision;
    BYTE Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    DWORD Owner;
    DWORD Group;
    DWORD Sacl;
    DWORD Dacl;
    } SECURITY_DESCRIPTOR_RELATIVE, *PISECURITY_DESCRIPTOR_RELATIVE;

typedef struct _SECURITY_DESCRIPTOR {
   BYTE Revision;
   BYTE Sbz1;
   SECURITY_DESCRIPTOR_CONTROL Control;
   PSID Owner;
   PSID Group;
   PACL Sacl;
   PACL Dacl;

   } SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;
# 3803 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _OBJECT_TYPE_LIST {
    WORD Level;
    WORD Sbz;
    GUID *ObjectType;
} OBJECT_TYPE_LIST, *POBJECT_TYPE_LIST;
# 3823 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef enum _AUDIT_EVENT_TYPE {
    AuditEventObjectAccess,
    AuditEventDirectoryServiceAccess
} AUDIT_EVENT_TYPE, *PAUDIT_EVENT_TYPE;
# 3872 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _PRIVILEGE_SET {
    DWORD PrivilegeCount;
    DWORD Control;
    LUID_AND_ATTRIBUTES Privilege[1];
    } PRIVILEGE_SET, * PPRIVILEGE_SET;
# 3927 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef enum _SECURITY_IMPERSONATION_LEVEL {
    SecurityAnonymous,
    SecurityIdentification,
    SecurityImpersonation,
    SecurityDelegation
    } SECURITY_IMPERSONATION_LEVEL, * PSECURITY_IMPERSONATION_LEVEL;
# 3990 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef enum _TOKEN_TYPE {
    TokenPrimary = 1,
    TokenImpersonation
    } TOKEN_TYPE;
typedef TOKEN_TYPE *PTOKEN_TYPE;







typedef enum _TOKEN_INFORMATION_CLASS {
    TokenUser = 1,
    TokenGroups,
    TokenPrivileges,
    TokenOwner,
    TokenPrimaryGroup,
    TokenDefaultDacl,
    TokenSource,
    TokenType,
    TokenImpersonationLevel,
    TokenStatistics,
    TokenRestrictedSids,
    TokenSessionId
} TOKEN_INFORMATION_CLASS, *PTOKEN_INFORMATION_CLASS;






typedef struct _TOKEN_USER {
    SID_AND_ATTRIBUTES User;
} TOKEN_USER, *PTOKEN_USER;

typedef struct _TOKEN_GROUPS {
    DWORD GroupCount;
    SID_AND_ATTRIBUTES Groups[1];
} TOKEN_GROUPS, *PTOKEN_GROUPS;


typedef struct _TOKEN_PRIVILEGES {
    DWORD PrivilegeCount;
    LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;


typedef struct _TOKEN_OWNER {
    PSID Owner;
} TOKEN_OWNER, *PTOKEN_OWNER;


typedef struct _TOKEN_PRIMARY_GROUP {
    PSID PrimaryGroup;
} TOKEN_PRIMARY_GROUP, *PTOKEN_PRIMARY_GROUP;


typedef struct _TOKEN_DEFAULT_DACL {
    PACL DefaultDacl;
} TOKEN_DEFAULT_DACL, *PTOKEN_DEFAULT_DACL;





typedef struct _TOKEN_SOURCE {
    CHAR SourceName[8];
    LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE;


typedef struct _TOKEN_STATISTICS {
    LUID TokenId;
    LUID AuthenticationId;
    LARGE_INTEGER ExpirationTime;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    DWORD DynamicCharged;
    DWORD DynamicAvailable;
    DWORD GroupCount;
    DWORD PrivilegeCount;
    LUID ModifiedId;
} TOKEN_STATISTICS, *PTOKEN_STATISTICS;



typedef struct _TOKEN_CONTROL {
    LUID TokenId;
    LUID AuthenticationId;
    LUID ModifiedId;
    TOKEN_SOURCE TokenSource;
    } TOKEN_CONTROL, *PTOKEN_CONTROL;
# 4091 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,
                    * PSECURITY_CONTEXT_TRACKING_MODE;







typedef struct _SECURITY_QUALITY_OF_SERVICE {
    DWORD Length;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
    BOOLEAN EffectiveOnly;
    } SECURITY_QUALITY_OF_SERVICE, * PSECURITY_QUALITY_OF_SERVICE;






typedef struct _SE_IMPERSONATION_STATE {
    PACCESS_TOKEN Token;
    BOOLEAN CopyOnOpen;
    BOOLEAN EffectiveOnly;
    SECURITY_IMPERSONATION_LEVEL Level;
} SE_IMPERSONATION_STATE, *PSE_IMPERSONATION_STATE;


typedef DWORD SECURITY_INFORMATION, *PSECURITY_INFORMATION;
# 4168 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _NT_TIB {
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;
    union {
        PVOID FiberData;
        DWORD Version;
    };
    PVOID ArbitraryUserPointer;
    struct _NT_TIB *Self;
} NT_TIB;
typedef NT_TIB *PNT_TIB;
# 4191 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _QUOTA_LIMITS {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
} QUOTA_LIMITS;
typedef QUOTA_LIMITS *PQUOTA_LIMITS;



typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
    LARGE_INTEGER TotalUserTime;
    LARGE_INTEGER TotalKernelTime;
    LARGE_INTEGER ThisPeriodTotalUserTime;
    LARGE_INTEGER ThisPeriodTotalKernelTime;
    DWORD TotalPageFaultCount;
    DWORD TotalProcesses;
    DWORD ActiveProcesses;
    DWORD TotalTerminatedProcesses;
} JOBOBJECT_BASIC_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
    LARGE_INTEGER PerProcessUserTimeLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD LimitFlags;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    DWORD ActiveProcessLimit;
    DWORD Affinity;
    DWORD PriorityClass;
    DWORD SchedulingClass;
} JOBOBJECT_BASIC_LIMIT_INFORMATION, *PJOBOBJECT_BASIC_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
    DWORD NumberOfAssignedProcesses;
    DWORD NumberOfProcessIdsInList;
    ULONG_PTR ProcessIdList[1];
} JOBOBJECT_BASIC_PROCESS_ID_LIST, *PJOBOBJECT_BASIC_PROCESS_ID_LIST;

typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
    DWORD UIRestrictionsClass;
} JOBOBJECT_BASIC_UI_RESTRICTIONS, *PJOBOBJECT_BASIC_UI_RESTRICTIONS;

typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
    DWORD SecurityLimitFlags ;
    HANDLE JobToken ;
    PTOKEN_GROUPS SidsToDisable ;
    PTOKEN_PRIVILEGES PrivilegesToDelete ;
    PTOKEN_GROUPS RestrictedSids ;
} JOBOBJECT_SECURITY_LIMIT_INFORMATION, *PJOBOBJECT_SECURITY_LIMIT_INFORMATION ;

typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
    DWORD EndOfJobTimeAction;
} JOBOBJECT_END_OF_JOB_TIME_INFORMATION, *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;

typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
    PVOID CompletionKey;
    HANDLE CompletionPort;
} JOBOBJECT_ASSOCIATE_COMPLETION_PORT, *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;
# 4307 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef enum _JOBOBJECTINFOCLASS {
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation,
    JobObjectBasicProcessIdList,
    JobObjectBasicUIRestrictions,
    JobObjectSecurityLimitInformation,
    JobObjectEndOfJobTimeInformation,
    JobObjectAssociateCompletionPortInformation,
    MaxJobObjectInfoClass
    } JOBOBJECTINFOCLASS;
# 4385 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _MEMORY_BASIC_INFORMATION {
    PVOID BaseAddress;
    PVOID AllocationBase;
    DWORD AllocationProtect;
    SIZE_T RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;

typedef struct _MEMORY_BASIC_INFORMATION_VLM {
    union {
        PVOID64 BaseAddress;
        ULONGLONG BaseAddressAsUlongLong;
    };
    union {
        PVOID64 AllocationBase;
        ULONGLONG AllocationBaseAsUlongLong;
    };
    ULONGLONG RegionSize;
    DWORD AllocationProtect;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION_VLM, *PMEMORY_BASIC_INFORMATION_VLM;
# 4561 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _FILE_NOTIFY_INFORMATION {
    DWORD NextEntryOffset;
    DWORD Action;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NOTIFY_INFORMATION, *PFILE_NOTIFY_INFORMATION;






typedef union _FILE_SEGMENT_ELEMENT {
    PVOID64 Buffer;
    ULONGLONG Alignment;
}FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT;
# 4588 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _REPARSE_DATA_BUFFER {
    DWORD ReparseTag;
    WORD ReparseDataLength;
    WORD Reserved;
    union {
        struct {
            WORD SubstituteNameOffset;
            WORD SubstituteNameLength;
            WORD PrintNameOffset;
            WORD PrintNameLength;
            WCHAR PathBuffer[1];
        } SymbolicLinkReparseBuffer;
        struct {
            WORD SubstituteNameOffset;
            WORD SubstituteNameLength;
            WORD PrintNameOffset;
            WORD PrintNameLength;
            WCHAR PathBuffer[1];
        } MountPointReparseBuffer;
        struct {
            BYTE DataBuffer[1];
        } GenericReparseBuffer;
    };
} REPARSE_DATA_BUFFER, *PREPARSE_DATA_BUFFER;
# 4624 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _REPARSE_GUID_DATA_BUFFER {
    DWORD ReparseTag;
    WORD ReparseDataLength;
    WORD Reserved;
    GUID ReparseGuid;
    struct {
        BYTE DataBuffer[1];
    } GenericReparseBuffer;
} REPARSE_GUID_DATA_BUFFER, *PREPARSE_GUID_DATA_BUFFER;
# 4642 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _REPARSE_POINT_INFORMATION {
    WORD ReparseDataLength;
    WORD UnparsedNameLength;
} REPARSE_POINT_INFORMATION, *PREPARSE_POINT_INFORMATION;
# 4758 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef DWORD EXECUTION_STATE;

typedef enum {
    LT_DONT_CARE,
    LT_LOWEST_LATENCY
} LATENCY_TIME;


typedef struct _POWER_DEVICE_TIMEOUTS {
    DWORD ConservationIdleTime;
    DWORD PerformanceIdleTime;
} POWER_DEVICE_TIMEOUTS, *PPOWER_DEVICE_TIMEOUTS;
# 4780 "/usr/local/arm-wince-pe/include/winnt.h" 3
# 1 "/usr/local/arm-wince-pe/include/pshpack4.h" 1 3
# 30 "/usr/local/arm-wince-pe/include/pshpack4.h" 3
#pragma pack(4)
# 4781 "/usr/local/arm-wince-pe/include/winnt.h" 2 3







# 1 "/usr/local/arm-wince-pe/include/pshpack2.h" 1 3
# 30 "/usr/local/arm-wince-pe/include/pshpack2.h" 3
#pragma pack(2)
# 4789 "/usr/local/arm-wince-pe/include/winnt.h" 2 3
# 4800 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _IMAGE_DOS_HEADER {
    WORD e_magic;
    WORD e_cblp;
    WORD e_cp;
    WORD e_crlc;
    WORD e_cparhdr;
    WORD e_minalloc;
    WORD e_maxalloc;
    WORD e_ss;
    WORD e_sp;
    WORD e_csum;
    WORD e_ip;
    WORD e_cs;
    WORD e_lfarlc;
    WORD e_ovno;
    WORD e_res[4];
    WORD e_oemid;
    WORD e_oeminfo;
    WORD e_res2[10];
    LONG e_lfanew;
  } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

typedef struct _IMAGE_OS2_HEADER {
    WORD ne_magic;
    CHAR ne_ver;
    CHAR ne_rev;
    WORD ne_enttab;
    WORD ne_cbenttab;
    LONG ne_crc;
    WORD ne_flags;
    WORD ne_autodata;
    WORD ne_heap;
    WORD ne_stack;
    LONG ne_csip;
    LONG ne_sssp;
    WORD ne_cseg;
    WORD ne_cmod;
    WORD ne_cbnrestab;
    WORD ne_segtab;
    WORD ne_rsrctab;
    WORD ne_restab;
    WORD ne_modtab;
    WORD ne_imptab;
    LONG ne_nrestab;
    WORD ne_cmovent;
    WORD ne_align;
    WORD ne_cres;
    BYTE ne_exetyp;
    BYTE ne_flagsothers;
    WORD ne_pretthunks;
    WORD ne_psegrefbytes;
    WORD ne_swaparea;
    WORD ne_expver;
  } IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;

typedef struct _IMAGE_VXD_HEADER {
    WORD e32_magic;
    BYTE e32_border;
    BYTE e32_worder;
    DWORD e32_level;
    WORD e32_cpu;
    WORD e32_os;
    DWORD e32_ver;
    DWORD e32_mflags;
    DWORD e32_mpages;
    DWORD e32_startobj;
    DWORD e32_eip;
    DWORD e32_stackobj;
    DWORD e32_esp;
    DWORD e32_pagesize;
    DWORD e32_lastpagesize;
    DWORD e32_fixupsize;
    DWORD e32_fixupsum;
    DWORD e32_ldrsize;
    DWORD e32_ldrsum;
    DWORD e32_objtab;
    DWORD e32_objcnt;
    DWORD e32_objmap;
    DWORD e32_itermap;
    DWORD e32_rsrctab;
    DWORD e32_rsrccnt;
    DWORD e32_restab;
    DWORD e32_enttab;
    DWORD e32_dirtab;
    DWORD e32_dircnt;
    DWORD e32_fpagetab;
    DWORD e32_frectab;
    DWORD e32_impmod;
    DWORD e32_impmodcnt;
    DWORD e32_impproc;
    DWORD e32_pagesum;
    DWORD e32_datapage;
    DWORD e32_preload;
    DWORD e32_nrestab;
    DWORD e32_cbnrestab;
    DWORD e32_nressum;
    DWORD e32_autodata;
    DWORD e32_debuginfo;
    DWORD e32_debuglen;
    DWORD e32_instpreload;
    DWORD e32_instdemand;
    DWORD e32_heapsize;
    BYTE e32_res3[12];
    DWORD e32_winresoff;
    DWORD e32_winreslen;
    WORD e32_devid;
    WORD e32_ddkver;
  } IMAGE_VXD_HEADER, *PIMAGE_VXD_HEADER;


# 1 "/usr/local/arm-wince-pe/include/poppack.h" 1 3
# 34 "/usr/local/arm-wince-pe/include/poppack.h" 3
#pragma pack()
# 4911 "/usr/local/arm-wince-pe/include/winnt.h" 2 3






typedef struct _IMAGE_FILE_HEADER {
    WORD Machine;
    WORD NumberOfSections;
    DWORD TimeDateStamp;
    DWORD PointerToSymbolTable;
    DWORD NumberOfSymbols;
    WORD SizeOfOptionalHeader;
    WORD Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;
# 4970 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _IMAGE_DATA_DIRECTORY {
    DWORD VirtualAddress;
    DWORD Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;







typedef struct _IMAGE_OPTIONAL_HEADER {




    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;





    DWORD ImageBase;
    DWORD SectionAlignment;
    DWORD FileAlignment;
    WORD MajorOperatingSystemVersion;
    WORD MinorOperatingSystemVersion;
    WORD MajorImageVersion;
    WORD MinorImageVersion;
    WORD MajorSubsystemVersion;
    WORD MinorSubsystemVersion;
    DWORD Win32VersionValue;
    DWORD SizeOfImage;
    DWORD SizeOfHeaders;
    DWORD CheckSum;
    WORD Subsystem;
    WORD DllCharacteristics;
    DWORD SizeOfStackReserve;
    DWORD SizeOfStackCommit;
    DWORD SizeOfHeapReserve;
    DWORD SizeOfHeapCommit;
    DWORD LoaderFlags;
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;

typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    DWORD BaseOfData;
    DWORD BaseOfBss;
    DWORD GprMask;
    DWORD CprMask[4];
    DWORD GpValue;
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER;

typedef struct _IMAGE_OPTIONAL_HEADER64 {
    WORD Magic;
    BYTE MajorLinkerVersion;
    BYTE MinorLinkerVersion;
    DWORD SizeOfCode;
    DWORD SizeOfInitializedData;
    DWORD SizeOfUninitializedData;
    DWORD AddressOfEntryPoint;
    DWORD BaseOfCode;
    ULONGLONG ImageBase;
    DWORD SectionAlignment;
    DWORD FileAlignment;
    WORD MajorOperatingSystemVersion;
    WORD MinorOperatingSystemVersion;
    WORD MajorImageVersion;
    WORD MinorImageVersion;
    WORD MajorSubsystemVersion;
    WORD MinorSubsystemVersion;
    DWORD Win32VersionValue;
    DWORD SizeOfImage;
    DWORD SizeOfHeaders;
    DWORD CheckSum;
    WORD Subsystem;
    WORD DllCharacteristics;
    ULONGLONG SizeOfStackReserve;
    ULONGLONG SizeOfStackCommit;
    ULONGLONG SizeOfHeapReserve;
    ULONGLONG SizeOfHeapCommit;
    DWORD LoaderFlags;
    DWORD NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;
# 5088 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef IMAGE_OPTIONAL_HEADER32 IMAGE_OPTIONAL_HEADER;
typedef PIMAGE_OPTIONAL_HEADER32 PIMAGE_OPTIONAL_HEADER;




typedef struct _IMAGE_NT_HEADERS64 {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER64 OptionalHeader;
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;

typedef struct _IMAGE_NT_HEADERS {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER32 OptionalHeader;
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;

typedef struct _IMAGE_ROM_HEADERS {
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
} IMAGE_ROM_HEADERS, *PIMAGE_ROM_HEADERS;
# 5128 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef IMAGE_NT_HEADERS32 IMAGE_NT_HEADERS;
typedef PIMAGE_NT_HEADERS32 PIMAGE_NT_HEADERS;
# 5178 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _IMAGE_SECTION_HEADER {
    BYTE Name[8];
    union {
            DWORD PhysicalAddress;
            DWORD VirtualSize;
    } Misc;
    DWORD VirtualAddress;
    DWORD SizeOfRawData;
    DWORD PointerToRawData;
    DWORD PointerToRelocations;
    DWORD PointerToLinenumbers;
    WORD NumberOfRelocations;
    WORD NumberOfLinenumbers;
    DWORD Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;
# 5257 "/usr/local/arm-wince-pe/include/winnt.h" 3
# 1 "/usr/local/arm-wince-pe/include/pshpack2.h" 1 3
# 30 "/usr/local/arm-wince-pe/include/pshpack2.h" 3
#pragma pack(2)
# 5258 "/usr/local/arm-wince-pe/include/winnt.h" 2 3






typedef struct _IMAGE_SYMBOL {
    union {
        BYTE ShortName[8];
        struct {
            DWORD Short;
            DWORD Long;
        } Name;
        PBYTE LongName[2];
    } N;
    DWORD Value;
    SHORT SectionNumber;
    WORD Type;
    BYTE StorageClass;
    BYTE NumberOfAuxSymbols;
} IMAGE_SYMBOL;
typedef IMAGE_SYMBOL __unaligned *PIMAGE_SYMBOL;
# 5404 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef union _IMAGE_AUX_SYMBOL {
    struct {
        DWORD TagIndex;
        union {
            struct {
                WORD Linenumber;
                WORD Size;
            } LnSz;
           DWORD TotalSize;
        } Misc;
        union {
            struct {
                DWORD PointerToLinenumber;
                DWORD PointerToNextFunction;
            } Function;
            struct {
                WORD Dimension[4];
            } Array;
        } FcnAry;
        WORD TvIndex;
    } Sym;
    struct {
        BYTE Name[18];
    } File;
    struct {
        DWORD Length;
        WORD NumberOfRelocations;
        WORD NumberOfLinenumbers;
        DWORD CheckSum;
        SHORT Number;
        BYTE Selection;
    } Section;
} IMAGE_AUX_SYMBOL;
typedef IMAGE_AUX_SYMBOL __unaligned *PIMAGE_AUX_SYMBOL;
# 5461 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _IMAGE_RELOCATION {
    union {
        DWORD VirtualAddress;
        DWORD RelocCount;
    };
    DWORD SymbolTableIndex;
    WORD Type;
} IMAGE_RELOCATION;
typedef IMAGE_RELOCATION __unaligned *PIMAGE_RELOCATION;
# 5682 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _IMAGE_LINENUMBER {
    union {
        DWORD SymbolTableIndex;
        DWORD VirtualAddress;
    } Type;
    WORD Linenumber;
} IMAGE_LINENUMBER;
typedef IMAGE_LINENUMBER __unaligned *PIMAGE_LINENUMBER;




# 1 "/usr/local/arm-wince-pe/include/poppack.h" 1 3
# 34 "/usr/local/arm-wince-pe/include/poppack.h" 3
#pragma pack()
# 5695 "/usr/local/arm-wince-pe/include/winnt.h" 2 3






typedef struct _IMAGE_BASE_RELOCATION {
    DWORD VirtualAddress;
    DWORD SizeOfBlock;

} IMAGE_BASE_RELOCATION;
typedef IMAGE_BASE_RELOCATION __unaligned * PIMAGE_BASE_RELOCATION;
# 5740 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
    BYTE Name[16];
    BYTE Date[12];
    BYTE UserID[6];
    BYTE GroupID[6];
    BYTE Mode[8];
    BYTE Size[10];
    BYTE EndHeader[2];
} IMAGE_ARCHIVE_MEMBER_HEADER, *PIMAGE_ARCHIVE_MEMBER_HEADER;
# 5760 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _IMAGE_EXPORT_DIRECTORY {
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD Name;
    DWORD Base;
    DWORD NumberOfFunctions;
    DWORD NumberOfNames;
    DWORD AddressOfFunctions;
    DWORD AddressOfNames;
    DWORD AddressOfNameOrdinals;
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;





typedef struct _IMAGE_IMPORT_BY_NAME {
    WORD Hint;
    BYTE Name[1];
} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;

# 1 "/usr/local/arm-wince-pe/include/pshpack8.h" 1 3
# 30 "/usr/local/arm-wince-pe/include/pshpack8.h" 3
#pragma pack(8)
# 5784 "/usr/local/arm-wince-pe/include/winnt.h" 2 3

typedef struct _IMAGE_THUNK_DATA64 {
    union {
        PBYTE ForwarderString;
        PDWORD Function;
        ULONGLONG Ordinal;
        PIMAGE_IMPORT_BY_NAME AddressOfData;
    } u1;
} IMAGE_THUNK_DATA64;
typedef IMAGE_THUNK_DATA64 * PIMAGE_THUNK_DATA64;

# 1 "/usr/local/arm-wince-pe/include/poppack.h" 1 3
# 34 "/usr/local/arm-wince-pe/include/poppack.h" 3
#pragma pack()
# 5796 "/usr/local/arm-wince-pe/include/winnt.h" 2 3

typedef struct _IMAGE_THUNK_DATA32 {
    union {
        PBYTE ForwarderString;
        PDWORD Function;
        DWORD Ordinal;
        PIMAGE_IMPORT_BY_NAME AddressOfData;
    } u1;
} IMAGE_THUNK_DATA32;
typedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;
# 5818 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef void
( *PIMAGE_TLS_CALLBACK) (
    PVOID DllHandle,
    DWORD Reason,
    PVOID Reserved
    );

typedef struct _IMAGE_TLS_DIRECTORY64 {
    ULONGLONG StartAddressOfRawData;
    ULONGLONG EndAddressOfRawData;
    PDWORD AddressOfIndex;
    PIMAGE_TLS_CALLBACK *AddressOfCallBacks;
    DWORD SizeOfZeroFill;
    DWORD Characteristics;
} IMAGE_TLS_DIRECTORY64;
typedef IMAGE_TLS_DIRECTORY64 * PIMAGE_TLS_DIRECTORY64;

typedef struct _IMAGE_TLS_DIRECTORY32 {
    DWORD StartAddressOfRawData;
    DWORD EndAddressOfRawData;
    PDWORD AddressOfIndex;
    PIMAGE_TLS_CALLBACK *AddressOfCallBacks;
    DWORD SizeOfZeroFill;
    DWORD Characteristics;
} IMAGE_TLS_DIRECTORY32;
typedef IMAGE_TLS_DIRECTORY32 * PIMAGE_TLS_DIRECTORY32;
# 5856 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef IMAGE_THUNK_DATA32 IMAGE_THUNK_DATA;
typedef PIMAGE_THUNK_DATA32 PIMAGE_THUNK_DATA;

typedef IMAGE_TLS_DIRECTORY32 IMAGE_TLS_DIRECTORY;
typedef PIMAGE_TLS_DIRECTORY32 PIMAGE_TLS_DIRECTORY;


typedef struct _IMAGE_IMPORT_DESCRIPTOR {
    union {
        DWORD Characteristics;
        DWORD OriginalFirstThunk;
    };
    DWORD TimeDateStamp;




    DWORD ForwarderChain;
    DWORD Name;
    DWORD FirstThunk;
} IMAGE_IMPORT_DESCRIPTOR;
typedef IMAGE_IMPORT_DESCRIPTOR __unaligned *PIMAGE_IMPORT_DESCRIPTOR;





typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
    DWORD TimeDateStamp;
    WORD OffsetModuleName;
    WORD NumberOfModuleForwarderRefs;

} IMAGE_BOUND_IMPORT_DESCRIPTOR, *PIMAGE_BOUND_IMPORT_DESCRIPTOR;

typedef struct _IMAGE_BOUND_FORWARDER_REF {
    DWORD TimeDateStamp;
    WORD OffsetModuleName;
    WORD Reserved;
} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;






typedef struct _IMAGE_STUB_DIRECTORY {
    DWORD SecondaryImportAddressTable;
    WORD ExpectedISA[2];
    DWORD StubAddressTable[2];
} IMAGE_STUB_DIRECTORY, *PIMAGE_STUB_DIRECTORY;
# 5929 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _IMAGE_RESOURCE_DIRECTORY {
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    WORD NumberOfNamedEntries;
    WORD NumberOfIdEntries;

} IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;
# 5956 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
    union {
        struct {
            DWORD NameOffset:31;
            DWORD NameIsString:1;
        };
        DWORD Name;
        WORD Id;
    };
    union {
        DWORD OffsetToData;
        struct {
            DWORD OffsetToDirectory:31;
            DWORD DataIsDirectory:1;
        };
    };
} IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;
# 5983 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
    WORD Length;
    CHAR NameString[ 1 ];
} IMAGE_RESOURCE_DIRECTORY_STRING, *PIMAGE_RESOURCE_DIRECTORY_STRING;


typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
    WORD Length;
    WCHAR NameString[ 1 ];
} IMAGE_RESOURCE_DIR_STRING_U, *PIMAGE_RESOURCE_DIR_STRING_U;
# 6004 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
    DWORD OffsetToData;
    DWORD Size;
    DWORD CodePage;
    DWORD Reserved;
} IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;





typedef struct {
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD GlobalFlagsClear;
    DWORD GlobalFlagsSet;
    DWORD CriticalSectionDefaultTimeout;
    DWORD DeCommitFreeBlockThreshold;
    DWORD DeCommitTotalFreeThreshold;
    DWORD LockPrefixTable;
    DWORD MaximumAllocationSize;
    DWORD VirtualMemoryThreshold;
    DWORD ProcessHeapFlags;
    DWORD ProcessAffinityMask;
    WORD CSDVersion;
    WORD Reserved1;
    DWORD EditList;
    DWORD Reserved[ 1 ];
} IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32;

typedef struct {
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD GlobalFlagsClear;
    DWORD GlobalFlagsSet;
    DWORD CriticalSectionDefaultTimeout;
    DWORD DeCommitFreeBlockThreshold;
    DWORD DeCommitTotalFreeThreshold;
    ULONGLONG LockPrefixTable;
    DWORD MaximumAllocationSize;
    DWORD VirtualMemoryThreshold;
    DWORD ProcessHeapFlags;
    DWORD ProcessAffinityMask;
    WORD CSDVersion;
    WORD Reserved1;
    ULONGLONG EditList;
    DWORD Reserved[ 1 ];
} IMAGE_LOAD_CONFIG_DIRECTORY64, *PIMAGE_LOAD_CONFIG_DIRECTORY64;





typedef IMAGE_LOAD_CONFIG_DIRECTORY32 IMAGE_LOAD_CONFIG_DIRECTORY;
typedef PIMAGE_LOAD_CONFIG_DIRECTORY32 PIMAGE_LOAD_CONFIG_DIRECTORY;
# 6072 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _IMAGE_IA64_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD UnwindInfoAddress;
} IMAGE_IA64_RUNTIME_FUNCTION_ENTRY, *PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
# 6085 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD ExceptionHandler;
    DWORD HandlerData;
    DWORD PrologEndAddress;
} IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
    ULONGLONG BeginAddress;
    ULONGLONG EndAddress;
    ULONGLONG ExceptionHandler;
    ULONGLONG HandlerData;
    ULONGLONG PrologEndAddress;
} IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;

typedef IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY IMAGE_AXP64_RUNTIME_FUNCTION_ENTRY;
typedef PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY PIMAGE_AXP64_RUNTIME_FUNCTION_ENTRY;





typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
    DWORD FuncStart;
    DWORD PrologLen : 8;
    DWORD FuncLen : 22;
    DWORD ThirtyTwoBit : 1;
    DWORD ExceptionFlag : 1;
} IMAGE_CE_RUNTIME_FUNCTION_ENTRY, * PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;
# 6123 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;







typedef struct _IMAGE_DEBUG_DIRECTORY {
    DWORD Characteristics;
    DWORD TimeDateStamp;
    WORD MajorVersion;
    WORD MinorVersion;
    DWORD Type;
    DWORD SizeOfData;
    DWORD AddressOfRawData;
    DWORD PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;
# 6156 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
    DWORD NumberOfSymbols;
    DWORD LvaToFirstSymbol;
    DWORD NumberOfLinenumbers;
    DWORD LvaToFirstLinenumber;
    DWORD RvaToFirstByteOfCode;
    DWORD RvaToLastByteOfCode;
    DWORD RvaToFirstByteOfData;
    DWORD RvaToLastByteOfData;
} IMAGE_COFF_SYMBOLS_HEADER, *PIMAGE_COFF_SYMBOLS_HEADER;






typedef struct _FPO_DATA {
    DWORD ulOffStart;
    DWORD cbProcSize;
    DWORD cdwLocals;
    WORD cdwParams;
    WORD cbProlog : 8;
    WORD cbRegs : 3;
    WORD fHasSEH : 1;
    WORD fUseBP : 1;
    WORD reserved : 1;
    WORD cbFrame : 2;
} FPO_DATA, *PFPO_DATA;





typedef struct _IMAGE_DEBUG_MISC {
    DWORD DataType;
    DWORD Length;

    BOOLEAN Unicode;
    BYTE Reserved[ 3 ];
    BYTE Data[ 1 ];
} IMAGE_DEBUG_MISC, *PIMAGE_DEBUG_MISC;
# 6205 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _IMAGE_FUNCTION_ENTRY {
    DWORD StartingAddress;
    DWORD EndingAddress;
    DWORD EndOfPrologue;
} IMAGE_FUNCTION_ENTRY, *PIMAGE_FUNCTION_ENTRY;

typedef struct _IMAGE_FUNCTION_ENTRY64 {
    ULONGLONG StartingAddress;
    ULONGLONG EndingAddress;
    ULONGLONG EndOfPrologue;
} IMAGE_FUNCTION_ENTRY64, *PIMAGE_FUNCTION_ENTRY64;
# 6237 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
    WORD Signature;
    WORD Flags;
    WORD Machine;
    WORD Characteristics;
    DWORD TimeDateStamp;
    DWORD CheckSum;
    DWORD ImageBase;
    DWORD SizeOfImage;
    DWORD NumberOfSections;
    DWORD ExportedNamesSize;
    DWORD DebugDirectorySize;
    DWORD SectionAlignment;
    DWORD Reserved[2];
} IMAGE_SEPARATE_DEBUG_HEADER, *PIMAGE_SEPARATE_DEBUG_HEADER;
# 6271 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _ImageArchitectureHeader {
    unsigned int AmaskValue: 1;

    int :7;
    unsigned int AmaskShift: 8;
    int :16;
    DWORD FirstEntryRVA;
} IMAGE_ARCHITECTURE_HEADER, *PIMAGE_ARCHITECTURE_HEADER;

typedef struct _ImageArchitectureEntry {
    DWORD FixupInstRVA;
    DWORD NewInst;
} IMAGE_ARCHITECTURE_ENTRY, *PIMAGE_ARCHITECTURE_ENTRY;

# 1 "/usr/local/arm-wince-pe/include/poppack.h" 1 3
# 34 "/usr/local/arm-wince-pe/include/poppack.h" 3
#pragma pack()
# 6286 "/usr/local/arm-wince-pe/include/winnt.h" 2 3
# 6294 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct IMPORT_OBJECT_HEADER {
    WORD Sig1;
    WORD Sig2;
    WORD Version;
    WORD Machine;
    DWORD TimeDateStamp;
    DWORD SizeOfData;

    union {
        WORD Ordinal;
        WORD Hint;
    };

    WORD Type : 2;
    WORD NameType : 3;
    WORD Reserved : 11;
} IMPORT_OBJECT_HEADER;

typedef enum IMPORT_OBJECT_TYPE
{
    IMPORT_OBJECT_CODE = 0,
    IMPORT_OBJECT_DATA = 1,
    IMPORT_OBJECT_CONST = 2,
} IMPORT_OBJECT_TYPE;

typedef enum IMPORT_OBJECT_NAME_TYPE
{
    IMPORT_OBJECT_ORDINAL = 0,
    IMPORT_OBJECT_NAME = 1,
    IMPORT_OBJECT_NAME_NO_PREFIX = 2,
    IMPORT_OBJECT_NAME_UNDECORATE = 3,

} IMPORT_OBJECT_NAME_TYPE;
# 6340 "/usr/local/arm-wince-pe/include/winnt.h" 3
# 1 "/usr/local/arm-wince-pe/include/string.h" 1 3
# 14 "/usr/local/arm-wince-pe/include/string.h" 3
# 1 "/usr/local/lib/gcc-lib/arm-wince-pe/3.3.3/include/stddef.h" 1 3 4
# 15 "/usr/local/arm-wince-pe/include/string.h" 2 3







void * memchr (const void *, int, size_t);
int memcmp (const void *, const void *, size_t);
void * memcpy (void *, const void *, size_t);
void * memmove (void *, const void *, size_t);
void * memset (void *, int, size_t);
char *strcat (char *, const char *);
char *strchr (const char *, int);
int strcmp (const char *, const char *);
int strcoll (const char *, const char *);
char *strcpy (char *, const char *);
size_t strcspn (const char *, const char *);
char *strerror (int);
size_t strlen (const char *);
char *strncat (char *, const char *, size_t);
int strncmp (const char *, const char *, size_t);
char *strncpy (char *, const char *, size_t);
char *strpbrk (const char *, const char *);
char *strrchr (const char *, int);
size_t strspn (const char *, const char *);
char *strstr (const char *, const char *);


char *strtok (char *, const char *);


size_t strxfrm (char *, const char *, size_t);


char *strtok_r (char *, const char *, char **);

int bcmp (const void *, const void *, size_t);
void bcopy (const void *, void *, size_t);
void bzero (void *, size_t);
int ffs (int);
char *index (const char *, int);
void * memccpy (void *, const void *, int, size_t);
void * mempcpy (void *, const void *, size_t);
char *rindex (const char *, int);
int strcasecmp (const char *, const char *);
char *strdup (const char *);
char *_strdup_r (struct _reent *, const char *);
char *strndup (const char *, size_t);
char *_strndup_r (struct _reent *, const char *, size_t);
char *strerror_r (int, char *, size_t);
size_t strlcat (char *, const char *, size_t);
size_t strlcpy (char *, const char *, size_t);
int strncasecmp (const char *, const char *, size_t);
size_t strnlen (const char *, size_t);
char *strsep (char **, const char *);
char *strlwr (char *);
char *strupr (char *);
# 98 "/usr/local/arm-wince-pe/include/string.h" 3

# 6341 "/usr/local/arm-wince-pe/include/winnt.h" 2 3
# 6386 "/usr/local/arm-wince-pe/include/winnt.h" 3

SIZE_T

RtlCompareMemory (
    const void *Source1,
    const void *Source2,
    SIZE_T Length
    );
# 6488 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _MESSAGE_RESOURCE_ENTRY {
    WORD Length;
    WORD Flags;
    BYTE Text[ 1 ];
} MESSAGE_RESOURCE_ENTRY, *PMESSAGE_RESOURCE_ENTRY;



typedef struct _MESSAGE_RESOURCE_BLOCK {
    DWORD LowId;
    DWORD HighId;
    DWORD OffsetToEntries;
} MESSAGE_RESOURCE_BLOCK, *PMESSAGE_RESOURCE_BLOCK;

typedef struct _MESSAGE_RESOURCE_DATA {
    DWORD NumberOfBlocks;
    MESSAGE_RESOURCE_BLOCK Blocks[ 1 ];
} MESSAGE_RESOURCE_DATA, *PMESSAGE_RESOURCE_DATA;


typedef struct _RTL_CRITICAL_SECTION_DEBUG {
    WORD Type;
    WORD CreatorBackTraceIndex;
    struct _RTL_CRITICAL_SECTION *CriticalSection;
    LIST_ENTRY ProcessLocksList;
    DWORD EntryCount;
    DWORD ContentionCount;
    DWORD Spare[ 2 ];
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG, RTL_RESOURCE_DEBUG, *PRTL_RESOURCE_DEBUG;




typedef struct _RTL_CRITICAL_SECTION {
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;






    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread;
    HANDLE LockSemaphore;
    DWORD SpinCount;
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;
# 6545 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef void ( * WAITORTIMERCALLBACKFUNC) (PVOID, BOOLEAN );
typedef void ( * WORKERCALLBACKFUNC) (PVOID );
# 6593 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _EVENTLOGRECORD {
    DWORD Length;
    DWORD Reserved;
    DWORD RecordNumber;
    DWORD TimeGenerated;
    DWORD TimeWritten;
    DWORD EventID;
    WORD EventType;
    WORD NumStrings;
    WORD EventCategory;
    WORD ReservedFlags;
    DWORD ClosingRecordNumber;
    DWORD StringOffset;
    DWORD UserSidLength;
    DWORD UserSidOffset;
    DWORD DataLength;
    DWORD DataOffset;
# 6621 "/usr/local/arm-wince-pe/include/winnt.h" 3
} EVENTLOGRECORD, *PEVENTLOGRECORD;





#pragma warning(disable : 4200)
typedef struct _EVENTSFORLOGFILE{
        DWORD ulSize;
    WCHAR szLogicalLogFile[256];
    DWORD ulNumRecords;
        EVENTLOGRECORD pEventLogRecords[];
}EVENTSFORLOGFILE, *PEVENTSFORLOGFILE;

typedef struct _PACKEDEVENTINFO{
    DWORD ulSize;
    DWORD ulNumEventsForLogFile;
    DWORD ulOffsets[];
}PACKEDEVENTINFO, *PPACKEDEVENTINFO;

#pragma warning(default : 4200)
# 6820 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef enum _CM_SERVICE_NODE_TYPE {
    DriverType = 0x00000001,
    FileSystemType = 0x00000002,
    Win32ServiceOwnProcess = 0x00000010,
    Win32ServiceShareProcess = 0x00000020,
    AdapterType = 0x00000004,
    RecognizerType = 0x00000008
} SERVICE_NODE_TYPE;

typedef enum _CM_SERVICE_LOAD_TYPE {
    BootLoad = 0x00000000,
    SystemLoad = 0x00000001,
    AutoLoad = 0x00000002,
    DemandLoad = 0x00000003,
    DisableLoad = 0x00000004
} SERVICE_LOAD_TYPE;

typedef enum _CM_ERROR_CONTROL_TYPE {
    IgnoreError = 0x00000000,
    NormalError = 0x00000001,
    SevereError = 0x00000002,
    CriticalError = 0x00000003
} SERVICE_ERROR_TYPE;
# 6853 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _TAPE_ERASE {
    DWORD Type;
    BOOLEAN Immediate;
} TAPE_ERASE, *PTAPE_ERASE;
# 6869 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _TAPE_PREPARE {
    DWORD Operation;
    BOOLEAN Immediate;
} TAPE_PREPARE, *PTAPE_PREPARE;
# 6883 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _TAPE_WRITE_MARKS {
    DWORD Type;
    DWORD Count;
    BOOLEAN Immediate;
} TAPE_WRITE_MARKS, *PTAPE_WRITE_MARKS;
# 6897 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _TAPE_GET_POSITION {
    DWORD Type;
    DWORD Partition;
    LARGE_INTEGER Offset;
} TAPE_GET_POSITION, *PTAPE_GET_POSITION;
# 6918 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _TAPE_SET_POSITION {
    DWORD Method;
    DWORD Partition;
    LARGE_INTEGER Offset;
    BOOLEAN Immediate;
} TAPE_SET_POSITION, *PTAPE_SET_POSITION;
# 7011 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _TAPE_GET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD DefaultBlockSize;
    DWORD MaximumBlockSize;
    DWORD MinimumBlockSize;
    DWORD MaximumPartitionCount;
    DWORD FeaturesLow;
    DWORD FeaturesHigh;
    DWORD EOTWarningZoneSize;
} TAPE_GET_DRIVE_PARAMETERS, *PTAPE_GET_DRIVE_PARAMETERS;





typedef struct _TAPE_SET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD EOTWarningZoneSize;
} TAPE_SET_DRIVE_PARAMETERS, *PTAPE_SET_DRIVE_PARAMETERS;





typedef struct _TAPE_GET_MEDIA_PARAMETERS {
    LARGE_INTEGER Capacity;
    LARGE_INTEGER Remaining;
    DWORD BlockSize;
    DWORD PartitionCount;
    BOOLEAN WriteProtected;
} TAPE_GET_MEDIA_PARAMETERS, *PTAPE_GET_MEDIA_PARAMETERS;





typedef struct _TAPE_SET_MEDIA_PARAMETERS {
    DWORD BlockSize;
} TAPE_SET_MEDIA_PARAMETERS, *PTAPE_SET_MEDIA_PARAMETERS;
# 7065 "/usr/local/arm-wince-pe/include/winnt.h" 3
typedef struct _TAPE_CREATE_PARTITION {
    DWORD Method;
    DWORD Count;
    DWORD Size;
} TAPE_CREATE_PARTITION, *PTAPE_CREATE_PARTITION;
# 173 "/usr/local/arm-wince-pe/include/windef.h" 2 3



typedef UINT_PTR WPARAM;
typedef LONG_PTR LPARAM;
typedef LONG_PTR LRESULT;
# 201 "/usr/local/arm-wince-pe/include/windef.h" 3
struct HWND__ { int unused; }; typedef struct HWND__ *HWND;
struct HHOOK__ { int unused; }; typedef struct HHOOK__ *HHOOK;





typedef WORD ATOM;

typedef HANDLE *SPHANDLE;
typedef HANDLE *LPHANDLE;
typedef HANDLE HGLOBAL;
typedef HANDLE HLOCAL;
typedef HANDLE GLOBALHANDLE;
typedef HANDLE LOCALHANDLE;






typedef int ( *FARPROC)();
typedef int ( *NEARPROC)();
typedef int ( *PROC)();
# 234 "/usr/local/arm-wince-pe/include/windef.h" 3
typedef void * HGDIOBJ;





struct HKEY__ { int unused; }; typedef struct HKEY__ *HKEY;
typedef HKEY *PHKEY;


struct HACCEL__ { int unused; }; typedef struct HACCEL__ *HACCEL;


struct HBITMAP__ { int unused; }; typedef struct HBITMAP__ *HBITMAP;
struct HBRUSH__ { int unused; }; typedef struct HBRUSH__ *HBRUSH;


struct HCOLORSPACE__ { int unused; }; typedef struct HCOLORSPACE__ *HCOLORSPACE;


struct HDC__ { int unused; }; typedef struct HDC__ *HDC;

struct HGLRC__ { int unused; }; typedef struct HGLRC__ *HGLRC;
struct HDESK__ { int unused; }; typedef struct HDESK__ *HDESK;
struct HENHMETAFILE__ { int unused; }; typedef struct HENHMETAFILE__ *HENHMETAFILE;

struct HFONT__ { int unused; }; typedef struct HFONT__ *HFONT;

struct HICON__ { int unused; }; typedef struct HICON__ *HICON;

struct HMENU__ { int unused; }; typedef struct HMENU__ *HMENU;

struct HMETAFILE__ { int unused; }; typedef struct HMETAFILE__ *HMETAFILE;
struct HINSTANCE__ { int unused; }; typedef struct HINSTANCE__ *HINSTANCE;
typedef HINSTANCE HMODULE;

struct HPALETTE__ { int unused; }; typedef struct HPALETTE__ *HPALETTE;
struct HPEN__ { int unused; }; typedef struct HPEN__ *HPEN;

struct HRGN__ { int unused; }; typedef struct HRGN__ *HRGN;
struct HRSRC__ { int unused; }; typedef struct HRSRC__ *HRSRC;
struct HSTR__ { int unused; }; typedef struct HSTR__ *HSTR;
struct HTASK__ { int unused; }; typedef struct HTASK__ *HTASK;
struct HWINSTA__ { int unused; }; typedef struct HWINSTA__ *HWINSTA;
struct HKL__ { int unused; }; typedef struct HKL__ *HKL;



struct HMONITOR__ { int unused; }; typedef struct HMONITOR__ *HMONITOR;
struct HWINEVENTHOOK__ { int unused; }; typedef struct HWINEVENTHOOK__ *HWINEVENTHOOK;




typedef int HFILE;
typedef HICON HCURSOR;





typedef DWORD COLORREF;
typedef DWORD *LPCOLORREF;



typedef struct tagRECT
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
} RECT, *PRECT, *NPRECT, *LPRECT;

typedef const RECT * LPCRECT;

typedef struct _RECTL
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
} RECTL, *PRECTL, *LPRECTL;

typedef const RECTL * LPCRECTL;

typedef struct tagPOINT
{
    LONG x;
    LONG y;
} POINT, *PPOINT, *NPPOINT, *LPPOINT;

typedef struct _POINTL
{
    LONG x;
    LONG y;
} POINTL, *PPOINTL;

typedef struct tagSIZE
{
    LONG cx;
    LONG cy;
} SIZE, *PSIZE, *LPSIZE;

typedef SIZE SIZEL;
typedef SIZE *PSIZEL, *LPSIZEL;

typedef struct tagPOINTS
{

    SHORT x;
    SHORT y;




} POINTS, *PPOINTS, *LPPOINTS;
# 19 "/usr/local/arm-wince-pe/include/windows.h" 2 3
# 1 "types.h" 1 3




typedef unsigned char uint8;
typedef unsigned short int uint16;
typedef unsigned long int uint32;

typedef signed char int8;
typedef signed short int int16;
typedef signed long int int32;
# 20 "/usr/local/arm-wince-pe/include/windows.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/winbase.h" 1 3
# 20 "/usr/local/arm-wince-pe/include/winbase.h" 3
# 1 "/usr/local/arm-wince-pe/include/wchar.h" 1 3
# 9 "/usr/local/arm-wince-pe/include/wchar.h" 3
# 1 "/usr/local/lib/gcc-lib/arm-wince-pe/3.3.3/include/stddef.h" 1 3 4
# 10 "/usr/local/arm-wince-pe/include/wchar.h" 2 3
# 34 "/usr/local/arm-wince-pe/include/wchar.h" 3




typedef _mbstate_t mbstate_t;


wint_t btowc (int);
int wctob (wint_t);
size_t mbrlen (const char * , size_t, mbstate_t *);
size_t mbrtowc (wchar_t * , const char * , size_t, mbstate_t *);
int mbsinit (const mbstate_t *);
size_t mbsrtowcs (wchar_t * , const char ** , size_t, mbstate_t *);
size_t wcrtomb (char * , wchar_t, mbstate_t *);
size_t wcsrtombs (char * , const wchar_t ** , size_t, mbstate_t *);
wchar_t *wcscat (wchar_t * , const wchar_t *);
wchar_t *wcschr (const wchar_t *, wchar_t);
int wcscmp (const wchar_t *, const wchar_t *);
wchar_t *wcscpy (wchar_t * , const wchar_t *);
size_t wcscspn (const wchar_t *, const wchar_t *);
size_t wcslcat (wchar_t *, const wchar_t *, size_t);
size_t wcslcpy (wchar_t *, const wchar_t *, size_t);
size_t wcslen (const wchar_t *);
wchar_t *wcsncat (wchar_t * , const wchar_t * , size_t);
int wcsncmp (const wchar_t *, const wchar_t *, size_t);
wchar_t *wcsncpy (wchar_t * , const wchar_t * , size_t);
wchar_t *wcspbrk (const wchar_t *, const wchar_t *);
wchar_t *wcsrchr (const wchar_t *, wchar_t);
size_t wcsspn (const wchar_t *, const wchar_t *);
wchar_t *wcsstr (const wchar_t *, const wchar_t *);
wchar_t *wmemchr (const wchar_t *, wchar_t, size_t);
int wmemcmp (const wchar_t *, const wchar_t *, size_t);
wchar_t *wmemcpy (wchar_t * , const wchar_t * , size_t);
wchar_t *wmemmove (wchar_t *, const wchar_t *, size_t);
wchar_t *wmemset (wchar_t *, wchar_t, size_t);


# 21 "/usr/local/arm-wince-pe/include/winbase.h" 2 3
# 132 "/usr/local/arm-wince-pe/include/winbase.h" 3
typedef struct tagVS_FIXEDFILEINFO {
    DWORD dwSignature;
    DWORD dwStrucVersion;
    DWORD dwFileVersionMS;
    DWORD dwFileVersionLS;
    DWORD dwProductVersionMS;
    DWORD dwProductVersionLS;
    DWORD dwFileFlagsMask;
    DWORD dwFileFlags;
    DWORD dwFileOS;
    DWORD dwFileType;
    DWORD dwFileSubtype;
    DWORD dwFileDateMS;
    DWORD dwFileDateLS;
} VS_FIXEDFILEINFO;
# 159 "/usr/local/arm-wince-pe/include/winbase.h" 3
typedef struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
} FILETIME, *PFILETIME, *LPFILETIME;

typedef struct _SYSTEMTIME {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
} SYSTEMTIME, *LPSYSTEMTIME;
# 333 "/usr/local/arm-wince-pe/include/winbase.h" 3
LONG

InterlockedIncrement(
    LPLONG lpAddend
    );


LONG

InterlockedDecrement(
    LPLONG lpAddend
    );


LONG

InterlockedExchange(
    LPLONG Target,
    LONG Value
    );

LONG

InterlockedTestExchange(
        LPLONG Target,
        LONG oldValue,
        LONG newValue
        );






DWORD

Random();


int

WinMain(
    HINSTANCE hInstance,
    HINSTANCE hPrevInstance,



    LPSTR lpCmdLine,

    int nShowCmd
    );

LONG CompareFileTime(const FILETIME *lpft1, const FILETIME *lpft2);
BOOL FileTimeToSystemTime(const FILETIME *lpft, LPSYSTEMTIME lpst);
BOOL SystemTimeToFileTime(const SYSTEMTIME *lpst, LPFILETIME lpft);
BOOL FileTimeToLocalFileTime(const FILETIME *lpft, LPFILETIME lpftLocal);
BOOL LocalFileTimeToFileTime(const FILETIME *lpftLocal, LPFILETIME lpft);


void GetCurrentFT(LPFILETIME lpFileTime);


BOOL

DllMain (
    HANDLE hinstDLL,
    DWORD dwReason,
    LPVOID lpvReserved
    );
# 424 "/usr/local/arm-wince-pe/include/winbase.h" 3

FARPROC

GetProcAddress(
    HMODULE hModule,
    LPCSTR lpProcName
    );



void

GetLocalTime (
    LPSYSTEMTIME lpSystemTime
    );

void

GetSystemTime (
    LPSYSTEMTIME lpSystemTime
    );

typedef struct _TIME_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
} TIME_ZONE_INFORMATION, *LPTIME_ZONE_INFORMATION;

DWORD

GetTimeZoneInformation (
    LPTIME_ZONE_INFORMATION lpTimeZoneInformation
    );

BOOL

SetLocalTime (
    const SYSTEMTIME *lpSystemTime
    );

BOOL

SetSystemTime (
    const SYSTEMTIME *lpSystemTime
    );

void

SetDaylightTime (
        DWORD dst
        );

BOOL

SetTimeZoneInformation (
    const TIME_ZONE_INFORMATION *lpTimeZoneInformation
    );
# 497 "/usr/local/arm-wince-pe/include/winbase.h" 3

LPSTR

lstrcatA(
    LPSTR lpString1,
    LPCSTR lpString2
    );
# 524 "/usr/local/arm-wince-pe/include/winbase.h" 3

int

lstrcmpA(
    LPCSTR lpString1,
    LPCSTR lpString2
    );

int

lstrcmpW(
    LPCWSTR lpString1,
    LPCWSTR lpString2
    );
# 557 "/usr/local/arm-wince-pe/include/winbase.h" 3

int

lstrcmpiA(
    LPCSTR lpString1,
    LPCSTR lpString2
    );

int

lstrcmpiW(
    LPCWSTR lpString1,
    LPCWSTR lpString2
    );
# 588 "/usr/local/arm-wince-pe/include/winbase.h" 3

LPSTR

lstrcpyA(
    LPSTR lpString1,
    LPCSTR lpString2
    );
# 613 "/usr/local/arm-wince-pe/include/winbase.h" 3

int

lstrlenA(
    LPCSTR lpString
    );







DWORD

CharLowerBuffA (
    LPSTR lpsz,
    DWORD cchLength
    );
DWORD

CharLowerBuffW (
    LPWSTR lpsz,
    DWORD cchLength
    );






DWORD

CharUpperBuffA (
    LPSTR lpsz,
    DWORD cchLength
    );
DWORD

CharUpperBuffW (
    LPWSTR lpsz,
    DWORD cchLength
    );






LPSTR CharLowerA(LPSTR lpsz);
LPWSTR CharLowerW(LPWSTR lpsz);







LPSTR CharUpperA(LPSTR lpsz);
LPWSTR CharUpperW(LPWSTR lpsz);







LPSTR

CharPrevA(
    LPCSTR lpszStart,
    LPCSTR lpszCurrent);

LPWSTR

CharPrevW(
    LPCWSTR lpszStart,
    LPCWSTR lpszCurrent);







LPSTR

CharNextA(
    LPCSTR lpsz);

LPWSTR

CharNextW(
    LPCWSTR lpsz);
# 787 "/usr/local/arm-wince-pe/include/winbase.h" 3
# 1 "/usr/local/lib/gcc-lib/arm-wince-pe/3.3.3/include/stdarg.h" 1 3 4
# 105 "/usr/local/lib/gcc-lib/arm-wince-pe/3.3.3/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 788 "/usr/local/arm-wince-pe/include/winbase.h" 2 3

int

wsprintfA (
    LPSTR lpBuffer,
    LPCSTR lpFormat,
    ...
    );
int

wsprintfW (
    LPWSTR lpBuffer,
    LPCWSTR lpFormat,
    ...
    );
# 817 "/usr/local/arm-wince-pe/include/winbase.h" 3
int

wvsprintfA (
    LPSTR,
    LPCSTR,
    va_list ArgList
    );

int

wvsprintfW (
    LPWSTR,
    LPCWSTR,
    va_list ArgList
    );
# 883 "/usr/local/arm-wince-pe/include/winbase.h" 3
typedef struct _MEMORYSTATUS {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    DWORD dwTotalPhys;
    DWORD dwAvailPhys;
    DWORD dwTotalPageFile;
    DWORD dwAvailPageFile;
    DWORD dwTotalVirtual;
    DWORD dwAvailVirtual;
} MEMORYSTATUS, *LPMEMORYSTATUS;

void

GlobalMemoryStatus(
    LPMEMORYSTATUS lpBuffer
    );
# 908 "/usr/local/arm-wince-pe/include/winbase.h" 3

LPVOID

LocalLock(
    HLOCAL hMem
    );


BOOL

LocalUnlock(
    HLOCAL hMem
    );


HLOCAL

LocalHandle(
    LPCVOID pMem
    );


UINT

LocalFlags(
    HLOCAL hMem
    );


HLOCAL

LocalAlloc (
    UINT fuFlags,
    UINT cbBytes
    );

HLOCAL

LocalFree (
    HLOCAL hMem
    );

HLOCAL

LocalReAlloc (
    HLOCAL hMem,
    UINT cbBytes,
    UINT fuFlags
    );

UINT

LocalSize (
    HLOCAL hMem
    );
# 981 "/usr/local/arm-wince-pe/include/winbase.h" 3
LPVOID

VirtualAlloc(
    LPVOID lpAddress,
    DWORD dwSize,
    DWORD flAllocationType,
    DWORD flProtect
    );

BOOL

VirtualFree(
    LPVOID lpAddress,
    DWORD dwSize,
    DWORD dwFreeType
    );

BOOL

VirtualProtect(
    LPVOID lpAddress,
    DWORD dwSize,
    DWORD flNewProtect,
    PDWORD lpflOldProtect
    );

DWORD

VirtualQuery(
    LPCVOID lpAddress,
    PMEMORY_BASIC_INFORMATION lpBuffer,
    DWORD dwLength
    );



HANDLE GetProcessHeap(void);

HANDLE

HeapCreate(
    DWORD flOptions,
    DWORD dwInitialSize,
    DWORD dwMaximumSize
    );

BOOL

HeapDestroy(
    HANDLE hHeap
    );

LPVOID

HeapAlloc(
    HANDLE hHeap,
    DWORD dwFlags,
    DWORD dwBytes
    );

LPVOID

HeapReAlloc(
    HANDLE hHeap,
    DWORD dwFlags,
    LPVOID lpMem,
    DWORD dwBytes
    );

BOOL

HeapFree(
    HANDLE hHeap,
    DWORD dwFlags,
    LPVOID lpMem
    );

DWORD

HeapSize(
    HANDLE hHeap,
    DWORD dwFlags,
    LPCVOID lpMem
    );

BOOL

HeapValidate(
    HANDLE hHeap,
    DWORD dwFlags,
    LPCVOID lpMem
    );



void

OutputDebugStringA(
    LPCSTR lpOutputString
    );

void

OutputDebugStringW(
    LPCWSTR lpOutputString
    );








void

DebugBreak(
    void
    );


void SignalStarted(DWORD dw);

BOOL

QueryPerformanceCounter(
    LARGE_INTEGER *lpPerformanceCount
    );

BOOL

QueryPerformanceFrequency(
    LARGE_INTEGER *lpFrequency
    );







typedef struct _OSVERSIONINFOA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR szCSDVersion[ 128 ];
} OSVERSIONINFOA, *POSVERSIONINFOA, *LPOSVERSIONINFOA;
typedef struct _OSVERSIONINFOW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR szCSDVersion[ 128 ];
} OSVERSIONINFOW, *POSVERSIONINFOW, *LPOSVERSIONINFOW;





typedef OSVERSIONINFOA OSVERSIONINFO;
typedef POSVERSIONINFOA POSVERSIONINFO;
typedef LPOSVERSIONINFOA LPOSVERSIONINFO;


BOOL

GetVersionExA(
    LPOSVERSIONINFOA lpVersionInformation
    );
BOOL

GetVersionExW(
    LPOSVERSIONINFOW lpVersionInformation
    );






typedef struct _SYSTEM_INFO {
    union {
        DWORD dwOemId;
        struct {
            WORD wProcessorArchitecture;
            WORD wReserved;
        };
    };
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
} SYSTEM_INFO, *LPSYSTEM_INFO;

HINSTANCE

LoadLibraryA(
    LPCSTR lpLibFileName
    );

HINSTANCE

LoadLibraryW(
    LPCWSTR lpLibFileName
    );







HMODULE

LoadLibraryExA(
    LPCSTR lpLibFileName,
    HANDLE hFile,
    DWORD dwFlags
    );

HMODULE

LoadLibraryExW(
    LPCWSTR lpLibFileName,
    HANDLE hFile,
    DWORD dwFlags
    );
# 1226 "/usr/local/arm-wince-pe/include/winbase.h" 3

DWORD

GetModuleFileNameA(
    HMODULE hModule,
    LPSTR lpFilename,
    DWORD nSize
    );

DWORD

GetModuleFileNameW(
    HMODULE hModule,
    LPWSTR lpFilename,
    DWORD nSize
    );







HMODULE

GetModuleHandleA(
    LPCSTR lpModuleName
    );

HMODULE

GetModuleHandleW(
    LPCWSTR lpModuleName
    );
# 1270 "/usr/local/arm-wince-pe/include/winbase.h" 3
typedef struct _OVERLAPPED {
    DWORD Internal;
    DWORD InternalHigh;
    DWORD Offset;
    DWORD OffsetHigh;
    HANDLE hEvent;
} OVERLAPPED, *LPOVERLAPPED;

typedef struct _SECURITY_ATTRIBUTES {
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    BOOL bInheritHandle;
} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;

typedef DWORD ( *LPTHREAD_START_ROUTINE)(LPVOID pvarg);

typedef LPTHREAD_START_ROUTINE PTHREAD_START_ROUTINE;
# 1312 "/usr/local/arm-wince-pe/include/winbase.h" 3
typedef struct _EXCEPTION_DEBUG_INFO {
    EXCEPTION_RECORD ExceptionRecord;
    DWORD dwFirstChance;
} EXCEPTION_DEBUG_INFO, *LPEXCEPTION_DEBUG_INFO;

typedef struct _CREATE_THREAD_DEBUG_INFO {
    HANDLE hThread;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
} CREATE_THREAD_DEBUG_INFO, *LPCREATE_THREAD_DEBUG_INFO;

typedef struct _CREATE_PROCESS_DEBUG_INFO {
    HANDLE hFile;
    HANDLE hProcess;
    HANDLE hThread;
    LPVOID lpBaseOfImage;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
    LPVOID lpImageName;
    WORD fUnicode;
} CREATE_PROCESS_DEBUG_INFO, *LPCREATE_PROCESS_DEBUG_INFO;

typedef struct _EXIT_THREAD_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_THREAD_DEBUG_INFO, *LPEXIT_THREAD_DEBUG_INFO;

typedef struct _EXIT_PROCESS_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_PROCESS_DEBUG_INFO, *LPEXIT_PROCESS_DEBUG_INFO;

typedef struct _LOAD_DLL_DEBUG_INFO {
    HANDLE hFile;
    LPVOID lpBaseOfDll;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpImageName;
    WORD fUnicode;
} LOAD_DLL_DEBUG_INFO, *LPLOAD_DLL_DEBUG_INFO;

typedef struct _UNLOAD_DLL_DEBUG_INFO {
    LPVOID lpBaseOfDll;
} UNLOAD_DLL_DEBUG_INFO, *LPUNLOAD_DLL_DEBUG_INFO;

typedef struct _OUTPUT_DEBUG_STRING_INFO {
    LPSTR lpDebugStringData;
    WORD fUnicode;
    WORD nDebugStringLength;
} OUTPUT_DEBUG_STRING_INFO, *LPOUTPUT_DEBUG_STRING_INFO;

typedef struct _RIP_INFO {
    DWORD dwError;
    DWORD dwType;
} RIP_INFO, *LPRIP_INFO;

typedef struct _DEBUG_EVENT {
    DWORD dwDebugEventCode;
    DWORD dwProcessId;
    DWORD dwThreadId;
    union {
        EXCEPTION_DEBUG_INFO Exception;
        CREATE_THREAD_DEBUG_INFO CreateThread;
        CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
        EXIT_THREAD_DEBUG_INFO ExitThread;
        EXIT_PROCESS_DEBUG_INFO ExitProcess;
        LOAD_DLL_DEBUG_INFO LoadDll;
        UNLOAD_DLL_DEBUG_INFO UnloadDll;
        OUTPUT_DEBUG_STRING_INFO DebugString;
        RIP_INFO RipInfo;
    } u;
} DEBUG_EVENT, *LPDEBUG_EVENT;
# 1413 "/usr/local/arm-wince-pe/include/winbase.h" 3
typedef PCONTEXT LPCONTEXT;
# 1447 "/usr/local/arm-wince-pe/include/winbase.h" 3
typedef struct CRITICAL_SECTION {
    unsigned int LockCount;
    HANDLE OwnerThread;
    HANDLE hCrit;
    DWORD needtrap;
    DWORD dwReserved;
} CRITICAL_SECTION, *LPCRITICAL_SECTION;


void

EnterCriticalSection (
    LPCRITICAL_SECTION pcsCriticalSection
    );

void

LeaveCriticalSection (
    LPCRITICAL_SECTION pcsCriticalSection
    );

void

InitializeCriticalSection (
    LPCRITICAL_SECTION pcsCriticalSection
    );


BOOL

TryEnterCriticalSection(
    LPCRITICAL_SECTION lpCriticalSection
    );

void

DeleteCriticalSection (
    LPCRITICAL_SECTION pcsCriticalSection
    );

BOOL

WaitForDebugEvent(
    LPDEBUG_EVENT lpDebugEvent,
    DWORD dwMilliseconds
    );

BOOL

ContinueDebugEvent(
    DWORD dwProcessId,
    DWORD dwThreadId,
    DWORD dwContinueStatus
    );

BOOL

DebugActiveProcess(
    DWORD dwProcessId
    );

LPVOID

MapViewOfFile(
    HANDLE hFileMappingObject,
    DWORD dwDesiredAccess,
    DWORD dwFileOffsetHigh,
    DWORD dwFileOffsetLow,
    DWORD dwNumberOfBytesToMap
    );

BOOL

UnmapViewOfFile(
    LPCVOID lpBaseAddress
    );


BOOL

FlushViewOfFile(
    LPCVOID lpBaseAddress,
    DWORD dwNumberOfBytesToFlush
    );


HANDLE

CreateFileMappingA(
    HANDLE hFile,
    LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
    DWORD flProtect,
    DWORD dwMaximumSizeHigh,
    DWORD dwMaximumSizeLow,
    LPCSTR lpName
    );


HANDLE

CreateFileMappingW(
    HANDLE hFile,
    LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
    DWORD flProtect,
    DWORD dwMaximumSizeHigh,
    DWORD dwMaximumSizeLow,
    LPCWSTR lpName
    );








HANDLE

CreateFileForMappingW(LPCWSTR lpFileName, DWORD dwDesiredAccess, DWORD dwShareMode,
        LPSECURITY_ATTRIBUTES lpSecurityAttributes, DWORD dwCreationDisposition, DWORD dwFlagsAndAttributes,
        HANDLE hTemplateFile);







LPVOID MapUncompressedFileW(LPCWSTR pFileName, LPDWORD pLen);








DWORD

GetTempPathA(
    DWORD nBufferLength,
    LPSTR lpBuffer
    );


DWORD

GetTempPathW(
    DWORD nBufferLength,
    LPWSTR lpBuffer
    );
# 1610 "/usr/local/arm-wince-pe/include/winbase.h" 3
HANDLE

CreateThread (
    LPSECURITY_ATTRIBUTES lpsa,
    DWORD cbStack,
    LPTHREAD_START_ROUTINE lpStartAddr,
    LPVOID lpvThreadParam,
    DWORD fdwCreate,
    LPDWORD lpIDThread
    );

void

ExitThread (
    DWORD dwExitCode
    );

BOOL

TerminateThread(
    HANDLE hThread,
    DWORD dwExitCode
    );



LPVOID

TlsGetValue (
    DWORD dwTlsIndex
    );

BOOL

TlsSetValue (
    DWORD dwTlsIndex,
    LPVOID lpvTlsValue
    );


typedef struct _PROCESS_INFORMATION {
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
} PROCESS_INFORMATION, *LPPROCESS_INFORMATION;

typedef struct _STARTUPINFOA {
    DWORD cb;
    LPSTR lpReserved;
    LPSTR lpDesktop;
    LPSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
} STARTUPINFOA, *LPSTARTUPINFOA;

typedef struct _STARTUPINFOW {
    DWORD cb;
    LPWSTR lpReserved;
    LPWSTR lpDesktop;
    LPWSTR lpTitle;
    DWORD dwX;
    DWORD dwY;
    DWORD dwXSize;
    DWORD dwYSize;
    DWORD dwXCountChars;
    DWORD dwYCountChars;
    DWORD dwFillAttribute;
    DWORD dwFlags;
    WORD wShowWindow;
    WORD cbReserved2;
    LPBYTE lpReserved2;
    HANDLE hStdInput;
    HANDLE hStdOutput;
    HANDLE hStdError;
} STARTUPINFOW, *LPSTARTUPINFOW;





typedef STARTUPINFOA STARTUPINFO;
typedef LPSTARTUPINFOA LPSTARTUPINFO;


BOOL

CreateProcessA (
    LPCSTR pszImageName,
    LPCSTR pszCmdLine,
    LPSECURITY_ATTRIBUTES psaProcess,
    LPSECURITY_ATTRIBUTES psaThread,
    BOOL fInheritHandles,
    DWORD fdwCreate,
    LPVOID pvEnvironment,
    LPSTR pszCurDir,
    LPSTARTUPINFO psiStartInfo,
    LPPROCESS_INFORMATION pProcInfo
    );
BOOL

CreateProcessW (
    LPCWSTR pszImageName,
    LPCWSTR pszCmdLine,
    LPSECURITY_ATTRIBUTES psaProcess,
    LPSECURITY_ATTRIBUTES psaThread,
    BOOL fInheritHandles,
    DWORD fdwCreate,
    LPVOID pvEnvironment,
    LPWSTR pszCurDir,
    LPSTARTUPINFO psiStartInfo,
    LPPROCESS_INFORMATION pProcInfo
    );







DWORD

GetProcessVersion(
    DWORD ProcessId
    );


LPSTR

GetCommandLineA(
    void
    );

LPWSTR

GetCommandLineW(
    void
    );






# 1 "/usr/local/arm-wince-pe/include/winerror.h" 1 3
# 1767 "/usr/local/arm-wince-pe/include/winbase.h" 2 3
# 1803 "/usr/local/arm-wince-pe/include/winbase.h" 3
typedef struct _WIN32_FIND_DATAA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    CHAR cFileName[ 260 ];
    CHAR cAlternateFileName[ 14 ];
} WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA;

typedef struct _WIN32_FIND_DATAW {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwOID;
    WCHAR cFileName[ 260 ];
} WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW;





typedef WIN32_FIND_DATAA WIN32_FIND_DATA;
typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA;
typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA;


typedef struct _WIN32_FILE_ATTRIBUTE_DATA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
} WIN32_FILE_ATTRIBUTE_DATA, *LPWIN32_FILE_ATTRIBUTE_DATA;


DWORD

GetLastError(
    void
    );


DWORD

GetTickCount(
    void
    );




DWORD

FormatMessageA(
    DWORD dwFlags,
    LPCVOID lpSource,
    DWORD dwMessageId,
    DWORD dwLanguageId,
    LPSTR lpBuffer,
    DWORD nSize,
    va_list *Arguments
    );




DWORD

FormatMessageW(
    DWORD dwFlags,
    LPCVOID lpSource,
    DWORD dwMessageId,
    DWORD dwLanguageId,
    LPWSTR lpBuffer,
    DWORD nSize,
    va_list *Arguments
    );
# 1905 "/usr/local/arm-wince-pe/include/winbase.h" 3

BOOL

CloseHandle(
    HANDLE hObject
    );


HGLOBAL

LoadResource(
    HMODULE hModule,
    HRSRC hResInfo
    );


DWORD

SizeofResource(
    HMODULE hModule,
    HRSRC hResInfo
    );


HRSRC

FindResourceA(
    HMODULE hModule,
    LPCSTR lpName,
    LPCSTR lpType
    );


HRSRC

FindResourceW(
    HMODULE hModule,
    LPCWSTR lpName,
    LPCWSTR lpType
    );
# 1953 "/usr/local/arm-wince-pe/include/winbase.h" 3

LPVOID

LockResource(
        HGLOBAL hResData
        );



BOOL

VerQueryValueA(
        const LPVOID pBlock,
        LPSTR lpSubBlock,
        LPVOID * lplpBuffer,
        PUINT puLen
        );


BOOL

VerQueryValueW(
        const LPVOID pBlock,
        LPWSTR lpSubBlock,
        LPVOID * lplpBuffer,
        PUINT puLen
        );







DWORD

GetFileVersionInfoSizeA(
        LPSTR lptstrFilename,
        LPDWORD lpdwHandle
        );


DWORD

GetFileVersionInfoSizeW(
        LPWSTR lptstrFilename,
        LPDWORD lpdwHandle
        );







BOOL

GetFileVersionInfoA(
        LPSTR lptstrFilename,
        DWORD dwHandle,
        DWORD dwLen,
        LPVOID lpData
        );


BOOL

GetFileVersionInfoW(
        LPWSTR lptstrFilename,
        DWORD dwHandle,
        DWORD dwLen,
        LPVOID lpData
        );







BOOL

TerminateProcess(
    HANDLE hProcess,
    DWORD uExitCode
    );

BOOL

FlushInstructionCache(
    HANDLE hProcess,
    LPCVOID lpBaseAddress,
    DWORD dwSize
    );

BOOL

ReadProcessMemory(
    HANDLE hProcess,
    LPCVOID lpBaseAddress,
    LPVOID lpBuffer,
    DWORD nSize,
    LPDWORD lpNumberOfBytesRead
    );

BOOL

WriteProcessMemory(
    HANDLE hProcess,
    LPVOID lpBaseAddress,
    LPVOID lpBuffer,
    DWORD nSize,
    LPDWORD lpNumberOfBytesWritten
    );

HANDLE

OpenProcess(
        DWORD fdwAccess,
        BOOL fInherit,
        DWORD IDProcess
        );


BOOL

GetThreadContext(
    HANDLE hThread,
    LPCONTEXT lpContext
    );


BOOL

SetThreadContext(
    HANDLE hThread,
    const CONTEXT *lpContext
    );


DWORD

SuspendThread(
    HANDLE hThread
    );

DWORD

ResumeThread(
    HANDLE hThread
    );


BOOL

GetThreadTimes(
    HANDLE hThread,
    LPFILETIME lpCreationTime,
    LPFILETIME lpExitTime,
    LPFILETIME lpKernelTime,
    LPFILETIME lpUserTime
    );


int

GetThreadPriority(
    HANDLE hThread
    );


BOOL

SetThreadPriority(
    HANDLE hThread,
    int nPriority
    );


int

CeGetThreadPriority(
    HANDLE hThread
    );


BOOL

CeSetThreadPriority(
        HANDLE hThread,
        int nPriority
        );


DWORD

CeGetThreadQuantum(
    HANDLE hThread
    );


BOOL

CeSetThreadQuantum(
        HANDLE hThread,
        DWORD dwTime
        );


void

SetLastError(
    DWORD dwErrCode
    );


UINT

GetTempFileNameA(
    LPCSTR lpPathName,
    LPCSTR lpPrefixString,
    UINT uUnique,
    LPSTR lpTempFileName
    );

UINT

GetTempFileNameW(
    LPCWSTR lpPathName,
    LPCWSTR lpPrefixString,
    UINT uUnique,
    LPWSTR lpTempFileName
    );
# 2194 "/usr/local/arm-wince-pe/include/winbase.h" 3
BOOL GetDiskFreeSpaceExA(LPCSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller,
    PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes);

BOOL GetDiskFreeSpaceExW(LPCWSTR lpDirectoryName, PULARGE_INTEGER lpFreeBytesAvailableToCaller,
    PULARGE_INTEGER lpTotalNumberOfBytes, PULARGE_INTEGER lpTotalNumberOfFreeBytes);








HANDLE

CreateFileA(
    LPCSTR lpFileName,
    DWORD dwDesiredAccess,
    DWORD dwShareMode,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    DWORD dwCreationDisposition,
    DWORD dwFlagsAndAttributes,
    HANDLE hTemplateFile
    );


HANDLE

CreateFileW(
    LPCWSTR lpFileName,
    DWORD dwDesiredAccess,
    DWORD dwShareMode,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    DWORD dwCreationDisposition,
    DWORD dwFlagsAndAttributes,
    HANDLE hTemplateFile
    );







BOOL

DeleteFileA(
    LPCSTR lpFileName
    );

BOOL

DeleteFileW(
    LPCWSTR lpFileName
    );






typedef enum _FINDEX_INFO_LEVELS {
    FindExInfoStandard,
    FindExInfoMaxInfoLevel
} FINDEX_INFO_LEVELS;

typedef enum _FINDEX_SEARCH_OPS {
    FindExSearchNameMatch,
    FindExSearchLimitToDirectories,
    FindExSearchLimitToDevices,
    FindExSearchMaxSearchOp
} FINDEX_SEARCH_OPS;




HANDLE

FindFirstFileExA(
    LPCSTR lpFileName,
    FINDEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFindFileData,
    FINDEX_SEARCH_OPS fSearchOp,
    LPVOID lpSearchFilter,
    DWORD dwAdditionalFlags
    );

HANDLE

FindFirstFileExW(
    LPCWSTR lpFileName,
    FINDEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFindFileData,
    FINDEX_SEARCH_OPS fSearchOp,
    LPVOID lpSearchFilter,
    DWORD dwAdditionalFlags
    );







BOOL

DeleteAndRenameFile(
    LPCWSTR lpOldFileName,
    LPCWSTR lpNewFileName
    );


HANDLE

FindFirstFileA(
    LPCSTR lpFileName,
    LPWIN32_FIND_DATAA lpFindFileData
    );


HANDLE

FindFirstFileW(
    LPCWSTR lpFileName,
    LPWIN32_FIND_DATAW lpFindFileData
    );







BOOL

FindNextFileA(
    HANDLE hFindFile,
    LPWIN32_FIND_DATAA lpFindFileData
    );


BOOL

FindNextFileW(
    HANDLE hFindFile,
    LPWIN32_FIND_DATAW lpFindFileData
    );







BOOL

CopyFileA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName,
    BOOL bFailIfExists
    );

BOOL

CopyFileW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName,
    BOOL bFailIfExists
    );







BOOL

MoveFileA(
    LPCSTR lpExistingFileName,
    LPCSTR lpNewFileName
    );

BOOL

MoveFileW(
    LPCWSTR lpExistingFileName,
    LPCWSTR lpNewFileName
    );








BOOL

CreateDirectoryA(
    LPCSTR lpPathName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );

BOOL

CreateDirectoryW(
    LPCWSTR lpPathName,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );







BOOL

RemoveDirectoryA(
    LPCSTR lpPathName
    );

BOOL

RemoveDirectoryW(
    LPCWSTR lpPathName
    );







BOOL

WriteFile(
    HANDLE hFile,
    LPCVOID lpBuffer,
    DWORD nNumberOfBytesToWrite,
    LPDWORD lpNumberOfBytesWritten,
    LPOVERLAPPED lpOverlapped
    );


BOOL

ReadFile(
    HANDLE hFile,
    LPVOID lpBuffer,
    DWORD nNumberOfBytesToRead,
    LPDWORD lpNumberOfBytesRead,
    LPOVERLAPPED lpOverlapped
    );

 BOOL FlushFileBuffers (HANDLE hFile);
 BOOL GetFileTime (HANDLE hFile, LPFILETIME lpCreation, LPFILETIME lpLastAccess, LPFILETIME lpLastWrite);
 BOOL SetFileTime (HANDLE hFile, const FILETIME *lpCreation, const FILETIME *lpLastAccess, const FILETIME *lpLastWrite);
 BOOL SetEndOfFile (HANDLE hFile);
 BOOL DeviceIoControl (HANDLE hDevice, DWORD dwIoControlCode, LPVOID lpInBuf, DWORD nInBufSize, LPVOID lpOutBuf, DWORD nOutBufSize, LPDWORD lpBytesReturned, LPOVERLAPPED lpOverlapped);





BOOL

SetFileAttributesA(
    LPCSTR lpFileName,
    DWORD dwFileAttributes
    );

BOOL

SetFileAttributesW(
    LPCWSTR lpFileName,
    DWORD dwFileAttributes
    );







DWORD

SetFilePointer(
    HANDLE hFile,
    LONG lDistanceToMove,
    PLONG lpDistanceToMoveHigh,
    DWORD dwMoveMethod
    );


BOOL

FindClose(
    HANDLE hFindFile
    );



DWORD

GetFileSize(
    HANDLE hFile,
    LPDWORD lpFileSizeHigh
    );


DWORD

GetFileAttributesA(
    LPCSTR lpFileName
    );

DWORD

GetFileAttributesW(
    LPCWSTR lpFileName
    );






typedef enum _GET_FILEEX_INFO_LEVELS {
    GetFileExInfoStandard,
    GetFileExMaxInfoLevel
} GET_FILEEX_INFO_LEVELS;


BOOL

GetFileAttributesExA(
    LPCSTR lpFileName,
    GET_FILEEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFileInformation
    );

BOOL

GetFileAttributesExW(
    LPCWSTR lpFileName,
    GET_FILEEX_INFO_LEVELS fInfoLevelId,
    LPVOID lpFileInformation
    );





typedef struct _BY_HANDLE_FILE_INFORMATION {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD dwVolumeSerialNumber;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD nNumberOfLinks;
    DWORD nFileIndexHigh;
    DWORD nFileIndexLow;
        DWORD dwOID;
} BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION, *LPBY_HANDLE_FILE_INFORMATION;


BOOL

GetFileInformationByHandle(
    HANDLE hFile,
    LPBY_HANDLE_FILE_INFORMATION lpFileInformation
        );




void

Sleep(
    DWORD dwMilliseconds
    );


HANDLE

CreateMutexA(
        LPSECURITY_ATTRIBUTES lpsa,
        BOOL bInitialOwner,
        LPCSTR lpName);


HANDLE

CreateMutexW(
        LPSECURITY_ATTRIBUTES lpsa,
        BOOL bInitialOwner,
        LPCWSTR lpName);








HANDLE

CreateEventA(
    LPSECURITY_ATTRIBUTES lpEventAttributes,
    BOOL bManualReset,
    BOOL bInitialState,
    LPCSTR lpName
    );


HANDLE

CreateEventW(
    LPSECURITY_ATTRIBUTES lpEventAttributes,
    BOOL bManualReset,
    BOOL bInitialState,
    LPCWSTR lpName
    );







HANDLE

CreateSemaphoreA(
    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
    LONG lInitialCount,
    LONG lMaximumCount,
    LPCSTR lpName
    );

HANDLE

CreateSemaphoreW(
    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
    LONG lInitialCount,
    LONG lMaximumCount,
    LPCWSTR lpName
    );








BOOL

SetEvent(
    HANDLE hEvent
    );


BOOL

ResetEvent(
    HANDLE hEvent
    );


BOOL

PulseEvent(
    HANDLE hEvent
    );



BOOL

ReleaseSemaphore(
    HANDLE hSemaphore,
    LONG lReleaseCount,
    LPLONG lpPreviousCount
    );


BOOL

ReleaseMutex(
    HANDLE hMutex
    );


DWORD

WaitForSingleObject(
    HANDLE hHandle,
    DWORD dwMilliseconds
    );


DWORD

WaitForMultipleObjects(
        DWORD cObjects,
        const HANDLE *lphObjects,
        BOOL fWaitAll,
        DWORD dwTimeout
        );


BOOL

GetExitCodeThread(
    HANDLE hThread,
    LPDWORD lpExitCode
    );


BOOL

GetExitCodeProcess(
    HANDLE hProcess,
    LPDWORD lpExitCode
    );



HANDLE

GetCurrentThread(
    void
    );


HANDLE

GetCurrentProcess(
    void
    );


DWORD

GetCurrentThreadId(
    void
    );


DWORD

GetCurrentProcessId(
    void
    );


DWORD

TlsAlloc(
    void
    );


BOOL

IsBadCodePtr(
    FARPROC lpfn
    );


BOOL

IsBadReadPtr(
    const void *lp,
    UINT ucb
    );

BOOL

TlsFree(
    DWORD dwTlsIndex
    );


BOOL

IsBadWritePtr(
    LPVOID lp,
    UINT ucb
        );


void

GetSystemInfo(
    LPSYSTEM_INFO lpSystemInfo
    );


void

RaiseException(
    DWORD dwExceptionCode,
    DWORD dwExceptionFlags,
    DWORD nNumberOfArguments,
    const DWORD *lpArguments
    );


BOOL

FreeLibrary(
    HMODULE hLibModule
    );


void

FreeLibraryAndExitThread(
    HMODULE hLibModule,
    DWORD dwExitCode
    );


BOOL

DisableThreadLibraryCalls(
    HMODULE hLibModule
    );
# 2940 "/usr/local/arm-wince-pe/include/winbase.h" 3
typedef struct _COMMPROP {
    WORD wPacketLength;
    WORD wPacketVersion;
    DWORD dwServiceMask;
    DWORD dwReserved1;
    DWORD dwMaxTxQueue;
    DWORD dwMaxRxQueue;
    DWORD dwMaxBaud;
    DWORD dwProvSubType;
    DWORD dwProvCapabilities;
    DWORD dwSettableParams;
    DWORD dwSettableBaud;
    WORD wSettableData;
    WORD wSettableStopParity;
    DWORD dwCurrentTxQueue;
    DWORD dwCurrentRxQueue;
    DWORD dwProvSpec1;
    DWORD dwProvSpec2;
    WCHAR wcProvChar[1];
} COMMPROP,*LPCOMMPROP;







typedef struct _COMSTAT {
    DWORD fCtsHold : 1;
    DWORD fDsrHold : 1;
    DWORD fRlsdHold : 1;
    DWORD fXoffHold : 1;
    DWORD fXoffSent : 1;
    DWORD fEof : 1;
    DWORD fTxim : 1;
    DWORD fReserved : 25;
    DWORD cbInQue;
    DWORD cbOutQue;
} COMSTAT, *LPCOMSTAT;
# 2995 "/usr/local/arm-wince-pe/include/winbase.h" 3
typedef struct _DCB {
    DWORD DCBlength;
    DWORD BaudRate;
    DWORD fBinary: 1;
    DWORD fParity: 1;
    DWORD fOutxCtsFlow:1;
    DWORD fOutxDsrFlow:1;
    DWORD fDtrControl:2;
    DWORD fDsrSensitivity:1;
    DWORD fTXContinueOnXoff: 1;
    DWORD fOutX: 1;
    DWORD fInX: 1;
    DWORD fErrorChar: 1;
    DWORD fNull: 1;
    DWORD fRtsControl:2;
    DWORD fAbortOnError:1;
    DWORD fDummy2:17;
    WORD wReserved;
    WORD XonLim;
    WORD XoffLim;
    BYTE ByteSize;
    BYTE Parity;
    BYTE StopBits;
    char XonChar;
    char XoffChar;
    char ErrorChar;
    char EofChar;
    char EvtChar;
    WORD wReserved1;
} DCB, *LPDCB;

typedef struct _COMMTIMEOUTS {
    DWORD ReadIntervalTimeout;
    DWORD ReadTotalTimeoutMultiplier;
    DWORD ReadTotalTimeoutConstant;
    DWORD WriteTotalTimeoutMultiplier;
    DWORD WriteTotalTimeoutConstant;
} COMMTIMEOUTS,*LPCOMMTIMEOUTS;

typedef struct _COMMCONFIG {
    DWORD dwSize;
    WORD wVersion;
    WORD wReserved;
    DCB dcb;
    DWORD dwProviderSubType;

    DWORD dwProviderOffset;

    DWORD dwProviderSize;
    WCHAR wcProviderData[1];
} COMMCONFIG,*LPCOMMCONFIG;
# 3157 "/usr/local/arm-wince-pe/include/winbase.h" 3
BOOL

ClearCommBreak(
    HANDLE hFile
    );


BOOL

ClearCommError(
    HANDLE hFile,
    LPDWORD lpErrors,
    LPCOMSTAT lpStat
    );


BOOL

SetupComm(
    HANDLE hFile,
    DWORD dwInQueue,
    DWORD dwOutQueue
    );


BOOL

EscapeCommFunction(
    HANDLE hFile,
    DWORD dwFunc
    );


BOOL

GetCommMask(
    HANDLE hFile,
    LPDWORD lpEvtMask
    );


BOOL

GetCommProperties(
    HANDLE hFile,
    LPCOMMPROP lpCommProp
    );


BOOL

GetCommModemStatus(
    HANDLE hFile,
    LPDWORD lpModemStat
    );


BOOL

GetCommState(
    HANDLE hFile,
    LPDCB lpDCB
    );


BOOL

GetCommTimeouts(
    HANDLE hFile,
    LPCOMMTIMEOUTS lpCommTimeouts
    );


BOOL

PurgeComm(
    HANDLE hFile,
    DWORD dwFlags
    );


BOOL

SetCommBreak(
    HANDLE hFile
    );


BOOL

SetCommMask(
    HANDLE hFile,
    DWORD dwEvtMask
    );


BOOL

SetCommState(
    HANDLE hFile,
    LPDCB lpDCB
    );


BOOL

SetCommTimeouts(
    HANDLE hFile,
    LPCOMMTIMEOUTS lpCommTimeouts
    );


BOOL

TransmitCommChar(
    HANDLE hFile,
    char cChar
    );


BOOL

WaitCommEvent(
    HANDLE hFile,
    LPDWORD lpEvtMask,
    LPOVERLAPPED lpOverlapped
    );
# 3309 "/usr/local/arm-wince-pe/include/winbase.h" 3
typedef struct _SYSTEM_POWER_STATUS_EX {
    BYTE ACLineStatus;
    BYTE BatteryFlag;
    BYTE BatteryLifePercent;
    BYTE Reserved1;
    DWORD BatteryLifeTime;
    DWORD BatteryFullLifeTime;
    BYTE Reserved2;
    BYTE BackupBatteryFlag;
    BYTE BackupBatteryLifePercent;
    BYTE Reserved3;
    DWORD BackupBatteryLifeTime;
    DWORD BackupBatteryFullLifeTime;
} SYSTEM_POWER_STATUS_EX, *PSYSTEM_POWER_STATUS_EX, *LPSYSTEM_POWER_STATUS_EX;

BOOL

GetSystemPowerStatusEx(
    PSYSTEM_POWER_STATUS_EX pSystemPowerStatusEx,
        BOOL fUpdate
    );
# 3390 "/usr/local/arm-wince-pe/include/winbase.h" 3
typedef struct _SYSTEM_POWER_STATUS_EX2 {
    BYTE ACLineStatus;
    BYTE BatteryFlag;
    BYTE BatteryLifePercent;
    BYTE Reserved1;
    DWORD BatteryLifeTime;
    DWORD BatteryFullLifeTime;
    BYTE Reserved2;
    BYTE BackupBatteryFlag;
    BYTE BackupBatteryLifePercent;
    BYTE Reserved3;
    DWORD BackupBatteryLifeTime;
    DWORD BackupBatteryFullLifeTime;

    DWORD BatteryVoltage;
    DWORD BatteryCurrent;
    DWORD BatteryAverageCurrent;
    DWORD BatteryAverageInterval;
    DWORD BatterymAHourConsumed;
    DWORD BatteryTemperature;
    DWORD BackupBatteryVoltage;
    BYTE BatteryChemistry;


} SYSTEM_POWER_STATUS_EX2, *PSYSTEM_POWER_STATUS_EX2, *LPSYSTEM_POWER_STATUS_EX2;


DWORD

GetSystemPowerStatusEx2(
    PSYSTEM_POWER_STATUS_EX2 pSystemPowerStatusEx2,
    DWORD dwLen,
        BOOL fUpdate
    );


void

BatteryNotifyOfTimeChange(
        BOOL fForward,
        FILETIME *pftDelta
        );



BOOL CheckPassword (LPWSTR lpszPassword);







HANDLE RegisterDevice (LPCWSTR lpszName, DWORD index, LPCWSTR lpszLib, DWORD dwInfo);
BOOL DeregisterDevice (HANDLE hDevice);
BOOL LoadFSD (HANDLE hDevice, LPCWSTR lpFSDName);
BOOL LoadFSDEx (HANDLE hDevice, LPCWSTR lpFSDName, DWORD dwFlag);
HANDLE ActivateDevice(LPCWSTR lpszDevKey, DWORD dwClientInfo);
BOOL DeactivateDevice(HANDLE hDevice);
BOOL CeResyncFilesys(HANDLE hDevice);

# 1 "/usr/local/arm-wince-pe/include/winnls.h" 1 3
# 673 "/usr/local/arm-wince-pe/include/winnls.h" 3
typedef DWORD LGRPID;





typedef DWORD LCTYPE;





typedef DWORD CALTYPE;





typedef DWORD CALID;







typedef struct _cpinfo {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
} CPINFO, *LPCPINFO;

typedef struct _cpinfoexA {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    CHAR CodePageName[260];
} CPINFOEXA, *LPCPINFOEXA;
typedef struct _cpinfoexW {
    UINT MaxCharSize;
    BYTE DefaultChar[2];
    BYTE LeadByte[12];
    WCHAR UnicodeDefaultChar;
    UINT CodePage;
    WCHAR CodePageName[260];
} CPINFOEXW, *LPCPINFOEXW;




typedef CPINFOEXA CPINFOEX;
typedef LPCPINFOEXA LPCPINFOEX;







typedef struct _numberfmtA {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
} NUMBERFMTA, *LPNUMBERFMTA;
typedef struct _numberfmtW {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
} NUMBERFMTW, *LPNUMBERFMTW;




typedef NUMBERFMTA NUMBERFMT;
typedef LPNUMBERFMTA LPNUMBERFMT;







typedef struct _currencyfmtA {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPSTR lpDecimalSep;
    LPSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPSTR lpCurrencySymbol;
} CURRENCYFMTA, *LPCURRENCYFMTA;
typedef struct _currencyfmtW {
    UINT NumDigits;
    UINT LeadingZero;
    UINT Grouping;
    LPWSTR lpDecimalSep;
    LPWSTR lpThousandSep;
    UINT NegativeOrder;
    UINT PositiveOrder;
    LPWSTR lpCurrencySymbol;
} CURRENCYFMTW, *LPCURRENCYFMTW;




typedef CURRENCYFMTA CURRENCYFMT;
typedef LPCURRENCYFMTA LPCURRENCYFMT;
# 798 "/usr/local/arm-wince-pe/include/winnls.h" 3
typedef BOOL (* LANGUAGEGROUP_ENUMPROCA)(LGRPID, LPSTR, LPSTR, DWORD);
typedef BOOL (* LANGGROUPLOCALE_ENUMPROCA)(LGRPID, LCID, LPSTR);
typedef BOOL (* UILANGUAGE_ENUMPROCA)(LPSTR);
typedef BOOL (* LOCALE_ENUMPROCA)(LPSTR);
typedef BOOL (* CODEPAGE_ENUMPROCA)(LPSTR);
typedef BOOL (* DATEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (* DATEFMT_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (* TIMEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (* CALINFO_ENUMPROCA)(LPSTR);
typedef BOOL (* CALINFO_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (* UILANGUAGE_ENUMPROCA)(LPSTR);

typedef BOOL (* LANGUAGEGROUP_ENUMPROCW)(LGRPID, LPWSTR, LPWSTR, DWORD);
typedef BOOL (* LANGGROUPLOCALE_ENUMPROCW)(LGRPID, LCID, LPWSTR);
typedef BOOL (* UILANGUAGE_ENUMPROCW)(LPWSTR);
typedef BOOL (* LOCALE_ENUMPROCW)(LPWSTR);
typedef BOOL (* CODEPAGE_ENUMPROCW)(LPWSTR);
typedef BOOL (* DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (* DATEFMT_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (* TIMEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (* CALINFO_ENUMPROCW)(LPWSTR);
typedef BOOL (* CALINFO_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (* UILANGUAGE_ENUMPROCW)(LPWSTR);
# 905 "/usr/local/arm-wince-pe/include/winnls.h" 3

BOOL

IsValidCodePage(
    UINT CodePage);


UINT

GetACP(void);


UINT

GetOEMCP(void);


BOOL

GetCPInfo(
    UINT CodePage,
    LPCPINFO lpCPInfo);



BOOL

IsDBCSLeadByte(
    BYTE TestChar);


BOOL

IsDBCSLeadByteEx(
    UINT CodePage,
    BYTE TestChar);


int

MultiByteToWideChar(
    UINT CodePage,
    DWORD dwFlags,
    LPCSTR lpMultiByteStr,
    int cbMultiByte,
    LPWSTR lpWideCharStr,
    int cchWideChar);


int

WideCharToMultiByte(
    UINT CodePage,
    DWORD dwFlags,
    LPCWSTR lpWideCharStr,
    int cchWideChar,
    LPSTR lpMultiByteStr,
    int cbMultiByte,
    LPCSTR lpDefaultChar,
    LPBOOL lpUsedDefaultChar);







int

CompareStringA(
    LCID Locale,
    DWORD dwCmpFlags,
    LPCSTR lpString1,
    int cchCount1,
    LPCSTR lpString2,
    int cchCount2);

int

CompareStringW(
    LCID Locale,
    DWORD dwCmpFlags,
    LPCWSTR lpString1,
    int cchCount1,
    LPCWSTR lpString2,
    int cchCount2);







int

LCMapStringA(
    LCID Locale,
    DWORD dwMapFlags,
    LPCSTR lpSrcStr,
    int cchSrc,
    LPSTR lpDestStr,
    int cchDest);

int

LCMapStringW(
    LCID Locale,
    DWORD dwMapFlags,
    LPCWSTR lpSrcStr,
    int cchSrc,
    LPWSTR lpDestStr,
    int cchDest);







int

GetLocaleInfoA(
    LCID Locale,
    LCTYPE LCType,
    LPSTR lpLCData,
    int cchData);

int

GetLocaleInfoW(
    LCID Locale,
    LCTYPE LCType,
    LPWSTR lpLCData,
    int cchData);







BOOL

SetLocaleInfoA(
    LCID Locale,
    LCTYPE LCType,
    LPCSTR lpLCData);

BOOL

SetLocaleInfoW(
    LCID Locale,
    LCTYPE LCType,
    LPCWSTR lpLCData);







int

GetTimeFormatA(
    LCID Locale,
    DWORD dwFlags,
    const SYSTEMTIME *lpTime,
    LPCSTR lpFormat,
    LPSTR lpTimeStr,
    int cchTime);

int

GetTimeFormatW(
    LCID Locale,
    DWORD dwFlags,
    const SYSTEMTIME *lpTime,
    LPCWSTR lpFormat,
    LPWSTR lpTimeStr,
    int cchTime);







int

GetDateFormatA(
    LCID Locale,
    DWORD dwFlags,
    const SYSTEMTIME *lpDate,
    LPCSTR lpFormat,
    LPSTR lpDateStr,
    int cchDate);

int

GetDateFormatW(
    LCID Locale,
    DWORD dwFlags,
    const SYSTEMTIME *lpDate,
    LPCWSTR lpFormat,
    LPWSTR lpDateStr,
    int cchDate);







int

GetNumberFormatA(
    LCID Locale,
    DWORD dwFlags,
    LPCSTR lpValue,
    const NUMBERFMTA *lpFormat,
    LPSTR lpNumberStr,
    int cchNumber);

int

GetNumberFormatW(
    LCID Locale,
    DWORD dwFlags,
    LPCWSTR lpValue,
    const NUMBERFMTW *lpFormat,
    LPWSTR lpNumberStr,
    int cchNumber);







int

GetCurrencyFormatA(
    LCID Locale,
    DWORD dwFlags,
    LPCSTR lpValue,
    const CURRENCYFMTA *lpFormat,
    LPSTR lpCurrencyStr,
    int cchCurrency);

int

GetCurrencyFormatW(
    LCID Locale,
    DWORD dwFlags,
    LPCWSTR lpValue,
    const CURRENCYFMTW *lpFormat,
    LPWSTR lpCurrencyStr,
    int cchCurrency);







BOOL

EnumCalendarInfoA(
    CALINFO_ENUMPROCA lpCalInfoEnumProc,
    LCID Locale,
    CALID Calendar,
    CALTYPE CalType);

BOOL

EnumCalendarInfoW(
    CALINFO_ENUMPROCW lpCalInfoEnumProc,
    LCID Locale,
    CALID Calendar,
    CALTYPE CalType);







BOOL

EnumTimeFormatsA(
    TIMEFMT_ENUMPROCA lpTimeFmtEnumProc,
    LCID Locale,
    DWORD dwFlags);

BOOL

EnumTimeFormatsW(
    TIMEFMT_ENUMPROCW lpTimeFmtEnumProc,
    LCID Locale,
    DWORD dwFlags);







BOOL

EnumDateFormatsA(
    DATEFMT_ENUMPROCA lpDateFmtEnumProc,
    LCID Locale,
    DWORD dwFlags);

BOOL

EnumDateFormatsW(
    DATEFMT_ENUMPROCW lpDateFmtEnumProc,
    LCID Locale,
    DWORD dwFlags);







BOOL

IsValidLocale(
    LCID Locale,
    DWORD dwFlags);


LCID

ConvertDefaultLocale(
    LCID Locale);


LANGID

GetSystemDefaultLangID(void);


LANGID

GetUserDefaultLangID(void);


LCID

GetSystemDefaultLCID(void);


LCID

GetUserDefaultLCID(void);







BOOL

GetStringTypeExA(
    LCID Locale,
    DWORD dwInfoType,
    LPCSTR lpSrcStr,
    int cchSrc,
    LPWORD lpCharType);

BOOL

GetStringTypeExW(
    LCID Locale,
    DWORD dwInfoType,
    LPCWSTR lpSrcStr,
    int cchSrc,
    LPWORD lpCharType);
# 1304 "/usr/local/arm-wince-pe/include/winnls.h" 3

BOOL

GetStringTypeA(
    LCID Locale,
    DWORD dwInfoType,
    LPCSTR lpSrcStr,
    int cchSrc,
    LPWORD lpCharType);


BOOL

GetStringTypeW(
    DWORD dwInfoType,
    LPCWSTR lpSrcStr,
    int cchSrc,
    LPWORD lpCharType);



int

FoldStringA(
    DWORD dwMapFlags,
    LPCSTR lpSrcStr,
    int cchSrc,
    LPSTR lpDestStr,
    int cchDest);

int

FoldStringW(
    DWORD dwMapFlags,
    LPCWSTR lpSrcStr,
    int cchSrc,
    LPWSTR lpDestStr,
    int cchDest);







BOOL

EnumSystemLocalesA(
    LOCALE_ENUMPROCA lpLocaleEnumProc,
    DWORD dwFlags);

BOOL

EnumSystemLocalesW(
    LOCALE_ENUMPROCW lpLocaleEnumProc,
    DWORD dwFlags);







BOOL

EnumSystemCodePagesA(
    CODEPAGE_ENUMPROCA lpCodePageEnumProc,
    DWORD dwFlags);

BOOL

EnumSystemCodePagesW(
    CODEPAGE_ENUMPROCW lpCodePageEnumProc,
    DWORD dwFlags);






BOOL SetSystemDefaultLCID(LCID Locale);
BOOL SetOEMCP(UINT oemcp);
BOOL SetACP(UINT acp);







LANGID

GetSystemDefaultUILanguage(void);


LANGID

GetUserDefaultUILanguage(void);


BOOL

EnumUILanguagesA(
        UILANGUAGE_ENUMPROCA lpUILanguageEnumProc,
        DWORD dwFlags);

BOOL

EnumUILanguagesW(
        UILANGUAGE_ENUMPROCW lpUILanguageEnumProc,
        DWORD dwFlags);
# 3452 "/usr/local/arm-wince-pe/include/winbase.h" 2 3
# 21 "/usr/local/arm-wince-pe/include/windows.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/wingdi.h" 1 3
# 18 "/usr/local/arm-wince-pe/include/wingdi.h" 3
typedef struct tagPALETTEENTRY {
    BYTE peRed;
    BYTE peGreen;
    BYTE peBlue;
    BYTE peFlags;
} PALETTEENTRY, *PPALETTEENTRY, *LPPALETTEENTRY;


typedef struct tagLOGPALETTE {
    WORD palVersion;
    WORD palNumEntries;
    PALETTEENTRY palPalEntry[1];
} LOGPALETTE, *PLOGPALETTE, *NPLOGPALETTE, *LPLOGPALETTE;





typedef struct tagLOGFONTA
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    CHAR lfFaceName[32];
} LOGFONTA, *PLOGFONTA, *NPLOGFONTA, *LPLOGFONTA;

typedef struct tagLOGFONTW
{
    LONG lfHeight;
    LONG lfWidth;
    LONG lfEscapement;
    LONG lfOrientation;
    LONG lfWeight;
    BYTE lfItalic;
    BYTE lfUnderline;
    BYTE lfStrikeOut;
    BYTE lfCharSet;
    BYTE lfOutPrecision;
    BYTE lfClipPrecision;
    BYTE lfQuality;
    BYTE lfPitchAndFamily;
    WCHAR lfFaceName[32];
} LOGFONTW, *PLOGFONTW, *NPLOGFONTW, *LPLOGFONTW;
# 263 "/usr/local/arm-wince-pe/include/wingdi.h" 3
typedef DWORD COLORREF;

typedef struct tagRGBQUAD {
        BYTE rgbBlue;
        BYTE rgbGreen;
        BYTE rgbRed;
        BYTE rgbReserved;
} RGBQUAD, *LPRGBQUAD;

typedef struct tagBITMAP {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    LPVOID bmBits;
} BITMAP, *PBITMAP, *LPBITMAP;

typedef struct tagBITMAPINFOHEADER {
        DWORD biSize;
        LONG biWidth;
        LONG biHeight;
        WORD biPlanes;
        WORD biBitCount;
        DWORD biCompression;
        DWORD biSizeImage;
        LONG biXPelsPerMeter;
        LONG biYPelsPerMeter;
        DWORD biClrUsed;
        DWORD biClrImportant;
} BITMAPINFOHEADER, *LPBITMAPINFOHEADER, *PBITMAPINFOHEADER;

typedef struct tagBITMAPINFO {
    BITMAPINFOHEADER bmiHeader;
    RGBQUAD bmiColors[1];
} BITMAPINFO, *LPBITMAPINFO, *PBITMAPINFO;

# 1 "/usr/local/arm-wince-pe/include/pshpack2.h" 1 3
# 30 "/usr/local/arm-wince-pe/include/pshpack2.h" 3
#pragma pack(2)
# 302 "/usr/local/arm-wince-pe/include/wingdi.h" 2 3
typedef struct _tagBITMAPFILEHEADER {
    WORD bfType;
    DWORD bfSize;
    WORD bfReserved1;
    WORD bfReserved2;
    DWORD bfOffBits;
} BITMAPFILEHEADER, *LPBITMAPFILEHEADER, *PBITMAPFILEHEADER;
# 1 "/usr/local/arm-wince-pe/include/poppack.h" 1 3
# 34 "/usr/local/arm-wince-pe/include/poppack.h" 3
#pragma pack()
# 310 "/usr/local/arm-wince-pe/include/wingdi.h" 2 3

typedef struct tagHANDLETABLE {
    HGDIOBJ objectHandle[1];
} HANDLETABLE, *PHANDLETABLE, *LPHANDLETABLE;

 HDC CreateCompatibleDC(HDC);
 BOOL DeleteDC(HDC);
 BOOL DeleteObject(HGDIOBJ);
 COLORREF GetBkColor(HDC);
 int GetBkMode(HDC);
 HGDIOBJ GetCurrentObject(HDC,UINT);
 int GetDeviceCaps(HDC,int);
 int GetObjectA(HGDIOBJ, int, LPVOID);
 int GetObjectW(HGDIOBJ, int, LPVOID);
 DWORD GetObjectType(HGDIOBJ h);
 HGDIOBJ GetStockObject(int);
 COLORREF GetTextColor(HDC);
 HGDIOBJ SelectObject(HDC,HGDIOBJ);
 COLORREF SetBkColor(HDC,COLORREF);
 int SetBkMode(HDC,int);
 COLORREF SetTextColor(HDC,COLORREF);
# 349 "/usr/local/arm-wince-pe/include/wingdi.h" 3
# 1 "/usr/local/arm-wince-pe/include/pshpack1.h" 1 3
# 30 "/usr/local/arm-wince-pe/include/pshpack1.h" 3
#pragma pack(1)
# 350 "/usr/local/arm-wince-pe/include/wingdi.h" 2 3
typedef struct tagRGBTRIPLE {
        BYTE rgbtBlue;
        BYTE rgbtGreen;
        BYTE rgbtRed;
} RGBTRIPLE;
# 1 "/usr/local/arm-wince-pe/include/poppack.h" 1 3
# 34 "/usr/local/arm-wince-pe/include/poppack.h" 3
#pragma pack()
# 356 "/usr/local/arm-wince-pe/include/wingdi.h" 2 3

typedef struct tagCOLORADJUSTMENT {
    WORD caSize;
    WORD caFlags;
    WORD caIlluminantIndex;
    WORD caRedGamma;
    WORD caGreenGamma;
    WORD caBlueGamma;
    WORD caReferenceBlack;
    WORD caReferenceWhite;
    SHORT caContrast;
    SHORT caBrightness;
    SHORT caColorfulness;
    SHORT caRedGreenTint;
} COLORADJUSTMENT, *PCOLORADJUSTMENT, *LPCOLORADJUSTMENT;







typedef struct _devicemodeA {
    BYTE dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    short dmOrientation;
    short dmPaperSize;
    short dmPaperLength;
    short dmPaperWidth;
    short dmScale;
    short dmCopies;
    short dmDefaultSource;
    short dmPrintQuality;
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    BYTE dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    DWORD dmDisplayFlags;
    DWORD dmDisplayFrequency;
    DWORD dmICMMethod;
    DWORD dmICMIntent;
    DWORD dmMediaType;
    DWORD dmDitherType;
    DWORD dmICCManufacturer;
    DWORD dmICCModel;
    DWORD dmPanningWidth;
    DWORD dmPanningHeight;
} DEVMODEA, *PDEVMODEA, *NPDEVMODEA, *LPDEVMODEA;

typedef struct _devicemodeW {
    WCHAR dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    short dmOrientation;
    short dmPaperSize;
    short dmPaperLength;
    short dmPaperWidth;
    short dmScale;
    short dmCopies;
    short dmDefaultSource;
    short dmPrintQuality;
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    WCHAR dmFormName[32];
    WORD dmLogPixels;
    DWORD dmBitsPerPel;
    DWORD dmPelsWidth;
    DWORD dmPelsHeight;
    DWORD dmDisplayFlags;
    DWORD dmDisplayFrequency;
# 450 "/usr/local/arm-wince-pe/include/wingdi.h" 3
} DEVMODEW, *PDEVMODEW, *NPDEVMODEW, *LPDEVMODEW;







typedef DEVMODEA DEVMODE;
typedef PDEVMODEA PDEVMODE;
typedef NPDEVMODEA NPDEVMODE;
typedef LPDEVMODEA LPDEVMODE;
# 505 "/usr/local/arm-wince-pe/include/wingdi.h" 3
 BOOL SetViewportOrgEx(HDC,int,int,LPPOINT);
# 538 "/usr/local/arm-wince-pe/include/wingdi.h" 3
 HBRUSH CreatePatternBrush(HBITMAP);
 HPEN CreatePen(int, int, COLORREF);
 BOOL FillRgn(HDC, HRGN, HBRUSH);
 int SetROP2(HDC, int);
# 555 "/usr/local/arm-wince-pe/include/wingdi.h" 3
typedef struct tagLOGBRUSH {
    UINT lbStyle;
    COLORREF lbColor;
    LONG lbHatch;
} LOGBRUSH, *PLOGBRUSH, *NPLOGBRUSH, *LPLOGBRUSH;

typedef struct tagLOGPEN {
    UINT lopnStyle;
    POINT lopnWidth;
    COLORREF lopnColor;
} LOGPEN, *PLOGPEN, *NPLOGPEN, *LPLOGPEN;

 HBRUSH CreateDIBPatternBrushPt(const void *,UINT);
 HPEN CreatePenIndirect(const LOGPEN *);
 HBRUSH CreateSolidBrush(COLORREF);
 BOOL DrawEdge(HDC,RECT *,UINT,UINT);
 BOOL DrawFocusRect(HDC,const RECT *);
 BOOL Ellipse(HDC,int,int,int,int);
 int FillRect(HDC,const RECT *,HBRUSH);
 COLORREF GetPixel(HDC,int,int);
 HBRUSH GetSysColorBrush(int);
 BOOL Polygon(HDC,const POINT *,int);
 BOOL Polyline(HDC,const POINT *,int);
 BOOL Rectangle(HDC,int,int,int,int);
 BOOL RoundRect(HDC,int,int,int,int,int,int);
 BOOL SetBrushOrgEx(HDC,int,int,LPPOINT);
 COLORREF SetPixel(HDC,int,int,COLORREF);




 HBITMAP CreateBitmap(int,int,UINT,UINT,const void *);
 HBITMAP CreateCompatibleBitmap(HDC,int,int);





typedef struct tagBITMAPCOREHEADER {
        DWORD bcSize;
        WORD bcWidth;
        WORD bcHeight;
        WORD bcPlanes;
        WORD bcBitCount;
} BITMAPCOREHEADER, *LPBITMAPCOREHEADER, *PBITMAPCOREHEADER;

typedef struct tagBITMAPCOREINFO {
    BITMAPCOREHEADER bmciHeader;
    RGBTRIPLE bmciColors[1];
} BITMAPCOREINFO, *LPBITMAPCOREINFO, *PBITMAPCOREINFO;




typedef struct _RGNDATAHEADER {
    DWORD dwSize;
    DWORD iType;
    DWORD nCount;
    DWORD nRgnSize;
    RECT rcBound;
} RGNDATAHEADER, *PRGNDATAHEADER;

typedef struct _RGNDATA {
    RGNDATAHEADER rdh;
    char Buffer[1];
} RGNDATA, *PRGNDATA, *NPRGNDATA, *LPRGNDATA;
# 638 "/usr/local/arm-wince-pe/include/wingdi.h" 3
 int CombineRgn(HRGN,HRGN,HRGN,int);
 HRGN CreateRectRgnIndirect(const RECT *);
 BOOL EqualRgn(HRGN,HRGN);
 int ExcludeClipRect(HDC,int,int,int,int);
 int GetClipBox(HDC,LPRECT);
 int GetClipRgn(HDC,HRGN);
 DWORD GetRegionData(HRGN,DWORD,LPRGNDATA);
 int GetRgnBox(HRGN,RECT *);
 int IntersectClipRect(HDC,int,int,int,int);
 int OffsetRgn(HRGN,int,int);
 BOOL PtInRegion(HRGN,int,int);
 BOOL RectInRegion(HRGN,const RECT *);
 int SelectClipRgn(HDC,HRGN);




 HRGN CreateRectRgn(int, int, int, int);
 BOOL RectVisible(HDC, const RECT *);
 BOOL SetRectRgn(HRGN, int, int, int, int);
# 679 "/usr/local/arm-wince-pe/include/wingdi.h" 3
 BOOL BitBlt(HDC,int,int,int,int,HDC,int,int,DWORD);







 BOOL MaskBlt(HDC,int,int,int,int,HDC,int,int,HBITMAP,int,int,DWORD);
 BOOL PatBlt(HDC,int,int,int,int,DWORD);
 BOOL StretchBlt(HDC,int,int,int,int,HDC,int,int,int,int,DWORD);




 BOOL TransparentImage(HDC,int,int,int,int,HANDLE,int,int,int,int,COLORREF);
# 798 "/usr/local/arm-wince-pe/include/wingdi.h" 3
typedef struct tagTEXTMETRICA
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    char tmFirstChar;
    char tmLastChar;
    char tmDefaultChar;
    char tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
} TEXTMETRICA, *PTEXTMETRICA, *NPTEXTMETRICA, *LPTEXTMETRICA;

typedef struct tagTEXTMETRICW
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
} TEXTMETRICW, *PTEXTMETRICW, *NPTEXTMETRICW, *LPTEXTMETRICW;







typedef TEXTMETRICA TEXTMETRIC;
typedef PTEXTMETRICA PTEXTMETRIC;
typedef NPTEXTMETRICA NPTEXTMETRIC;
typedef LPTEXTMETRICA LPTEXTMETRIC;







typedef struct tagNEWTEXTMETRICA
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    BYTE tmFirstChar;
    BYTE tmLastChar;
    BYTE tmDefaultChar;
    BYTE tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
} NEWTEXTMETRICA, *PNEWTEXTMETRICA, *NPNEWTEXTMETRICA, *LPNEWTEXTMETRICA;

typedef struct tagNEWTEXTMETRICW
{
    LONG tmHeight;
    LONG tmAscent;
    LONG tmDescent;
    LONG tmInternalLeading;
    LONG tmExternalLeading;
    LONG tmAveCharWidth;
    LONG tmMaxCharWidth;
    LONG tmWeight;
    LONG tmOverhang;
    LONG tmDigitizedAspectX;
    LONG tmDigitizedAspectY;
    WCHAR tmFirstChar;
    WCHAR tmLastChar;
    WCHAR tmDefaultChar;
    WCHAR tmBreakChar;
    BYTE tmItalic;
    BYTE tmUnderlined;
    BYTE tmStruckOut;
    BYTE tmPitchAndFamily;
    BYTE tmCharSet;
    DWORD ntmFlags;
    UINT ntmSizeEM;
    UINT ntmCellHeight;
    UINT ntmAvgWidth;
} NEWTEXTMETRICW, *PNEWTEXTMETRICW, *NPNEWTEXTMETRICW, *LPNEWTEXTMETRICW;







typedef NEWTEXTMETRICA NEWTEXTMETRIC;
typedef PNEWTEXTMETRICA PNEWTEXTMETRIC;
typedef NPNEWTEXTMETRICA NPNEWTEXTMETRIC;
typedef LPNEWTEXTMETRICA LPNEWTEXTMETRIC;


 int AddFontResourceA(LPWSTR);
 int AddFontResourceW(LPCWSTR);
 HFONT CreateFontIndirectA(const LOGFONTA *);
 HFONT CreateFontIndirectW(const LOGFONTW *);
 BOOL ExtTextOutA(HDC,int,int,UINT,const RECT *,LPCSTR,UINT,const INT *);
 BOOL ExtTextOutW(HDC,int,int,UINT,const RECT *,LPCWSTR,UINT,const INT *);
 BOOL GetTextExtentExPointA(HDC,LPCSTR,int,int,LPINT,LPINT,LPSIZE);
 BOOL GetTextExtentExPointW(HDC,LPCWSTR,int,int,LPINT,LPINT,LPSIZE);
 BOOL GetTextMetricsA(HDC,LPTEXTMETRICA);
 BOOL GetTextMetricsW(HDC,LPTEXTMETRICW);
 BOOL RemoveFontResourceA(LPCSTR);
 BOOL RemoveFontResourceW(LPCWSTR);
# 1008 "/usr/local/arm-wince-pe/include/wingdi.h" 3
 int DrawTextA(HDC,LPCSTR,int,RECT *,UINT);
 int DrawTextW(HDC,LPCWSTR,int,RECT *,UINT);
# 1021 "/usr/local/arm-wince-pe/include/wingdi.h" 3
typedef struct tagENUMLOGFONT
{
    LOGFONTA elfLogFont;
    TCHAR elfFullName[64];
    TCHAR elfStyle[32];
} ENUMLOGFONT, * LPENUMLOGFONT;

typedef int (* FONTENUMPROC)(const LOGFONTA *, const TEXTMETRIC *, DWORD, LPARAM);

 int EnumFontFamiliesA(HDC,LPCSTR,FONTENUMPROC,LPARAM);
 int EnumFontFamiliesW(HDC,LPCWSTR,FONTENUMPROC,LPARAM);
 int EnumFontsA(HDC,LPCSTR,FONTENUMPROC,LPARAM);
 int EnumFontsW(HDC,LPCWSTR,FONTENUMPROC,LPARAM);
 int GetTextFaceA(HDC,int,LPSTR);
 int GetTextFaceW(HDC,int,LPWSTR);
# 1050 "/usr/local/arm-wince-pe/include/wingdi.h" 3
 BOOL EnableEUDC(BOOL);




typedef struct tagFONTSIGNATURE
{
    DWORD fsUsb[4];
    DWORD fsCsb[2];
} FONTSIGNATURE, *PFONTSIGNATURE, *LPFONTSIGNATURE;

typedef struct tagCHARSETINFO
{
    UINT ciCharset;
    UINT ciACP;
    FONTSIGNATURE fs;
} CHARSETINFO, *PCHARSETINFO, *NPCHARSETINFO, *LPCHARSETINFO;





 BOOL TranslateCharsetInfo(DWORD *, LPCHARSETINFO, DWORD dwFlags);







typedef struct tagDIBSECTION {
    BITMAP dsBm;
    BITMAPINFOHEADER dsBmih;
    DWORD dsBitfields[3];
    HANDLE dshSection;
    DWORD dsOffset;
} DIBSECTION, *LPDIBSECTION, *PDIBSECTION;

typedef struct tagDIBSECTION2 {
    BITMAP dsBm;
    BITMAPINFOHEADER dsBmih;
    DWORD dsBitfields[3];
    HANDLE dshSection;
    DWORD dsOffset;
    DWORD dsAlphaBitfield;
} DIBSECTION2, *LPDIBSECTION2, *PDIBSECTION2;

 HBITMAP CreateDIBSection(HDC,const BITMAPINFO *,UINT,void **,HANDLE,DWORD);




 BOOL RestoreDC(HDC,int);
 int SaveDC(HDC);




 HDC CreateDCA(LPCSTR, LPCSTR , LPCSTR , const DEVMODEA *);
 HDC CreateDCW(LPCWSTR, LPCWSTR , LPCWSTR , const DEVMODEW *);
 int ExtEscape(HDC, int, int, LPCSTR, int, LPSTR);
# 1121 "/usr/local/arm-wince-pe/include/wingdi.h" 3
 HPALETTE CreatePalette(const LOGPALETTE *);
 UINT GetNearestPaletteIndex(HPALETTE, COLORREF);
 UINT GetPaletteEntries(HPALETTE, UINT, UINT, LPPALETTEENTRY);
 UINT GetSystemPaletteEntries(HDC, UINT, UINT, LPPALETTEENTRY);
 UINT RealizePalette(HDC);
 HPALETTE SelectPalette(HDC, HPALETTE, BOOL);
 UINT SetPaletteEntries(HPALETTE, UINT, UINT, const PALETTEENTRY *);




 COLORREF GetNearestColor(HDC, COLORREF);
# 1141 "/usr/local/arm-wince-pe/include/wingdi.h" 3
typedef BOOL (* ABORTPROC)(HDC, int);




typedef struct _DOCINFOA {
    int cbSize;
    LPCSTR lpszDocName;
    LPCSTR lpszOutput;
    LPCSTR lpszDatatype;
    DWORD fwType;
} DOCINFOA, *LPDOCINFOA;

typedef struct _DOCINFOW {
    int cbSize;
    LPCWSTR lpszDocName;
    LPCWSTR lpszOutput;
    LPCWSTR lpszDatatype;
    DWORD fwType;
} DOCINFOW, *LPDOCINFOW;





typedef DOCINFOA DOCINFO;
typedef LPDOCINFOA LPDOCINFO;


 int AbortDoc(HDC);
 int EndDoc(HDC);
 int EndPage(HDC);
 int SetAbortProc(HDC, ABORTPROC);
 int StartDocA(HDC, const DOCINFOA *);
 int StartDocW(HDC, const DOCINFOW *);
 int StartPage(HDC);
# 22 "/usr/local/arm-wince-pe/include/windows.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/winuser.h" 1 3
# 18 "/usr/local/arm-wince-pe/include/winuser.h" 3
# 1 "/usr/local/arm-wince-pe/include/mmsystem.h" 1 3
# 18 "/usr/local/arm-wince-pe/include/mmsystem.h" 3
# 1 "/usr/local/arm-wince-pe/include/pshpack1.h" 1 3
# 30 "/usr/local/arm-wince-pe/include/pshpack1.h" 3
#pragma pack(1)
# 19 "/usr/local/arm-wince-pe/include/mmsystem.h" 2 3
# 51 "/usr/local/arm-wince-pe/include/mmsystem.h" 3
typedef UINT MMVERSION;

typedef UINT MMRESULT;




typedef UINT *LPUINT;



typedef struct mmtime_tag
{
    UINT wType;
    union
    {
    DWORD ms;
    DWORD sample;
    DWORD cb;
    DWORD ticks;


    struct
    {
        BYTE hour;
        BYTE min;
        BYTE sec;
        BYTE frame;
        BYTE fps;
        BYTE dummy;



    } smpte;


    struct
    {
        DWORD songptrpos;
    } midi;
    } u;
} MMTIME, *PMMTIME, *NPMMTIME, *LPMMTIME;
# 190 "/usr/local/arm-wince-pe/include/mmsystem.h" 3
typedef void ( DRVCALLBACK)(HANDLE hdrvr, UINT uMsg, DWORD dwUser, DWORD dw1, DWORD dw2);

typedef DRVCALLBACK *LPDRVCALLBACK;
typedef DRVCALLBACK *PDRVCALLBACK;




BOOL sndPlaySoundW( LPCWSTR lpszSoundName, UINT fuSound );






BOOL PlaySoundA( LPCSTR pszSound, HMODULE hmod, DWORD fdwSound);
BOOL PlaySoundW(LPCWSTR pszSound, HMODULE hmod, DWORD fdwSound);
# 257 "/usr/local/arm-wince-pe/include/mmsystem.h" 3
typedef HANDLE HDRVR;
typedef HANDLE HMMIO;
# 278 "/usr/local/arm-wince-pe/include/mmsystem.h" 3
struct HWAVE__ { int unused; }; typedef struct HWAVE__ *HWAVE;
struct HWAVEIN__ { int unused; }; typedef struct HWAVEIN__ *HWAVEIN;
struct HWAVEOUT__ { int unused; }; typedef struct HWAVEOUT__ *HWAVEOUT;

typedef HWAVEIN *LPHWAVEIN;
typedef HWAVEOUT *LPHWAVEOUT;
typedef DRVCALLBACK WAVECALLBACK;
typedef WAVECALLBACK *LPWAVECALLBACK;
# 309 "/usr/local/arm-wince-pe/include/mmsystem.h" 3
typedef struct {
    WORD wFormatTag;
    WORD nChannels;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
} WAVEFORMAT;
typedef WAVEFORMAT *PWAVEFORMAT;
typedef WAVEFORMAT *NPWAVEFORMAT;
typedef WAVEFORMAT *LPWAVEFORMAT;
typedef const WAVEFORMAT *LPCWAVEFORMAT;







typedef struct tagPCMWAVEFORMAT {
    WAVEFORMAT wf;
    WORD wBitsPerSample;
} PCMWAVEFORMAT;
typedef PCMWAVEFORMAT *PPCMWAVEFORMAT;
typedef PCMWAVEFORMAT *NPPCMWAVEFORMAT;
typedef PCMWAVEFORMAT *LPPCMWAVEFORMAT;



typedef struct wavehdr_tag {
    LPSTR lpData;
    DWORD dwBufferLength;
    DWORD dwBytesRecorded;
    DWORD dwUser;
    DWORD dwFlags;
    DWORD dwLoops;
    struct wavehdr_tag *lpNext;
    DWORD reserved;
} WAVEHDR, *PWAVEHDR, *NPWAVEHDR, *LPWAVEHDR;
# 356 "/usr/local/arm-wince-pe/include/mmsystem.h" 3
typedef struct tagWAVEOUTCAPS {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    TCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
    DWORD dwSupport;
} WAVEOUTCAPS, *PWAVEOUTCAPS, *NPWAVEOUTCAPS, *LPWAVEOUTCAPS;
# 378 "/usr/local/arm-wince-pe/include/mmsystem.h" 3
typedef struct tagWAVEINCAPS {
    WORD wMid;
    WORD wPid;
    MMVERSION vDriverVersion;
    TCHAR szPname[32];
    DWORD dwFormats;
    WORD wChannels;
    WORD wReserved1;
} WAVEINCAPS, *PWAVEINCAPS, *NPWAVEINCAPS, *LPWAVEINCAPS;
# 412 "/usr/local/arm-wince-pe/include/mmsystem.h" 3
typedef struct tWAVEFORMATEX
{
    WORD wFormatTag;
    WORD nChannels;
    DWORD nSamplesPerSec;
    DWORD nAvgBytesPerSec;
    WORD nBlockAlign;
    WORD wBitsPerSample;
    WORD cbSize;

} WAVEFORMATEX, *PWAVEFORMATEX, *NPWAVEFORMATEX, *LPWAVEFORMATEX;
typedef const WAVEFORMATEX *LPCWAVEFORMATEX;





UINT waveOutGetNumDevs(void);
MMRESULT waveOutGetDevCaps(UINT uDeviceID, LPWAVEOUTCAPS pwoc, UINT cbwoc);
MMRESULT waveOutGetVolume(HWAVEOUT hwo, LPDWORD pdwVolume);
MMRESULT waveOutSetVolume(HWAVEOUT hwo, DWORD dwVolume);
MMRESULT waveOutGetErrorText(MMRESULT mmrError, LPTSTR pszText, UINT cchText);
MMRESULT waveOutClose(HWAVEOUT hwo);
MMRESULT waveOutPrepareHeader(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh);
MMRESULT waveOutUnprepareHeader(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh);
MMRESULT waveOutWrite(HWAVEOUT hwo, LPWAVEHDR pwh, UINT cbwh);
MMRESULT waveOutPause(HWAVEOUT hwo);
MMRESULT waveOutRestart(HWAVEOUT hwo);
MMRESULT waveOutReset(HWAVEOUT hwo);
MMRESULT waveOutBreakLoop(HWAVEOUT hwo);
MMRESULT waveOutGetPosition(HWAVEOUT hwo, LPMMTIME pmmt, UINT cbmmt);
MMRESULT waveOutGetPitch(HWAVEOUT hwo, LPDWORD pdwPitch);
MMRESULT waveOutSetPitch(HWAVEOUT hwo, DWORD dwPitch);
MMRESULT waveOutGetPlaybackRate(HWAVEOUT hwo, LPDWORD pdwRate);
MMRESULT waveOutSetPlaybackRate(HWAVEOUT hwo, DWORD dwRate);
MMRESULT waveOutGetID(HWAVEOUT hwo, LPUINT puDeviceID);
MMRESULT waveOutMessage(HWAVEOUT hwo, UINT uMsg, DWORD dw1, DWORD dw2);
MMRESULT waveOutOpen(LPHWAVEOUT phwo, UINT uDeviceID,
    LPCWAVEFORMATEX pwfx, DWORD dwCallback, DWORD dwInstance, DWORD fdwOpen);


UINT waveInGetNumDevs(void);
MMRESULT waveInGetDevCaps(UINT uDeviceID, LPWAVEINCAPS pwic, UINT cbwic);
MMRESULT waveInGetErrorText(MMRESULT mmrError, LPTSTR pszText, UINT cchText);
MMRESULT waveInClose(HWAVEIN hwi);
MMRESULT waveInPrepareHeader(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh);
MMRESULT waveInUnprepareHeader(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh);
MMRESULT waveInAddBuffer(HWAVEIN hwi, LPWAVEHDR pwh, UINT cbwh);
MMRESULT waveInStart(HWAVEIN hwi);
MMRESULT waveInStop(HWAVEIN hwi);
MMRESULT waveInReset(HWAVEIN hwi);
MMRESULT waveInGetPosition(HWAVEIN hwi, LPMMTIME pmmt, UINT cbmmt);
MMRESULT waveInGetID(HWAVEIN hwi, LPUINT puDeviceID);
MMRESULT waveInMessage(HWAVEIN hwi, UINT uMsg, DWORD dw1, DWORD dw2);
MMRESULT waveInOpen(LPHWAVEIN phwi, UINT uDeviceID,
    LPCWAVEFORMATEX pwfx, DWORD dwCallback, DWORD dwInstance, DWORD fdwOpen);
# 479 "/usr/local/arm-wince-pe/include/mmsystem.h" 3
# 1 "/usr/local/arm-wince-pe/include/poppack.h" 1 3
# 34 "/usr/local/arm-wince-pe/include/poppack.h" 3
#pragma pack()
# 480 "/usr/local/arm-wince-pe/include/mmsystem.h" 2 3
# 19 "/usr/local/arm-wince-pe/include/winuser.h" 2 3


typedef struct tagMSG {
    HWND hwnd;
    UINT message;
    WPARAM wParam;
    LPARAM lParam;
    DWORD time;
    POINT pt;
} MSG, *PMSG, *NPMSG, *LPMSG;
# 63 "/usr/local/arm-wince-pe/include/winuser.h" 3
typedef LRESULT (* WNDPROC)(HWND, UINT, WPARAM, LPARAM);

typedef BOOL (* DLGPROC)(HWND, UINT, WPARAM, LPARAM);


typedef void (* TIMERPROC)(HWND, UINT, UINT, DWORD);



typedef struct tagWNDCLASSA {
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCSTR lpszMenuName;
    LPCSTR lpszClassName;
} WNDCLASSA, *PWNDCLASSA, *LPWNDCLASSA;

typedef struct tagWNDCLASSW {
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCWSTR lpszMenuName;
    LPCWSTR lpszClassName;
} WNDCLASSW, *PWNDCLASSW, *LPWNDCLASSW;







typedef WNDCLASSA WNDCLASS;
typedef PWNDCLASSA PWNDCLASS;
typedef LPWNDCLASSA LPWNDCLASS;
typedef PWNDCLASSA PWNDCLASS;
# 465 "/usr/local/arm-wince-pe/include/winuser.h" 3
 BOOL DrawFrameControl(HDC, LPRECT, UINT, UINT);
# 528 "/usr/local/arm-wince-pe/include/winuser.h" 3

UINT

RegisterWindowMessageA(
    LPCSTR lpString);

UINT

RegisterWindowMessageW(
    LPCWSTR lpString);







typedef struct tagCREATESTRUCTA {
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCSTR lpszName;
    LPCSTR lpszClass;
    DWORD dwExStyle;
} CREATESTRUCTA, *PCREATESTRUCTA, *LPCREATESTRUCTA;

typedef struct tagCREATESTRUCTW {
    LPVOID lpCreateParams;
    HINSTANCE hInstance;
    HMENU hMenu;
    HWND hwndParent;
    int cy;
    int cx;
    int y;
    int x;
    LONG style;
    LPCWSTR lpszName;
    LPCWSTR lpszClass;
    DWORD dwExStyle;
} CREATESTRUCTW, *PCREATESTRUCTW, *LPCREATESTRUCTW;






typedef CREATESTRUCTA CREATESTRUCT;
typedef LPCREATESTRUCTA LPCREATESTRUCT;
typedef PCREATESTRUCTA LPCREATESTRUCT;




typedef struct tagSTYLESTRUCT
{
    DWORD styleOld;
    DWORD styleNew;
} STYLESTRUCT, * LPSTYLESTRUCT;

typedef void * HDWP;




typedef struct tagWINDOWPOS {
    HWND hwnd;
    HWND hwndInsertAfter;
    int x;
    int y;
    int cx;
    int cy;
    UINT flags;
} WINDOWPOS, *LPWINDOWPOS, *PWINDOWPOS;
# 632 "/usr/local/arm-wince-pe/include/winuser.h" 3

BOOL

PostMessageA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);

BOOL

PostMessageW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
# 656 "/usr/local/arm-wince-pe/include/winuser.h" 3

BOOL

PostThreadMessageA(
    DWORD idThread,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);

BOOL

PostThreadMessageW(
    DWORD idThread,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);






void

PostQuitMessage(
    int nExitCode
    );



LRESULT

SendMessageA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);

LRESULT

SendMessageW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);








BOOL

SendNotifyMessageA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);

BOOL

SendNotifyMessageW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);








BOOL

InSendMessage(
        void);


DWORD

GetQueueStatus(
        UINT flags);



BOOL

GetMessageA(
    LPMSG lpMsg,
    HWND hWnd ,
    UINT wMsgFilterMin,
    UINT wMsgFilterMax);

BOOL

GetMessageW(
    LPMSG lpMsg,
    HWND hWnd ,
    UINT wMsgFilterMin,
    UINT wMsgFilterMax);
# 768 "/usr/local/arm-wince-pe/include/winuser.h" 3

BOOL

PeekMessageW(
    PMSG pMsg,
    HWND hWnd ,
    UINT wMsgFilterMin,
    UINT wMsgFilterMax,
    UINT wRemoveMsg);

BOOL

PeekMessageA(
    PMSG pMsg,
    HWND hWnd ,
    UINT wMsgFilterMin,
    UINT wMsgFilterMax,
    UINT wRemoveMsg);
# 801 "/usr/local/arm-wince-pe/include/winuser.h" 3
BOOL

TranslateMessage(
    const MSG *pMsg
    );



LONG

DispatchMessageA(
    const MSG *lpMsg);

LONG

DispatchMessageW(
    const MSG *lpMsg);






DWORD

GetMessagePos(
        void
        );






UINT

GetMessageSource(
        void
        );


DWORD

MsgWaitForMultipleObjectsEx(
    DWORD nCount,
    LPHANDLE pHandles,
    DWORD dwMilliseconds,
    DWORD dwWakeMask,
    DWORD dwFlags);








DWORD

MsgWaitForMultipleObjects(
    DWORD nCount,
    LPHANDLE pHandles,
    BOOL fWaitAll,
    DWORD dwMilliseconds,
    DWORD dwWakeMask);
# 905 "/usr/local/arm-wince-pe/include/winuser.h" 3
HWND

GetCapture(
    void);

HWND

SetCapture(
    HWND hWnd);

BOOL

ReleaseCapture(
    void);




BOOL

MoveWindow(
    HWND hWnd,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    BOOL bRepaint);

int

SetWindowRgn (
    HWND hwnd,
        HRGN hrgn,
        BOOL bRedraw
    );

int

GetWindowRgn (
    HWND hwnd,
        HRGN hrgn
    );

BOOL

SetWindowPos (
    HWND hwnd,
    HWND hwndInsertAfter,
    int x,
    int y,
    int dx,
    int dy,
    UINT fuFlags
    );

BOOL

GetWindowRect (
    HWND hwnd,
    LPRECT prc
    );

int

GetWindowTextLengthA(
    HWND hWnd);

int

GetWindowTextLengthW(
    HWND hWnd);






BOOL

GetClientRect (
    HWND hwnd,
    LPRECT prc
    );

BOOL

AdjustWindowRectEx (
    LPRECT prc,
    DWORD dwStyle,
    BOOL bMenu,
    DWORD dwExStyle
    );

BOOL

ValidateRect(
    HWND hWnd ,
    const RECT *lpRect);

BOOL

InvalidateRect (
    HWND hwnd,
    LPCRECT prc,
    BOOL fErase
    );

HWND

GetWindow (
    HWND hwnd,
    UINT uCmd
    );

BOOL

BringWindowToTop(
    HWND hWnd);

HDWP BeginDeferWindowPos(
        int nNumWindows);

HDWP DeferWindowPos(
   HDWP hWinPosInfo,
   HWND hWnd,
   HWND hWndInsertAfter,
   int x,
   int y,
   int cx,
   int cy,
   UINT uFlags
   );

BOOL EndDeferWindowPos(
  HDWP hWinPosInfo
  );
# 1071 "/usr/local/arm-wince-pe/include/winuser.h" 3
int

ScrollWindowEx(
    HWND hWnd,
    int dx,
    int dy,
    const RECT *prcScroll,
    const RECT *prcClip ,
    HRGN hrgnUpdate,
    LPRECT prcUpdate,
    UINT flags);







BOOL

ScrollDC(
    HDC hDC,
    int dx,
    int dy,
    const RECT *lprcScroll,
    const RECT *lprcClip ,
    HRGN hrgnUpdate,
    LPRECT lprcUpdate);
# 1149 "/usr/local/arm-wince-pe/include/winuser.h" 3
BOOL

CheckMenuRadioItem(HMENU, UINT, UINT, UINT, UINT);



HBITMAP

LoadBitmapA(
    HINSTANCE hInstance,
    LPCSTR lpBitmapName);

HBITMAP

LoadBitmapW(
    HINSTANCE hInstance,
    LPCWSTR lpBitmapName);
# 1184 "/usr/local/arm-wince-pe/include/winuser.h" 3
int

LoadStringA(
    HINSTANCE hInstance,
    UINT uID,
    LPSTR lpBuffer,
    int nBufferMax);

int

LoadStringW(
    HINSTANCE hInstance,
    UINT uID,
    LPWSTR lpBuffer,
    int nBufferMax);
# 1248 "/usr/local/arm-wince-pe/include/winuser.h" 3
HMENU

LoadMenuA(
    HINSTANCE hInstance,
    LPCSTR lpMenuName);

HMENU

LoadMenuW(
    HINSTANCE hInstance,
    LPCWSTR lpMenuName);






BOOL

DrawMenuBar(
    HWND hWnd);

HMENU

CreateMenu(
    void);


HMENU

CreatePopupMenu(
    void);


BOOL

DestroyMenu(
    HMENU hMenu);


DWORD

CheckMenuItem(
    HMENU hMenu,
    UINT uIDCheckItem,
    UINT uCheck);


BOOL

EnableMenuItem(
    HMENU hMenu,
    UINT uIDEnableItem,
    UINT uEnable);

HMENU

GetSubMenu(
    HMENU hMenu,
    int nPos);

BOOL

InsertMenuA(
    HMENU hMenu,
    UINT uPosition,
    UINT uFlags,
    UINT uIDNewItem,
    LPCSTR lpNewItem
    );

BOOL

InsertMenuW(
    HMENU hMenu,
    UINT uPosition,
    UINT uFlags,
    UINT uIDNewItem,
    LPCWSTR lpNewItem
    );







BOOL

AppendMenuA(
    HMENU hMenu,
    UINT uFlags,
    UINT uIDNewItem,
    LPCSTR lpNewItem
    );

BOOL

AppendMenuW(
    HMENU hMenu,
    UINT uFlags,
    UINT uIDNewItem,
    LPCWSTR lpNewItem
    );






BOOL
 RemoveMenu(
    HMENU hMenu,
    UINT uPosition,
    UINT uFlags);


BOOL

DeleteMenu(
    HMENU hMenu,
    UINT uPosition,
    UINT uFlags);



BOOL

TrackPopupMenu(
    HMENU hMenu,
    UINT uFlags,
    int x,
    int y,
    int nReserved,
    HWND hWnd,
    const RECT *prcRect);

typedef struct tagTPMPARAMS
{
    UINT cbSize;
    RECT rcExclude;
} TPMPARAMS;
typedef TPMPARAMS *LPTPMPARAMS;

BOOL

TrackPopupMenuEx(
    HMENU hmenu,
    UINT uFlags,
    int x,
    int y,
    HWND hwnd,
    LPTPMPARAMS lptpm);
# 1424 "/usr/local/arm-wince-pe/include/winuser.h" 3
typedef struct tagMENUITEMINFOA
{
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    LPSTR dwTypeData;
    UINT cch;
} MENUITEMINFOA, *LPMENUITEMINFOA;
typedef struct tagMENUITEMINFOW
{
    UINT cbSize;
    UINT fMask;
    UINT fType;
    UINT fState;
    UINT wID;
    HMENU hSubMenu;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    LPWSTR dwTypeData;
    UINT cch;
} MENUITEMINFOW, *LPMENUITEMINFOW;




typedef MENUITEMINFOA MENUITEMINFO;
typedef LPMENUITEMINFOA LPMENUITEMINFO;

typedef MENUITEMINFOA const *LPCMENUITEMINFOA;
typedef MENUITEMINFOW const *LPCMENUITEMINFOW;



typedef LPCMENUITEMINFOA LPCMENUITEMINFO;


 
  BOOL
 
GetMenuItemInfoA(
    HMENU,
    UINT,
    BOOL,
    LPMENUITEMINFOA
    );


  BOOL
 
GetMenuItemInfoW(
    HMENU,
    UINT,
    BOOL,
    LPMENUITEMINFOW
    );
# 1495 "/usr/local/arm-wince-pe/include/winuser.h" 3

BOOL

SetMenuItemInfoA(
    HMENU,
    UINT,
    BOOL,
    LPCMENUITEMINFOA
    );

BOOL

SetMenuItemInfoW(
    HMENU,
    UINT,
    BOOL,
    LPCMENUITEMINFOW
    );
# 1553 "/usr/local/arm-wince-pe/include/winuser.h" 3
typedef struct tagACCEL {
    BYTE fVirt;
    WORD key;
    WORD cmd;
        WORD pad;
} ACCEL, *LPACCEL;


HACCEL

LoadAcceleratorsA(
    HINSTANCE hInstance,
    LPCSTR lpTableName);

HACCEL

LoadAcceleratorsW(
    HINSTANCE hInstance,
    LPCWSTR lpTableName);







HACCEL

CreateAcceleratorTableA(
    LPACCEL, int);

HACCEL

CreateAcceleratorTableW(
    LPACCEL, int);






BOOL

DestroyAcceleratorTable(
    HACCEL hAccel);




BOOL

SetSysColors(
    int cElements,
    const INT * lpaElements,
    const COLORREF * lpaRgbValues);




BOOL

SetRect(
    LPRECT lprc,
    int xLeft,
    int yTop,
    int xRight,
    int yBottom);

BOOL

SetRectEmpty(
    LPRECT lprc);

BOOL

CopyRect(
    LPRECT lprcDst,
    const RECT *lprcSrc);

BOOL

InflateRect(
    LPRECT lprc,
    int dx,
    int dy);

BOOL

IntersectRect(
    LPRECT lprcDst,
    const RECT *lprcSrc1,
    const RECT *lprcSrc2);

BOOL

UnionRect(
    LPRECT lprcDst,
    const RECT *lprcSrc1,
    const RECT *lprcSrc2);

BOOL

OffsetRect(
    LPRECT lprc,
    int dx,
    int dy);

BOOL

IsRectEmpty(
    const RECT *lprc);

BOOL

EqualRect(
    const RECT *lprc1,
    const RECT *lprc2);

BOOL

PtInRect(
    const RECT *lprc,
    POINT pt);

BOOL

SubtractRect(
    LPRECT prcDst,
    const RECT *prcSrc1,
    const RECT *prcSrc2);




int

MapWindowPoints(
    HWND hWndFrom,
    HWND hWndTo,
    LPPOINT lpPoints,
    UINT cPoints);

HWND

WindowFromPoint(
    POINT Point);

HWND

ChildWindowFromPoint(
    HWND hWndParent,
    POINT Point);

BOOL

ClientToScreen(
    HWND hWnd,
    LPPOINT lpPoint);

BOOL

ScreenToClient(
    HWND hWnd,
    LPPOINT lpPoint);


typedef struct _PAINTSTRUCT {
    HDC hdc;
    BOOL fErase;
    RECT rcPaint;
    BOOL fRestore;
    BOOL fIncUpdate;
    BYTE rgbReserved[32];
} PAINTSTRUCT;

typedef PAINTSTRUCT *LPPAINTSTRUCT;
typedef PAINTSTRUCT *PPAINTSTRUCT;
typedef const PAINTSTRUCT *LPCPAINTSTRUCT;
typedef const PAINTSTRUCT *PCPAINTSTRUCT;



BOOL

SetWindowTextA(
    HWND hWnd,
    LPCSTR lpString);

BOOL

SetWindowTextW(
    HWND hWnd,
    LPCWSTR lpString);







int

GetWindowTextA(
    HWND hWnd,
    LPSTR lpString,
    int nMaxCount);

int

GetWindowTextW(
    HWND hWnd,
    LPWSTR lpString,
    int nMaxCount);
# 1774 "/usr/local/arm-wince-pe/include/winuser.h" 3
HDC

BeginPaint (
    HWND hwnd,
    LPPAINTSTRUCT pps
    );

BOOL

EndPaint (
    HWND hwnd,
    LPPAINTSTRUCT pps
    );

BOOL

GetUpdateRect(
    HWND hWnd,
    LPRECT lpRect,
    BOOL bErase);

int

GetUpdateRgn(
    HWND hWnd,
    HRGN hRgn,
    BOOL bErase);


HDC

GetDCEx(
    HWND hWnd ,
    HRGN hrgnClip,
    DWORD flags);
# 1825 "/usr/local/arm-wince-pe/include/winuser.h" 3
HWND

GetDesktopWindow(
        void
        );
# 1849 "/usr/local/arm-wince-pe/include/winuser.h" 3
typedef struct tagCOPYDATASTRUCT {
    DWORD dwData;
    DWORD cbData;
    PVOID lpData;
} COPYDATASTRUCT, *PCOPYDATASTRUCT;


BOOL

IsWindow(
    HWND hWnd);

BOOL

IsWindowVisible(
    HWND hWnd);
# 1885 "/usr/local/arm-wince-pe/include/winuser.h" 3
HWND

CreateWindowExA(
    DWORD dwExStyle,
    LPCSTR lpClassName,
    LPCSTR lpWindowName,
    DWORD dwStyle,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    HWND hWndParent ,
    HMENU hMenu,
    HINSTANCE hInstance,
    LPVOID lpParam);

HWND

CreateWindowExW(
    DWORD dwExStyle,
    LPCWSTR lpClassName,
    LPCWSTR lpWindowName,
    DWORD dwStyle,
    int X,
    int Y,
    int nWidth,
    int nHeight,
    HWND hWndParent ,
    HMENU hMenu,
    HINSTANCE hInstance,
    LPVOID lpParam);
# 1941 "/usr/local/arm-wince-pe/include/winuser.h" 3
BOOL

DestroyWindow (
    HWND hwnd
    );





LRESULT

CallWindowProcA(
    WNDPROC lpPrevWndFunc,
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);

LRESULT

CallWindowProcW(
    WNDPROC lpPrevWndFunc,
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
# 2003 "/usr/local/arm-wince-pe/include/winuser.h" 3
DWORD

GetWindowThreadProcessId(
    HWND hWnd,
    LPDWORD lpdwProcessId);


UINT

GetDoubleClickTime (void);


int

GetSystemMetrics(
    int nIndex);



DWORD

GetClassLongA(
    HWND hWnd,
    int nIndex);



DWORD

GetClassLongW(
    HWND hWnd,
    int nIndex);
# 2043 "/usr/local/arm-wince-pe/include/winuser.h" 3

DWORD

SetClassLongA(
    HWND hWnd,
    int nIndex,
    LONG dwNewLong);



DWORD

SetClassLongW(
    HWND hWnd,
    int nIndex,
    LONG dwNewLong);
# 2075 "/usr/local/arm-wince-pe/include/winuser.h" 3
ATOM

RegisterClassA(
    const WNDCLASSA *lpWndClass
    );

ATOM

RegisterClassW (
    const WNDCLASSW *lpWndClass
    );
# 2096 "/usr/local/arm-wince-pe/include/winuser.h" 3

BOOL

UnregisterClassA(
    LPCSTR lpClassName,
    HINSTANCE hInstance);



BOOL

UnregisterClassW(
    LPCWSTR lpClassName,
    HINSTANCE hInstance);
# 2118 "/usr/local/arm-wince-pe/include/winuser.h" 3
BOOL

GetClassInfoA(
    HINSTANCE hInstance,
    LPCSTR lpClassName,
    LPWNDCLASSA lpWndClass);

BOOL

GetClassInfoW(
    HINSTANCE hInstance,
    LPCWSTR lpClassName,
    LPWNDCLASSW lpWndClass);
# 2140 "/usr/local/arm-wince-pe/include/winuser.h" 3
BOOL

EnableWindow(
    HWND hWnd,
    BOOL bEnable);

BOOL

IsWindowEnabled(
    HWND hWnd);
# 2195 "/usr/local/arm-wince-pe/include/winuser.h" 3
DWORD

GetSysColor(
    int nIndex);

HDC

GetDC (
    HWND hwnd
    );


HDC

GetWindowDC (
    HWND hwnd
    );

int

ReleaseDC (
    HWND hwnd,
    HDC hdc
    );







BOOL

GetMouseMovePoints(
        PPOINT pptBuf,
        UINT nBufPoints,
        UINT *pnPointsRetrieved
        );
# 2245 "/usr/local/arm-wince-pe/include/winuser.h" 3
void

mouse_event(
        DWORD dwFlags,
        DWORD dx,
        DWORD dy,
        DWORD cButtons,
        DWORD dwExtraInfo);



typedef struct tagMOUSEINPUT {
    LONG dx;
    LONG dy;
    DWORD mouseData;
    DWORD dwFlags;
    DWORD time;
    DWORD dwExtraInfo;
} MOUSEINPUT, *PMOUSEINPUT, * LPMOUSEINPUT;

typedef struct tagKEYBDINPUT {
    WORD wVk;
    WORD wScan;
    DWORD dwFlags;
    DWORD time;
    DWORD dwExtraInfo;
} KEYBDINPUT, *PKEYBDINPUT, * LPKEYBDINPUT;

typedef struct tagHARDWAREINPUT {
    DWORD uMsg;
    WORD wParamL;
    WORD wParamH;
    DWORD dwExtraInfo;
} HARDWAREINPUT, *PHARDWAREINPUT, * LPHARDWAREINPUT;





typedef struct tagINPUT {
    DWORD type;
    union
    {
        MOUSEINPUT mi;
        KEYBDINPUT ki;
                HARDWAREINPUT hi;
    };
} INPUT, *PINPUT, * LPINPUT;



UINT

SendInput(
        UINT nInputs,
        LPINPUT pInputs,
        int cbSize
        );







int

TranslateAcceleratorA(
    HWND hWnd,
    HACCEL hAccTable,
    LPMSG lpMsg);

int

TranslateAcceleratorW(
    HWND hWnd,
    HACCEL hAccTable,
    LPMSG lpMsg);
# 2335 "/usr/local/arm-wince-pe/include/winuser.h" 3
void

SystemIdleTimerReset(
        void
        );





LRESULT

DefWindowProcA(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);

LRESULT

DefWindowProcW(
    HWND hWnd,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
# 2383 "/usr/local/arm-wince-pe/include/winuser.h" 3
LONG

GetWindowLongA(
    HWND hWnd,
    int nIndex);

LONG

GetWindowLongW(
    HWND hWnd,
    int nIndex);







LONG

SetWindowLongA(
    HWND hWnd,
    int nIndex,
    LONG dwNewLong);

LONG

SetWindowLongW(
    HWND hWnd,
    int nIndex,
    LONG dwNewLong);
# 2441 "/usr/local/arm-wince-pe/include/winuser.h" 3
BOOL

IsChild(
    HWND hWndParent,
    HWND hWnd);


BOOL

ShowWindow (
    HWND hwnd,
    INT nCmdShow
    );

BOOL

UpdateWindow (
    HWND hwnd
    );

HWND

SetParent (
    HWND hwnd,
    HWND hwndParent
    );

HWND

GetParent (
    HWND hwnd
    );


HWND

FindWindowA(
    LPCSTR lpClassName ,
    LPCSTR lpWindowName);

HWND

FindWindowW(
    LPCWSTR lpClassName ,
    LPCWSTR lpWindowName);







typedef BOOL (* WNDENUMPROC)(HWND, LPARAM);

BOOL

EnumWindows(
    WNDENUMPROC lpEnumFunc,
    LPARAM lParam);



int

GetClassNameA(
    HWND hWnd,
    LPSTR lpClassName,
    int nMaxCount);

int

GetClassNameW(
    HWND hWnd,
    LPWSTR lpClassName,
    int nMaxCount);
# 2559 "/usr/local/arm-wince-pe/include/winuser.h" 3
int

MessageBoxA(
    HWND hWnd ,
    LPCSTR lpText,
    LPCSTR lpCaption,
    UINT uType);

int

MessageBoxW(
    HWND hWnd ,
    LPCWSTR lpText,
    LPCWSTR lpCaption,
    UINT uType);
# 2582 "/usr/local/arm-wince-pe/include/winuser.h" 3
BOOL

MessageBeep(
    UINT uType);




BOOL

CreateCaret(
    HWND hWnd,
    HBITMAP hBitmap,
    int nWidth,
    int nHeight);

BOOL

DestroyCaret(
    void);

BOOL

HideCaret(
    HWND hWnd);

BOOL

ShowCaret(
    HWND hWnd);

BOOL

SetCaretPos(
    int X,
    int Y);

BOOL

GetCaretPos(
    LPPOINT lpPoint);


BOOL

SetCaretBlinkTime(
        UINT uMSeconds
        );

UINT

GetCaretBlinkTime(
        void
        );




HWND

SetActiveWindow(
        HWND hWnd);

HWND

GetForegroundWindow(
        void);

BOOL

SetForegroundWindow(
        HWND hWnd);


HWND

SetFocus(
    HWND hWnd
    );

HWND

GetActiveWindow(
    void
    );

HWND

GetFocus(
    void
    );






HKL

GetKeyboardLayout(
    DWORD dwThreadId
);






SHORT

GetAsyncKeyState(
    int vKey);

SHORT

GetKeyState(
    int nVirtKey);


void

keybd_event(
    BYTE bVk,
    BYTE bScan,
    DWORD dwFlags,
    DWORD dwExtraInfo);



BOOL

PostKeybdMessage(
        HWND hwnd,
        UINT VKey,
        UINT KeyStateFlags,
        UINT cCharacters,
        UINT *pShiftStateBuffer,
        UINT *pCharacterBuffer
        );





BOOL

GetKeyboardLayoutNameA(
    LPSTR pwszKLID);

BOOL

GetKeyboardLayoutNameW(
    LPWSTR pwszKLID);








UINT

MapVirtualKeyA(
    UINT uCode,
    UINT uMapType);


UINT

MapVirtualKeyW(
    UINT uCode,
    UINT uMapType);
# 3017 "/usr/local/arm-wince-pe/include/winuser.h" 3
typedef struct tagNMHDR
{
    HWND hwndFrom;
    UINT idFrom;
    UINT code;
} NMHDR;
typedef NMHDR * LPNMHDR;
# 3055 "/usr/local/arm-wince-pe/include/winuser.h" 3
typedef struct tagMEASUREITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemWidth;
    UINT itemHeight;
    UINT itemData;
} MEASUREITEMSTRUCT, *PMEASUREITEMSTRUCT, *LPMEASUREITEMSTRUCT;




typedef struct tagDRAWITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    UINT itemAction;
    UINT itemState;
    HWND hwndItem;
    HDC hDC;
    RECT rcItem;
    DWORD itemData;
} DRAWITEMSTRUCT, *PDRAWITEMSTRUCT, *LPDRAWITEMSTRUCT;




typedef struct tagDELETITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    UINT itemID;
    HWND hwndItem;
    UINT itemData;
} DELETEITEMSTRUCT, *PDELETEITEMSTRUCT, *LPDELETEITEMSTRUCT;

typedef struct tagCOMPAREITEMSTRUCT {
    UINT CtlType;
    UINT CtlID;
    HWND hwndItem;
    UINT itemID1;
    DWORD itemData1;
    UINT itemID2;
    DWORD itemData2;
    DWORD dwLocaleId;
} COMPAREITEMSTRUCT, *PCOMPAREITEMSTRUCT, *LPCOMPAREITEMSTRUCT;
# 3227 "/usr/local/arm-wince-pe/include/winuser.h" 3
typedef struct tagSCROLLINFO
{
    UINT cbSize;
    UINT fMask;
    int nMin;
    int nMax;
    UINT nPage;
    int nPos;
    int nTrackPos;
} SCROLLINFO, *LPSCROLLINFO;
typedef SCROLLINFO const *LPCSCROLLINFO;


int

SetScrollInfo(
        HWND,
        int,
        LPCSCROLLINFO,
        BOOL);



BOOL

GetScrollInfo(
        HWND,
        int,
        LPSCROLLINFO
        );


int

SetScrollPos(
        HWND hwnd,
        int fnBar,
        int nPos,
        BOOL bRedraw
        );


BOOL

SetScrollRange(
HWND hwnd,
        int fnBar,
        int nMinPos,
        int nMaxPos,
        BOOL bRedraw
        );
# 3321 "/usr/local/arm-wince-pe/include/winuser.h" 3
# 1 "/usr/local/arm-wince-pe/include/pshpack2.h" 1 3
# 30 "/usr/local/arm-wince-pe/include/pshpack2.h" 3
#pragma pack(2)
# 3322 "/usr/local/arm-wince-pe/include/winuser.h" 2 3
# 3348 "/usr/local/arm-wince-pe/include/winuser.h" 3
typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    WORD cdit;
    short x;
    short y;
    short cx;
    short cy;
} DLGTEMPLATE;
typedef DLGTEMPLATE *LPDLGTEMPLATEA;
typedef DLGTEMPLATE *LPDLGTEMPLATEW;



typedef LPDLGTEMPLATEA LPDLGTEMPLATE;

typedef const DLGTEMPLATE *LPCDLGTEMPLATEA;
typedef const DLGTEMPLATE *LPCDLGTEMPLATEW;



typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE;





typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    short x;
    short y;
    short cx;
    short cy;
    WORD id;
} DLGITEMTEMPLATE;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;



typedef PDLGITEMTEMPLATEA PDLGITEMTEMPLATE;

typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;



typedef LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE;


# 1 "/usr/local/arm-wince-pe/include/poppack.h" 1 3
# 34 "/usr/local/arm-wince-pe/include/poppack.h" 3
#pragma pack()
# 3400 "/usr/local/arm-wince-pe/include/winuser.h" 2 3
# 3638 "/usr/local/arm-wince-pe/include/winuser.h" 3

BOOL

IsDialogMessageA(
    HWND hDlg,
    LPMSG lpMsg);


BOOL

IsDialogMessageW(
    HWND hDlg,
    LPMSG lpMsg);








HWND

CreateDialogIndirectParamA(
    HINSTANCE hInstance,
    LPCDLGTEMPLATEA lpTemplate,
    HWND hWndParent,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);

HWND

CreateDialogIndirectParamW(
    HINSTANCE hInstance,
    LPCDLGTEMPLATEW lpTemplate,
    HWND hWndParent,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);
# 3748 "/usr/local/arm-wince-pe/include/winuser.h" 3
int

DialogBoxIndirectParamA(
    HINSTANCE hInstance,
    LPCDLGTEMPLATEA hDialogTemplate,
    HWND hWndParent ,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);
int

DialogBoxIndirectParamW(
    HINSTANCE hInstance,
    LPCDLGTEMPLATEW hDialogTemplate,
    HWND hWndParent ,
    DLGPROC lpDialogFunc,
    LPARAM dwInitParam);
# 3832 "/usr/local/arm-wince-pe/include/winuser.h" 3
BOOL

EndDialog(
    HWND hDlg,
    int nResult);

HWND

GetNextDlgGroupItem (
    HWND hDlg,
    HWND hCtl,
    BOOL bPrevious
    );

HWND

GetNextDlgTabItem (
    HWND hDlg,
    HWND hCtl,
    BOOL bPrevious
    );

int

GetDlgCtrlID (
    HWND hWnd
    );

long

GetDialogBaseUnits(
        void
        );

BOOL

MapDialogRect (
    HWND hwnd,
    LPRECT prc
    );


HWND

GetDlgItem (
    HWND hDlg,
    int iCtrlID
    );


LRESULT

DefDlgProcA(
    HWND hDlg,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);

LRESULT

DefDlgProcW(
    HWND hDlg,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);
# 3909 "/usr/local/arm-wince-pe/include/winuser.h" 3

BOOL

SetDlgItemInt(
    HWND hDlg,
    int nIDDlgItem,
    UINT uValue,
    BOOL bSigned);


UINT

GetDlgItemInt(
    HWND hDlg,
    int nIDDlgItem,
    BOOL *lpTranslated,
    BOOL bSigned);

BOOL

CheckRadioButton(
    HWND hDlg,
    int nIDFirstButton,
    int nIDLastButton,
    int nIDCheckButton);


LONG

SendDlgItemMessageA(
    HWND hDlg,
    int nIDDlgItem,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);

LONG

SendDlgItemMessageW(
    HWND hDlg,
    int nIDDlgItem,
    UINT Msg,
    WPARAM wParam,
    LPARAM lParam);







BOOL

SetDlgItemTextA(
    HWND hDlg,
    int nIDDlgItem,
    LPCSTR lpString);

BOOL

SetDlgItemTextW(
    HWND hDlg,
    int nIDDlgItem,
    LPCWSTR lpString);







UINT

GetDlgItemTextA(
    HWND hDlg,
    int nIDDlgItem,
    LPSTR lpString,
    int nMaxCount);

UINT

GetDlgItemTextW(
    HWND hDlg,
    int nIDDlgItem,
    LPWSTR lpString,
    int nMaxCount);
# 4034 "/usr/local/arm-wince-pe/include/winuser.h" 3

BOOL

OpenClipboard(
    HWND hWndNewOwner);


BOOL

CloseClipboard(
    void);


HWND

GetClipboardOwner(
    void);


HANDLE

SetClipboardData(
    UINT uFormat,
    HANDLE hMem);


HANDLE

    GetClipboardData(
    UINT uFormat);


HANDLE

    GetClipboardDataAlloc(
    UINT uFormat);




UINT

RegisterClipboardFormatA(
    LPCSTR lpszFormat);



UINT

RegisterClipboardFormatW(
    LPCWSTR lpszFormat);








int

CountClipboardFormats(
    void);


UINT

EnumClipboardFormats(
    UINT format);



int

GetClipboardFormatNameA(
    UINT format,
    LPSTR lpszFormatName,
    int cchMaxCount);



int

GetClipboardFormatNameW(
    UINT format,
    LPWSTR lpszFormatName,
    int cchMaxCount);








BOOL

EmptyClipboard(
    void);


BOOL

IsClipboardFormatAvailable(
    UINT format);


int

GetPriorityClipboardFormat(
    UINT *paFormatPriorityList,
    int cFormats);


HWND

GetOpenClipboardWindow(
    void);
# 4213 "/usr/local/arm-wince-pe/include/winuser.h" 3
HCURSOR

SetCursor(
    HCURSOR hCursor);
# 4247 "/usr/local/arm-wince-pe/include/winuser.h" 3

HCURSOR

LoadCursorA(
    HINSTANCE hInstance,
    LPCSTR lpCursorName);

HCURSOR

LoadCursorW(
    HINSTANCE hInstance,
    LPCWSTR lpCursorName);
# 4289 "/usr/local/arm-wince-pe/include/winuser.h" 3

int

ShowCursor(
    BOOL bShow);


BOOL

SetCursorPos(
    int X,
    int Y);


HCURSOR

SetCursor(
    HCURSOR hCursor);


BOOL

GetCursorPos(
    LPPOINT lpPoint);


BOOL

ClipCursor(
    const RECT *lpRect);


BOOL

GetClipCursor(
    LPRECT lpRect);


HCURSOR

GetCursor(
    void);
# 4344 "/usr/local/arm-wince-pe/include/winuser.h" 3
UINT SetTimer(
    HWND hwnd,
    UINT idTimer,
    UINT uTimeOut,
    TIMERPROC pfnTimerProc);

BOOL KillTimer(
    HWND hwnd,
    UINT idEvent);




DWORD

GetKeyboardStatus(
        void
        );

BOOL

EnableHardwareKeyboard(
        BOOL fEnable
        );
# 4385 "/usr/local/arm-wince-pe/include/winuser.h" 3

BOOL

RegisterHotKey(
        HWND hWnd,
        int id,
        UINT fsModifiers,
        UINT vk
        );


BOOL

UnregisterHotKey(
        HWND hWnd,
        int id
        );


BOOL

AllKeys(
        BOOL bAllKeys);
# 4449 "/usr/local/arm-wince-pe/include/winuser.h" 3

BOOL

SystemParametersInfoA(
    UINT uiAction,
    UINT uiParam,
    PVOID pvParam,
    UINT fWinIni);


BOOL

SystemParametersInfoW(
    UINT uiAction,
    UINT uiParam,
    PVOID pvParam,
    UINT fWinIni);
# 4521 "/usr/local/arm-wince-pe/include/winuser.h" 3
HICON

LoadIconA(
    HINSTANCE hInstance,
    LPCSTR lpIconName);

HICON

LoadIconW(
    HINSTANCE hInstance,
    LPCWSTR lpIconName);







BOOL

DestroyIcon(
    HICON hIcon);






BOOL

DrawIconEx(
    HDC hdc,
    int xLeft,
    int yTop,
    HICON hIcon,
    int cxWidth,
    int cyWidth,
    UINT istepIfAniCur,
    HBRUSH hbrFlickerFreeDraw,
    UINT diFlags);






typedef struct _ICONINFO {
    BOOL fIcon;
    DWORD xHotspot;
    DWORD yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
} ICONINFO;
typedef ICONINFO *PICONINFO;


HICON

CreateIconIndirect(
    PICONINFO piconinfo);
# 4600 "/usr/local/arm-wince-pe/include/winuser.h" 3
HANDLE

LoadImageA(
    HINSTANCE,
    LPCSTR,
    UINT,
    int,
    int,
    UINT);

HANDLE

LoadImageW(
    HINSTANCE,
    LPCWSTR,
    UINT,
    int,
    int,
    UINT);
# 4628 "/usr/local/arm-wince-pe/include/winuser.h" 3

HCURSOR

CreateCursor(
    HINSTANCE hInst,
    int xHotSpot,
    int yHotSpot,
    int nWidth,
    int nHeight,
    const void *pvANDPlane,
    const void *pvXORPlane);


BOOL

DestroyCursor(
    HCURSOR hCursor);
# 23 "/usr/local/arm-wince-pe/include/windows.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/winreg.h" 1 3
# 38 "/usr/local/arm-wince-pe/include/winreg.h" 3
typedef ACCESS_MASK REGSAM;
# 61 "/usr/local/arm-wince-pe/include/winreg.h" 3

LONG

RegCloseKey (
    HKEY hKey
    );


LONG

RegCreateKeyExA (
    HKEY hKey,
    LPCSTR lpSubKey,
    DWORD Reserved,
    LPSTR lpClass,
    DWORD dwOptions,
    REGSAM samDesired,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    PHKEY phkResult,
    LPDWORD lpdwDisposition
    );

LONG

RegCreateKeyExW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    DWORD Reserved,
    LPWSTR lpClass,
    DWORD dwOptions,
    REGSAM samDesired,
    LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    PHKEY phkResult,
    LPDWORD lpdwDisposition
    );







LONG

RegDeleteKeyA (
    HKEY hKey,
    LPCSTR lpSubKey
    );

LONG

RegDeleteKeyW (
    HKEY hKey,
    LPCWSTR lpSubKey
    );







LONG

RegDeleteValueA (
    HKEY hKey,
    LPCSTR lpValueName
    );

LONG

RegDeleteValueW (
    HKEY hKey,
    LPCWSTR lpValueName
    );







LONG

RegEnumKeyExA (
    HKEY hKey,
    DWORD dwIndex,
    LPSTR lpName,
    LPDWORD lpcbName,
    LPDWORD lpReserved,
    LPSTR lpClass,
    LPDWORD lpcbClass,
    PFILETIME lpftLastWriteTime
    );

LONG

RegEnumKeyExW (
    HKEY hKey,
    DWORD dwIndex,
    LPWSTR lpName,
    LPDWORD lpcbName,
    LPDWORD lpReserved,
    LPWSTR lpClass,
    LPDWORD lpcbClass,
    PFILETIME lpftLastWriteTime
    );







LONG

RegEnumValueA (
    HKEY hKey,
    DWORD dwIndex,
    LPSTR lpValueName,
    LPDWORD lpcbValueName,
    LPDWORD lpReserved,
    LPDWORD lpType,
    LPBYTE lpData,
    LPDWORD lpcbData
    );

LONG

RegEnumValueW (
    HKEY hKey,
    DWORD dwIndex,
    LPWSTR lpValueName,
    LPDWORD lpcbValueName,
    LPDWORD lpReserved,
    LPDWORD lpType,
    LPBYTE lpData,
    LPDWORD lpcbData
    );







LONG

RegFlushKey (
    HKEY hKey
    );


LONG

RegOpenKeyExA (
    HKEY hKey,
    LPCSTR lpSubKey,
    DWORD ulOptions,
    REGSAM samDesired,
    PHKEY phkResult
    );

LONG

RegOpenKeyExW (
    HKEY hKey,
    LPCWSTR lpSubKey,
    DWORD ulOptions,
    REGSAM samDesired,
    PHKEY phkResult
    );







LONG

RegQueryInfoKeyA (
    HKEY hKey,
    LPSTR lpClass,
    LPDWORD lpcbClass,
    LPDWORD lpReserved,
    LPDWORD lpcSubKeys,
    LPDWORD lpcbMaxSubKeyLen,
    LPDWORD lpcbMaxClassLen,
    LPDWORD lpcValues,
    LPDWORD lpcbMaxValueNameLen,
    LPDWORD lpcbMaxValueLen,
    LPDWORD lpcbSecurityDescriptor,
    PFILETIME lpftLastWriteTime
    );

LONG

RegQueryInfoKeyW (
    HKEY hKey,
    LPWSTR lpClass,
    LPDWORD lpcbClass,
    LPDWORD lpReserved,
    LPDWORD lpcSubKeys,
    LPDWORD lpcbMaxSubKeyLen,
    LPDWORD lpcbMaxClassLen,
    LPDWORD lpcValues,
    LPDWORD lpcbMaxValueNameLen,
    LPDWORD lpcbMaxValueLen,
    LPDWORD lpcbSecurityDescriptor,
    PFILETIME lpftLastWriteTime
    );







LONG

RegQueryValueExA (
    HKEY hKey,
    LPCSTR lpValueName,
    LPDWORD lpReserved,
    LPDWORD lpType,
    LPBYTE lpData,
    LPDWORD lpcbData
    );

LONG

RegQueryValueExW (
    HKEY hKey,
    LPCWSTR lpValueName,
    LPDWORD lpReserved,
    LPDWORD lpType,
    LPBYTE lpData,
    LPDWORD lpcbData
    );







LONG

RegSetValueExA (
    HKEY hKey,
    LPCSTR lpValueName,
    DWORD Reserved,
    DWORD dwType,
    const BYTE* lpData,
    DWORD cbData
    );

LONG

RegSetValueExW (
    HKEY hKey,
    LPCWSTR lpValueName,
    DWORD Reserved,
    DWORD dwType,
    const BYTE* lpData,
    DWORD cbData
    );
# 24 "/usr/local/arm-wince-pe/include/windows.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/shellapi.h" 1 3
# 25 "/usr/local/arm-wince-pe/include/shellapi.h" 3
# 1 "/usr/local/arm-wince-pe/include/pshpack1.h" 1 3
# 30 "/usr/local/arm-wince-pe/include/pshpack1.h" 3
#pragma pack(1)
# 26 "/usr/local/arm-wince-pe/include/shellapi.h" 2 3
# 37 "/usr/local/arm-wince-pe/include/shellapi.h" 3
HICON ExtractIconExA(LPCSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons);



HICON ExtractIconExW(LPCWSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons);
# 76 "/usr/local/arm-wince-pe/include/shellapi.h" 3
typedef WORD FILEOP_FLAGS;
# 89 "/usr/local/arm-wince-pe/include/shellapi.h" 3
typedef WORD PRINTEROP_FLAGS;
# 101 "/usr/local/arm-wince-pe/include/shellapi.h" 3
typedef struct _SHFILEOPSTRUCTA
{
        HWND hwnd;
        UINT wFunc;
        LPCSTR pFrom;
        LPCSTR pTo;
        FILEOP_FLAGS fFlags;
        BOOL fAnyOperationsAborted;
        LPVOID hNameMappings;
        LPCSTR lpszProgressTitle;
} SHFILEOPSTRUCTA, *LPSHFILEOPSTRUCTA;


typedef struct _SHFILEOPSTRUCTW
{
        HWND hwnd;
        UINT wFunc;
        LPCWSTR pFrom;
        LPCWSTR pTo;
        FILEOP_FLAGS fFlags;
        BOOL fAnyOperationsAborted;
        LPVOID hNameMappings;
        LPCWSTR lpszProgressTitle;
} SHFILEOPSTRUCTW, *LPSHFILEOPSTRUCTW;





typedef SHFILEOPSTRUCTA SHFILEOPSTRUCT;
typedef LPSHFILEOPSTRUCTA LPSHFILEOPSTRUCT;



 int SHFileOperationA(LPSHFILEOPSTRUCTA lpFileOp);


 int SHFileOperationW(LPSHFILEOPSTRUCTW lpFileOp);
# 173 "/usr/local/arm-wince-pe/include/shellapi.h" 3
typedef struct _SHELLEXECUTEINFO
{
        DWORD cbSize;
        ULONG fMask;
        HWND hwnd;
        LPCTSTR lpVerb;
        LPCTSTR lpFile;
        LPCTSTR lpParameters;
        LPCTSTR lpDirectory;
        int nShow;
        HINSTANCE hInstApp;

        LPVOID lpIDList;
        LPCTSTR lpClass;
        HKEY hkeyClass;
        DWORD dwHotKey;
        HANDLE hIcon;
        HANDLE hProcess;
} SHELLEXECUTEINFO, *LPSHELLEXECUTEINFO;

 BOOL ShellExecuteEx(LPSHELLEXECUTEINFO lpExecInfo);
# 205 "/usr/local/arm-wince-pe/include/shellapi.h" 3
typedef struct _NOTIFYICONDATAA {
        DWORD cbSize;
        HWND hWnd;
        UINT uID;
        UINT uFlags;
        UINT uCallbackMessage;
        HICON hIcon;
        CHAR szTip[64];
} NOTIFYICONDATAA, *PNOTIFYICONDATAA;

typedef struct _NOTIFYICONDATAW {
        DWORD cbSize;
        HWND hWnd;
        UINT uID;
        UINT uFlags;
        UINT uCallbackMessage;
        HICON hIcon;
        WCHAR szTip[64];
} NOTIFYICONDATAW, *PNOTIFYICONDATAW;




typedef NOTIFYICONDATAA NOTIFYICONDATA;
typedef PNOTIFYICONDATAA PNOTIFYICONDATA;
# 240 "/usr/local/arm-wince-pe/include/shellapi.h" 3
BOOL Shell_NotifyIcon(DWORD dwMessage, PNOTIFYICONDATA lpData);
# 268 "/usr/local/arm-wince-pe/include/shellapi.h" 3
typedef struct _SHFILEINFOA
{
        HICON hIcon;
        int iIcon;
        DWORD dwAttributes;
        CHAR szDisplayName[260];
        CHAR szTypeName[80];
} SHFILEINFOA;


typedef struct _SHFILEINFOW
{
        HICON hIcon;
        int iIcon;
        DWORD dwAttributes;
        WCHAR szDisplayName[260];
        WCHAR szTypeName[80];
} SHFILEINFOW;




typedef SHFILEINFOA SHFILEINFO;
# 309 "/usr/local/arm-wince-pe/include/shellapi.h" 3
DWORD SHGetFileInfo(LPCTSTR pszPath, DWORD dwFileAttributes,
                                                   SHFILEINFO *psfi, UINT cbFileInfo, UINT uFlags);
# 321 "/usr/local/arm-wince-pe/include/shellapi.h" 3
BOOL SHGetSpecialFolderPath(HWND hwndOwner, LPTSTR lpszPath,
                                                                          int nFolder, BOOL fCreate );
# 336 "/usr/local/arm-wince-pe/include/shellapi.h" 3
void SHAddToRecentDocs(UINT uFlags, LPCVOID pv);




DWORD SHCreateShortcut(LPTSTR szShortcut, LPTSTR szTarget);
BOOL SHGetShortcutTarget(LPCTSTR szShortcut, LPTSTR szTarget, int cb);



int SHShowOutOfMemory(HWND hwndOwner, UINT grfFlags);
HBITMAP SHLoadDIBitmap(LPCTSTR szFileName);
# 363 "/usr/local/arm-wince-pe/include/shellapi.h" 3
# 1 "/usr/local/arm-wince-pe/include/poppack.h" 1 3
# 34 "/usr/local/arm-wince-pe/include/poppack.h" 3
#pragma pack()
# 364 "/usr/local/arm-wince-pe/include/shellapi.h" 2 3
# 25 "/usr/local/arm-wince-pe/include/windows.h" 2 3

# 1 "/usr/local/arm-wince-pe/include/ole2.h" 1 3
# 15 "/usr/local/arm-wince-pe/include/ole2.h" 3
# 1 "/usr/local/arm-wince-pe/include/pshpack8.h" 1 3
# 30 "/usr/local/arm-wince-pe/include/pshpack8.h" 3
#pragma pack(8)
# 16 "/usr/local/arm-wince-pe/include/ole2.h" 2 3
# 28 "/usr/local/arm-wince-pe/include/ole2.h" 3
# 1 "/usr/local/arm-wince-pe/include/objbase.h" 1 3
# 12 "/usr/local/arm-wince-pe/include/objbase.h" 3
# 1 "/usr/local/arm-wince-pe/include/rpc.h" 1 3
# 16 "/usr/local/arm-wince-pe/include/rpc.h" 3
# 1 "/usr/local/arm-wince-pe/include/windows.h" 1 3
# 17 "/usr/local/arm-wince-pe/include/rpc.h" 2 3
# 39 "/usr/local/arm-wince-pe/include/rpc.h" 3
typedef void * I_RPC_HANDLE;
typedef long RPC_STATUS;
# 76 "/usr/local/arm-wince-pe/include/rpc.h" 3
# 1 "/usr/local/arm-wince-pe/include/rpcdce.h" 1 3
# 30 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
typedef I_RPC_HANDLE RPC_BINDING_HANDLE;
typedef RPC_BINDING_HANDLE handle_t;
# 47 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
typedef GUID UUID;





typedef struct _RPC_BINDING_VECTOR
{
    unsigned long Count;
    RPC_BINDING_HANDLE BindingH[1];
} RPC_BINDING_VECTOR;




typedef struct _UUID_VECTOR
{
  unsigned long Count;
  UUID *Uuid[1];
} UUID_VECTOR;




typedef void * RPC_IF_HANDLE;



typedef struct _RPC_IF_ID
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_IF_ID;
# 126 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
typedef struct _RPC_PROTSEQ_VECTORA
{
    unsigned int Count;
    unsigned char * Protseq[1];
} RPC_PROTSEQ_VECTORA;

typedef struct _RPC_PROTSEQ_VECTORW
{
    unsigned int Count;
    unsigned short * Protseq[1];
} RPC_PROTSEQ_VECTORW;
# 153 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
typedef struct _RPC_POLICY {
    unsigned int Length ;
    unsigned long EndpointFlags ;
    unsigned long NICFlags ;
    } RPC_POLICY, *PRPC_POLICY ;

typedef void
RPC_OBJECT_INQ_FN (
    UUID * ObjectUuid,
    UUID * TypeUuid,
    RPC_STATUS * Status
    );

typedef RPC_STATUS
RPC_IF_CALLBACK_FN (
    RPC_IF_HANDLE InterfaceUuid,
    void *Context
    ) ;



typedef struct
{
    unsigned int Count;
    unsigned long Stats[1];
} RPC_STATS_VECTOR;






typedef struct
{
  unsigned long Count;
  RPC_IF_ID * IfId[1];
} RPC_IF_ID_VECTOR;


RPC_STATUS
RpcBindingCopy (
    RPC_BINDING_HANDLE SourceBinding,
    RPC_BINDING_HANDLE * DestinationBinding
    );


RPC_STATUS
RpcBindingFree (
    RPC_BINDING_HANDLE * Binding
    );


RPC_STATUS
RpcBindingSetOption( RPC_BINDING_HANDLE hBinding,
                     unsigned long option,
                     unsigned long optionValue );


RPC_STATUS
RpcBindingInqOption( RPC_BINDING_HANDLE hBinding,
                     unsigned long option,
                     unsigned long *pOptionValue );





RPC_STATUS
RpcBindingFromStringBindingA (
    unsigned char * StringBinding,
    RPC_BINDING_HANDLE * Binding
    );

RPC_STATUS
RpcBindingFromStringBindingW (
    unsigned short * StringBinding,
    RPC_BINDING_HANDLE * Binding
    );
# 249 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
RPC_STATUS
RpcBindingInqObject (
    RPC_BINDING_HANDLE Binding,
    UUID * ObjectUuid
    );


RPC_STATUS
RpcBindingReset (
    RPC_BINDING_HANDLE Binding
    );





RPC_STATUS
RpcBindingSetObject (
    RPC_BINDING_HANDLE Binding,
    UUID * ObjectUuid
    );


RPC_STATUS
RpcMgmtInqDefaultProtectLevel(
    unsigned long AuthnSvc,
    unsigned long *AuthnLevel
    );





RPC_STATUS
RpcBindingToStringBindingA (
    RPC_BINDING_HANDLE Binding,
    unsigned char * * StringBinding
    );

RPC_STATUS
RpcBindingToStringBindingW (
    RPC_BINDING_HANDLE Binding,
    unsigned short * * StringBinding
    );
# 311 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
RPC_STATUS
RpcBindingVectorFree (
    RPC_BINDING_VECTOR * * BindingVector
    );





RPC_STATUS
RpcStringBindingComposeA (
    unsigned char * ObjUuid ,
    unsigned char * Protseq ,
    unsigned char * NetworkAddr ,
    unsigned char * Endpoint ,
    unsigned char * Options ,
    unsigned char * * StringBinding
    );

RPC_STATUS
RpcStringBindingComposeW (
    unsigned short * ObjUuid ,
    unsigned short * Protseq ,
    unsigned short * NetworkAddr ,
    unsigned short * Endpoint ,
    unsigned short * Options ,
    unsigned short * * StringBinding
    );
# 364 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
RPC_STATUS
RpcStringBindingParseA (
    unsigned char * StringBinding,
    unsigned char * * ObjUuid ,
    unsigned char * * Protseq ,
    unsigned char * * NetworkAddr ,
    unsigned char * * Endpoint ,
    unsigned char * * NetworkOptions
    );

RPC_STATUS
RpcStringBindingParseW (
    unsigned short * StringBinding,
    unsigned short * * ObjUuid ,
    unsigned short * * Protseq ,
    unsigned short * * NetworkAddr ,
    unsigned short * * Endpoint ,
    unsigned short * * NetworkOptions
    );
# 408 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
RPC_STATUS
RpcStringFreeA (
    unsigned char * * String
    );

RPC_STATUS
RpcStringFreeW (
    unsigned short * * String
    );
# 434 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
RPC_STATUS
RpcIfInqId (
    RPC_IF_HANDLE RpcIfHandle,
    RPC_IF_ID * RpcIfId
    );





RPC_STATUS
RpcNetworkIsProtseqValidA (
    unsigned char * Protseq
    );

RPC_STATUS
RpcNetworkIsProtseqValidW (
    unsigned short * Protseq
    );
# 470 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
RPC_STATUS
RpcMgmtInqComTimeout (
    RPC_BINDING_HANDLE Binding,
    unsigned int * Timeout
    );


RPC_STATUS
RpcMgmtSetComTimeout (
    RPC_BINDING_HANDLE Binding,
    unsigned int Timeout
    );


RPC_STATUS
RpcMgmtSetCancelTimeout(
    long Timeout
    );






RPC_STATUS
RpcNetworkInqProtseqsA (
    RPC_PROTSEQ_VECTORA * * ProtseqVector
    );

RPC_STATUS
RpcNetworkInqProtseqsW (
    RPC_PROTSEQ_VECTORW * * ProtseqVector
    );
# 520 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
RPC_STATUS
RpcObjectInqType (
    UUID * ObjUuid,
    UUID * TypeUuid
    );


RPC_STATUS
RpcObjectSetInqFn (
    RPC_OBJECT_INQ_FN * InquiryFn
    );


RPC_STATUS
RpcObjectSetType (
    UUID * ObjUuid,
    UUID * TypeUuid
    );





RPC_STATUS
RpcProtseqVectorFreeA (
    RPC_PROTSEQ_VECTORA * * ProtseqVector
    );

RPC_STATUS
RpcProtseqVectorFreeW (
    RPC_PROTSEQ_VECTORW * * ProtseqVector
    );
# 569 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
RPC_STATUS
RpcServerInqBindings (
    RPC_BINDING_VECTOR * * BindingVector
    );


RPC_STATUS
RpcServerInqIf (
    RPC_IF_HANDLE IfSpec,
    UUID * MgrTypeUuid,
    void * * MgrEpv
    );


RPC_STATUS
RpcServerListen (
    unsigned int MinimumCallThreads,
    unsigned int MaxCalls,
    unsigned int DontWait
    );


RPC_STATUS
RpcServerRegisterIf (
    RPC_IF_HANDLE IfSpec,
    UUID * MgrTypeUuid ,
    void * MgrEpv
    );


RPC_STATUS
RpcServerRegisterIfEx (
    RPC_IF_HANDLE IfSpec,
    UUID * MgrTypeUuid,
    void * MgrEpv,
    unsigned int Flags,
    unsigned int MaxCalls,
    RPC_IF_CALLBACK_FN *IfCallback
    );


RPC_STATUS
RpcServerUnregisterIf (
    RPC_IF_HANDLE IfSpec,
    UUID * MgrTypeUuid,
    unsigned int WaitForCallsToComplete
    );


RPC_STATUS
RpcServerUseAllProtseqs (
    unsigned int MaxCalls,
    void * SecurityDescriptor
    );


RPC_STATUS
RpcServerUseAllProtseqsEx (
    unsigned int MaxCalls,
    void * SecurityDescriptor,
    PRPC_POLICY Policy
    );


RPC_STATUS
RpcServerUseAllProtseqsIf (
    unsigned int MaxCalls,
    RPC_IF_HANDLE IfSpec,
    void * SecurityDescriptor
    );


RPC_STATUS
RpcServerUseAllProtseqsIfEx (
    unsigned int MaxCalls,
    RPC_IF_HANDLE IfSpec,
    void * SecurityDescriptor,
    PRPC_POLICY Policy
    );






RPC_STATUS
RpcServerUseProtseqA (
    unsigned char * Protseq,
    unsigned int MaxCalls,
    void * SecurityDescriptor
    );

RPC_STATUS
RpcServerUseProtseqExA (
    unsigned char * Protseq,
    unsigned int MaxCalls,
    void * SecurityDescriptor,
    PRPC_POLICY Policy
    );

RPC_STATUS
RpcServerUseProtseqW (
    unsigned short * Protseq,
    unsigned int MaxCalls,
    void * SecurityDescriptor
    );

RPC_STATUS
RpcServerUseProtseqExW (
    unsigned short * Protseq,
    unsigned int MaxCalls,
    void * SecurityDescriptor,
    PRPC_POLICY Policy
    );
# 715 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
RPC_STATUS
RpcServerUseProtseqEpA (
    unsigned char * Protseq,
    unsigned int MaxCalls,
    unsigned char * Endpoint,
    void * SecurityDescriptor
    );

RPC_STATUS
RpcServerUseProtseqEpExA (
    unsigned char * Protseq,
    unsigned int MaxCalls,
    unsigned char * Endpoint,
    void * SecurityDescriptor,
    PRPC_POLICY Policy
    );

RPC_STATUS
RpcServerUseProtseqEpW (
    unsigned short * Protseq,
    unsigned int MaxCalls,
    unsigned short * Endpoint,
    void * SecurityDescriptor
    );

RPC_STATUS
RpcServerUseProtseqEpExW (
    unsigned short * Protseq,
    unsigned int MaxCalls,
    unsigned short * Endpoint,
    void * SecurityDescriptor,
    PRPC_POLICY Policy
    );
# 782 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
RPC_STATUS
RpcServerUseProtseqIfA (
    unsigned char * Protseq,
    unsigned int MaxCalls,
    RPC_IF_HANDLE IfSpec,
    void * SecurityDescriptor
    );

RPC_STATUS
RpcServerUseProtseqIfExA (
    unsigned char * Protseq,
    unsigned int MaxCalls,
    RPC_IF_HANDLE IfSpec,
    void * SecurityDescriptor,
    PRPC_POLICY Policy
    );

RPC_STATUS
RpcServerUseProtseqIfW (
    unsigned short * Protseq,
    unsigned int MaxCalls,
    RPC_IF_HANDLE IfSpec,
    void * SecurityDescriptor
    );

RPC_STATUS
RpcServerUseProtseqIfExW (
    unsigned short * Protseq,
    unsigned int MaxCalls,
    RPC_IF_HANDLE IfSpec,
    void * SecurityDescriptor,
    PRPC_POLICY Policy
    );
# 846 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
RPC_STATUS
RpcMgmtStatsVectorFree (
    RPC_STATS_VECTOR ** StatsVector
    );


RPC_STATUS
RpcMgmtInqStats (
    RPC_BINDING_HANDLE Binding,
    RPC_STATS_VECTOR ** Statistics
    );


RPC_STATUS
RpcMgmtIsServerListening (
    RPC_BINDING_HANDLE Binding
    );


RPC_STATUS
RpcMgmtStopServerListening (
    RPC_BINDING_HANDLE Binding
    );


RPC_STATUS
RpcMgmtWaitServerListen (
    void
    );


RPC_STATUS
RpcMgmtSetServerStackSize (
    unsigned long ThreadStackSize
    );


void
RpcSsDontSerializeContext (
    void
    );


RPC_STATUS
RpcMgmtEnableIdleCleanup (
    void
    );

RPC_STATUS
RpcMgmtInqIfIds (
    RPC_BINDING_HANDLE Binding,
    RPC_IF_ID_VECTOR * * IfIdVector
    );

RPC_STATUS
RpcIfIdVectorFree (
    RPC_IF_ID_VECTOR * * IfIdVector
    );



RPC_STATUS
RpcMgmtInqServerPrincNameA (
    RPC_BINDING_HANDLE Binding,
    unsigned long AuthnSvc,
    unsigned char * * ServerPrincName
    );

RPC_STATUS
RpcMgmtInqServerPrincNameW (
    RPC_BINDING_HANDLE Binding,
    unsigned long AuthnSvc,
    unsigned short * * ServerPrincName
    );
# 940 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
RPC_STATUS
RpcServerInqDefaultPrincNameA (
    unsigned long AuthnSvc,
    unsigned char * * PrincName
    );

RPC_STATUS
RpcServerInqDefaultPrincNameW (
    unsigned long AuthnSvc,
    unsigned short * * PrincName
    );
# 969 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
RPC_STATUS
RpcEpResolveBinding (
    RPC_BINDING_HANDLE Binding,
    RPC_IF_HANDLE IfSpec
    );





RPC_STATUS
RpcNsBindingInqEntryNameA (
    RPC_BINDING_HANDLE Binding,
    unsigned long EntryNameSyntax,
    unsigned char * * EntryName
    );

RPC_STATUS
RpcNsBindingInqEntryNameW (
    RPC_BINDING_HANDLE Binding,
    unsigned long EntryNameSyntax,
    unsigned short * * EntryName
    );
# 1010 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
typedef void * RPC_AUTH_IDENTITY_HANDLE;
typedef void * RPC_AUTHZ_HANDLE;
# 1050 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
typedef struct _RPC_SECURITY_QOS {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
} RPC_SECURITY_QOS, *PRPC_SECURITY_QOS;
# 1070 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
typedef struct _SEC_WINNT_AUTH_IDENTITY_W {
  unsigned short *User;
  unsigned long UserLength;
  unsigned short *Domain;
  unsigned long DomainLength;
  unsigned short *Password;
  unsigned long PasswordLength;
  unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_W, *PSEC_WINNT_AUTH_IDENTITY_W;

typedef struct _SEC_WINNT_AUTH_IDENTITY_A {
          unsigned char *User;
          unsigned long UserLength;
          unsigned char *Domain;
          unsigned long DomainLength;
          unsigned char *Password;
          unsigned long PasswordLength;
          unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_A, *PSEC_WINNT_AUTH_IDENTITY_A;
# 1108 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
RPC_STATUS
RpcBindingInqAuthClientA (
    RPC_BINDING_HANDLE ClientBinding,
    RPC_AUTHZ_HANDLE * Privs,
    unsigned char * * ServerPrincName,
    unsigned long * AuthnLevel,
    unsigned long * AuthnSvc,
    unsigned long * AuthzSvc
    );

RPC_STATUS
RpcBindingInqAuthClientW (
    RPC_BINDING_HANDLE ClientBinding,
    RPC_AUTHZ_HANDLE * Privs,
    unsigned short * * ServerPrincName,
    unsigned long * AuthnLevel,
    unsigned long * AuthnSvc,
    unsigned long * AuthzSvc
    );

RPC_STATUS
RpcBindingInqAuthInfoA (
    RPC_BINDING_HANDLE Binding,
    unsigned char * * ServerPrincName,
    unsigned long * AuthnLevel,
    unsigned long * AuthnSvc,
    RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,
    unsigned long * AuthzSvc
    );

RPC_STATUS
RpcBindingInqAuthInfoW (
    RPC_BINDING_HANDLE Binding,
    unsigned short * * ServerPrincName,
    unsigned long * AuthnLevel,
    unsigned long * AuthnSvc,
    RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,
    unsigned long * AuthzSvc
    );

RPC_STATUS
RpcBindingSetAuthInfoA (
    RPC_BINDING_HANDLE Binding,
    unsigned char * ServerPrincName,
    unsigned long AuthnLevel,
    unsigned long AuthnSvc,
    RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
    unsigned long AuthzSvc
    );

RPC_STATUS
RpcBindingSetAuthInfoExA (
    RPC_BINDING_HANDLE Binding,
    unsigned char * ServerPrincName,
    unsigned long AuthnLevel,
    unsigned long AuthnSvc,
    RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
    unsigned long AuthzSvc,
    RPC_SECURITY_QOS *SecurityQos
    );

RPC_STATUS
RpcBindingSetAuthInfoW (
    RPC_BINDING_HANDLE Binding,
    unsigned short * ServerPrincName,
    unsigned long AuthnLevel,
    unsigned long AuthnSvc,
    RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
    unsigned long AuthzSvc
    );

RPC_STATUS
RpcBindingSetAuthInfoExW (
    RPC_BINDING_HANDLE Binding,
    unsigned short * ServerPrincName,
    unsigned long AuthnLevel,
    unsigned long AuthnSvc,
    RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
    unsigned long AuthzSvc,
    RPC_SECURITY_QOS *SecurityQOS
    );

RPC_STATUS
RpcBindingInqAuthInfoExA (
    RPC_BINDING_HANDLE Binding,
    unsigned char * * ServerPrincName,
    unsigned long * AuthnLevel,
    unsigned long * AuthnSvc,
    RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,
    unsigned long * AuthzSvc,
    unsigned long RpcQosVersion,
    RPC_SECURITY_QOS *SecurityQOS
    );

RPC_STATUS
RpcBindingInqAuthInfoExW (
    RPC_BINDING_HANDLE Binding,
    unsigned short * * ServerPrincName,
    unsigned long * AuthnLevel,
    unsigned long * AuthnSvc,
    RPC_AUTH_IDENTITY_HANDLE * AuthIdentity,
    unsigned long * AuthzSvc ,
    unsigned long RpcQosVersion,
    RPC_SECURITY_QOS *SecurityQOS
    );

typedef void
( * RPC_AUTH_KEY_RETRIEVAL_FN) (
    void * Arg,
    unsigned short * ServerPrincName,
    unsigned long KeyVer,
    void * * Key,
    RPC_STATUS * Status
    );

RPC_STATUS
RpcServerRegisterAuthInfoA (
    unsigned char * ServerPrincName,
    unsigned long AuthnSvc,
    RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn ,
    void * Arg
    );

RPC_STATUS
RpcServerRegisterAuthInfoW (
    unsigned short * ServerPrincName,
    unsigned long AuthnSvc,
    RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn ,
    void * Arg
    );
# 1306 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
typedef struct {
    unsigned char * UserName;
    unsigned char * ComputerName;
    unsigned short Privilege;
    unsigned long AuthFlags;
} RPC_CLIENT_INFORMATION1, * PRPC_CLIENT_INFORMATION1;

RPC_STATUS
RpcBindingServerFromClient (
    RPC_BINDING_HANDLE ClientBinding,
    RPC_BINDING_HANDLE * ServerBinding
    );

void
RpcRaiseException (
    RPC_STATUS exception
    );

RPC_STATUS
RpcTestCancel(
    );

RPC_STATUS
RpcCancelThread(
    void * Thread
    );


RPC_STATUS
UuidCreate (
    UUID * Uuid
    );




RPC_STATUS
UuidToStringA (
    UUID * Uuid,
    unsigned char * * StringUuid
    );


RPC_STATUS
UuidFromStringA (
    unsigned char * StringUuid,
    UUID * Uuid
    );


RPC_STATUS
UuidToStringW (
    UUID * Uuid,
    unsigned short * * StringUuid
    );


RPC_STATUS
UuidFromStringW (
    unsigned short * StringUuid,
    UUID * Uuid
    );
# 1395 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
signed int
UuidCompare (
    UUID * Uuid1,
    UUID * Uuid2,
    RPC_STATUS * Status
    );

RPC_STATUS
UuidCreateNil (
    UUID * NilUuid
    );

int
UuidEqual (
    UUID * Uuid1,
    UUID * Uuid2,
    RPC_STATUS * Status
    );

unsigned short
UuidHash (
    UUID * Uuid,
    RPC_STATUS * Status
    );

int
UuidIsNil (
    UUID * Uuid,
    RPC_STATUS * Status
    );



RPC_STATUS
RpcEpRegisterNoReplaceA (
    RPC_IF_HANDLE IfSpec,
    RPC_BINDING_VECTOR * BindingVector,
    UUID_VECTOR * UuidVector ,
    unsigned char * Annotation
    );

RPC_STATUS
RpcEpRegisterNoReplaceW (
    RPC_IF_HANDLE IfSpec,
    RPC_BINDING_VECTOR * BindingVector,
    UUID_VECTOR * UuidVector ,
    unsigned short * Annotation
    );

RPC_STATUS
RpcEpRegisterA (
    RPC_IF_HANDLE IfSpec,
    RPC_BINDING_VECTOR * BindingVector,
    UUID_VECTOR * UuidVector ,
    unsigned char * Annotation
    );

RPC_STATUS
RpcEpRegisterW (
    RPC_IF_HANDLE IfSpec,
    RPC_BINDING_VECTOR * BindingVector,
    UUID_VECTOR * UuidVector ,
    unsigned short * Annotation
    );
# 1489 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
RPC_STATUS
RpcEpUnregister(
    RPC_IF_HANDLE IfSpec,
    RPC_BINDING_VECTOR * BindingVector,
    UUID_VECTOR * UuidVector
    );



RPC_STATUS
DceErrorInqTextA (
    RPC_STATUS RpcStatus,
    unsigned char * ErrorText
    );

RPC_STATUS
DceErrorInqTextW (
    RPC_STATUS RpcStatus,
    unsigned short * ErrorText
    );
# 1528 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
typedef I_RPC_HANDLE * RPC_EP_INQ_HANDLE;
# 1541 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
RPC_STATUS
RpcMgmtEpEltInqBegin (
    RPC_BINDING_HANDLE EpBinding ,
    unsigned long InquiryType,
    RPC_IF_ID * IfId ,
    unsigned long VersOption ,
    UUID * ObjectUuid ,
    RPC_EP_INQ_HANDLE * InquiryContext
    );

RPC_STATUS
RpcMgmtEpEltInqDone (
    RPC_EP_INQ_HANDLE * InquiryContext
    );



RPC_STATUS
RpcMgmtEpEltInqNextA (
    RPC_EP_INQ_HANDLE InquiryContext,
    RPC_IF_ID * IfId,
    RPC_BINDING_HANDLE * Binding ,
    UUID * ObjectUuid ,
    unsigned char * * Annotation
    );

RPC_STATUS
RpcMgmtEpEltInqNextW (
    RPC_EP_INQ_HANDLE InquiryContext,
    RPC_IF_ID * IfId,
    RPC_BINDING_HANDLE * Binding ,
    UUID * ObjectUuid ,
    unsigned short * * Annotation
    );
# 1594 "/usr/local/arm-wince-pe/include/rpcdce.h" 3
RPC_STATUS
RpcMgmtEpUnregister (
    RPC_BINDING_HANDLE EpBinding ,
    RPC_IF_ID * IfId,
    RPC_BINDING_HANDLE Binding,
    UUID * ObjectUuid
    );

typedef int
( * RPC_MGMT_AUTHORIZATION_FN) (
    RPC_BINDING_HANDLE ClientBinding,
    unsigned long RequestedMgmtOperation,
    RPC_STATUS * Status
    );







RPC_STATUS
RpcMgmtSetAuthorizationFn (
    RPC_MGMT_AUTHORIZATION_FN AuthorizationFn
    );





RPC_STATUS
RpcMgmtInqParameter (
    unsigned Parameter,
    unsigned long * Value
    );

RPC_STATUS
RpcMgmtSetParameter (
    unsigned Parameter,
    unsigned long Value
    );

RPC_STATUS
RpcMgmtBindingInqParameter (
    RPC_BINDING_HANDLE Handle,
    unsigned Parameter,
    unsigned long * Value
    );

RPC_STATUS
RpcMgmtBindingSetParameter (
    RPC_BINDING_HANDLE Handle,
    unsigned Parameter,
    unsigned long Value
    );




# 1 "/usr/local/arm-wince-pe/include/rpcdcep.h" 1 3
# 30 "/usr/local/arm-wince-pe/include/rpcdcep.h" 3
typedef struct _RPC_VERSION {
    unsigned short MajorVersion;
    unsigned short MinorVersion;
} RPC_VERSION;

typedef struct _RPC_SYNTAX_IDENTIFIER {
    GUID SyntaxGUID;
    RPC_VERSION SyntaxVersion;
} RPC_SYNTAX_IDENTIFIER, * PRPC_SYNTAX_IDENTIFIER;


typedef struct _RPC_MESSAGE {
    RPC_BINDING_HANDLE Handle;
    unsigned long DataRepresentation;
    void * Buffer;
    unsigned int BufferLength;
    unsigned int ProcNum;
    PRPC_SYNTAX_IDENTIFIER TransferSyntax;
    void * RpcInterfaceInformation;
    void * ReservedForRuntime;
    void * ManagerEpv;
    void * ImportContext;
    unsigned long RpcFlags;
} RPC_MESSAGE, * PRPC_MESSAGE;


typedef RPC_STATUS RPC_FORWARD_FUNCTION(
                       UUID * InterfaceId,
                       RPC_VERSION * InterfaceVersion,
                       UUID * ObjectId,
                       unsigned char * Rpcpro,
                       void * * ppDestEndpoint);
# 90 "/usr/local/arm-wince-pe/include/rpcdcep.h" 3
typedef
void
( * RPC_DISPATCH_FUNCTION) (
    PRPC_MESSAGE Message
    );

typedef struct {
    unsigned int DispatchTableCount;
    RPC_DISPATCH_FUNCTION * DispatchTable;
    int Reserved;
} RPC_DISPATCH_TABLE, * PRPC_DISPATCH_TABLE;

typedef struct _RPC_PROTSEQ_ENDPOINT
{
    unsigned char * RpcProtocolSequence;
    unsigned char * Endpoint;
} RPC_PROTSEQ_ENDPOINT, * PRPC_PROTSEQ_ENDPOINT;
# 115 "/usr/local/arm-wince-pe/include/rpcdcep.h" 3
typedef struct _RPC_SERVER_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    void *DefaultManagerEpv;
    void const *InterpreterInfo;
    unsigned int Flags ;
} RPC_SERVER_INTERFACE, * PRPC_SERVER_INTERFACE;

typedef struct _RPC_CLIENT_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    unsigned long Reserved;
    void const * InterpreterInfo;
    unsigned int Flags ;
} RPC_CLIENT_INTERFACE, * PRPC_CLIENT_INTERFACE;

RPC_STATUS
I_RpcGetBuffer (
    RPC_MESSAGE * Message
    );

RPC_STATUS
I_RpcSendReceive (
    RPC_MESSAGE * Message
    );

RPC_STATUS
I_RpcFreeBuffer (
    RPC_MESSAGE * Message
    );

RPC_STATUS
I_RpcSend (
    PRPC_MESSAGE Message
    ) ;

RPC_STATUS
I_RpcReceive (
    PRPC_MESSAGE Message,
    unsigned int Size
    ) ;

RPC_STATUS
I_RpcFreePipeBuffer (
    RPC_MESSAGE * Message
    ) ;

RPC_STATUS
I_RpcReallocPipeBuffer (
    PRPC_MESSAGE Message,
    unsigned int NewSize
    ) ;

typedef void * I_RPC_MUTEX;

void
I_RpcRequestMutex (
    I_RPC_MUTEX * Mutex
    );

void
I_RpcClearMutex (
    I_RPC_MUTEX Mutex
    );

void
I_RpcDeleteMutex (
    I_RPC_MUTEX Mutex
    );

void *
I_RpcAllocate (
    unsigned int Size
    );

void
I_RpcFree (
    void * Object
    );

void
I_RpcPauseExecution (
    unsigned long Milliseconds
    );

typedef
void
( * PRPC_RUNDOWN) (
    void * AssociationContext
    );

RPC_STATUS
I_RpcMonitorAssociation (
    RPC_BINDING_HANDLE Handle,
    PRPC_RUNDOWN RundownRoutine,
    void * Context
    );

RPC_STATUS
I_RpcStopMonitorAssociation (
    RPC_BINDING_HANDLE Handle
    );

RPC_BINDING_HANDLE
I_RpcGetCurrentCallHandle(
    void
    );

RPC_STATUS
I_RpcGetAssociationContext (
    void * * AssociationContext
    );

RPC_STATUS
I_RpcSetAssociationContext (
    void * AssociationContext
    );



RPC_STATUS
I_RpcNsBindingSetEntryName (
    RPC_BINDING_HANDLE Binding,
    unsigned long EntryNameSyntax,
    unsigned short * EntryName
    );
# 265 "/usr/local/arm-wince-pe/include/rpcdcep.h" 3
RPC_STATUS
I_RpcBindingInqDynamicEndpoint (
    RPC_BINDING_HANDLE Binding,
    unsigned short * * DynamicEndpoint
    );
# 286 "/usr/local/arm-wince-pe/include/rpcdcep.h" 3
RPC_STATUS
I_RpcBindingInqTransportType (
    RPC_BINDING_HANDLE Binding,
    unsigned int * Type
    );

typedef struct _RPC_TRANSFER_SYNTAX
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_TRANSFER_SYNTAX;

RPC_STATUS
I_RpcIfInqTransferSyntaxes (
    RPC_IF_HANDLE RpcIfHandle,
    RPC_TRANSFER_SYNTAX * TransferSyntaxes,
    unsigned int TransferSyntaxSize,
    unsigned int * TransferSyntaxCount
    );

RPC_STATUS
I_UuidCreate (
    UUID * Uuid
    );

RPC_STATUS
I_RpcBindingCopy (
    RPC_BINDING_HANDLE SourceBinding,
    RPC_BINDING_HANDLE * DestinationBinding
    );

RPC_STATUS
I_RpcBindingIsClientLocal (
    RPC_BINDING_HANDLE BindingHandle ,
    unsigned int * ClientLocalFlag
    );

void
I_RpcSsDontSerializeContext (
    void
    );

RPC_STATUS
I_RpcLaunchDatagramReceiveThread(
    void * pAddress
    );

RPC_STATUS
I_RpcServerRegisterForwardFunction (
    RPC_FORWARD_FUNCTION * pForwardFunction
    );


RPC_STATUS
I_RpcConnectionInqSockBuffSize(
  unsigned long * RecvBuffSize,
  unsigned long * SendBuffSize
  );

RPC_STATUS
I_RpcConnectionSetSockBuffSize(
   unsigned long RecvBuffSize,
   unsigned long SendBuffSize
   );



RPC_STATUS
I_RpcServerStartListening(
    HWND hWnd
    ) ;

RPC_STATUS
I_RpcServerStopListening(
    ) ;

RPC_STATUS
I_RpcGetThreadWindowHandle(
    HWND *WindowHandle
    ) ;

typedef RPC_STATUS (*RPC_BLOCKING_FN) (
    void *wnd,
    void *Context,
    HANDLE hSyncEvent
    ) ;

RPC_STATUS
I_RpcAsyncSendReceive(
    PRPC_MESSAGE pRpcMessage,
    void *Context,
    HWND hWnd
    ) ;

RPC_STATUS
I_RpcBindingSetAsync(
    RPC_BINDING_HANDLE Binding,
    RPC_BLOCKING_FN BlockingFn
    ) ;

LONG
I_RpcWindowProc(
    HWND hWnd,
    UINT Message,
    WPARAM wParam,
    LPARAM lParam
    ) ;

RPC_STATUS
I_RpcSetWMsgEndpoint (
    WCHAR * Endpoint
    ) ;


RPC_STATUS
I_RpcServerInqTransportType(
    unsigned int * Type
    ) ;
# 1654 "/usr/local/arm-wince-pe/include/rpcdce.h" 2 3
# 77 "/usr/local/arm-wince-pe/include/rpc.h" 2 3

# 1 "/usr/local/arm-wince-pe/include/rpcnterr.h" 1 3
# 79 "/usr/local/arm-wince-pe/include/rpc.h" 2 3


# 1 "/usr/local/arm-wince-pe/include/excpt.h" 1 3
# 22 "/usr/local/arm-wince-pe/include/excpt.h" 3
typedef enum _EXCEPTION_DISPOSITION {
    ExceptionContinueExecution,
    ExceptionContinueSearch,
    ExceptionNestedException,
    ExceptionCollidedUnwind,
    ExceptionExecuteHandler
} EXCEPTION_DISPOSITION;
# 38 "/usr/local/arm-wince-pe/include/excpt.h" 3
typedef struct _EXCEPTION_POINTERS *Exception_info_ptr;
struct _EXCEPTION_RECORD;
struct _RUNTIME_FUNCTION;
struct _EXCEPTION_REGISTRATION_RECORD;


struct _CONTEXT;
typedef PCONTEXT LPCONTEXT;
typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;

typedef struct _DISPATCHER_CONTEXT {




    ULONG ControlPc;
    struct _RUNTIME_FUNCTION *FunctionEntry;
    ULONG EstablisherFrame;
    PCONTEXT ContextRecord;

} DISPATCHER_CONTEXT, *PDISPATCHER_CONTEXT;

typedef EXCEPTION_DISPOSITION EXCEPTION_ROUTINE (
        struct _EXCEPTION_RECORD *ExceptionRecord,
        void *EstablisherFrame,
        struct _CONTEXT *ContextRecord,
        struct _DISPATCHER_CONTEXT *DispatcherContext
        );
typedef EXCEPTION_ROUTINE *PEXCEPTION_ROUTINE;




EXCEPTION_ROUTINE __C_specific_handler;
# 82 "/usr/local/arm-wince-pe/include/rpc.h" 2 3
# 119 "/usr/local/arm-wince-pe/include/rpc.h" 3
RPC_STATUS
RpcImpersonateClient (
    RPC_BINDING_HANDLE BindingHandle
    );

RPC_STATUS
RpcRevertToSelfEx (
    RPC_BINDING_HANDLE BindingHandle
    );

RPC_STATUS
RpcRevertToSelf (
    );

long
I_RpcMapWin32Status (
    RPC_STATUS Status
    );
# 13 "/usr/local/arm-wince-pe/include/objbase.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/rpcndr.h" 1 3
# 125 "/usr/local/arm-wince-pe/include/rpcndr.h" 3
typedef unsigned char byte;
typedef unsigned char boolean;
# 177 "/usr/local/arm-wince-pe/include/rpcndr.h" 3
void * MIDL_user_allocate(size_t);
void MIDL_user_free( void * );
# 206 "/usr/local/arm-wince-pe/include/rpcndr.h" 3
typedef void * NDR_CCONTEXT;

typedef struct
    {
    void * pad[2];
    void * userContext;
    } * NDR_SCONTEXT;





typedef void ( * NDR_RUNDOWN)(void * context);

typedef struct _SCONTEXT_QUEUE {
    unsigned long NumberOfObjects;
    NDR_SCONTEXT * ArrayOfObjects;
    } SCONTEXT_QUEUE, * PSCONTEXT_QUEUE;

RPC_BINDING_HANDLE
NDRCContextBinding (
    NDR_CCONTEXT CContext
    );

void
NDRCContextMarshall (
        NDR_CCONTEXT CContext,
        void *pBuff
        );

void
NDRCContextUnmarshall (
        NDR_CCONTEXT *pCContext,
        RPC_BINDING_HANDLE hBinding,
        void *pBuff,
        unsigned long DataRepresentation
        );

void
NDRSContextMarshall (
        NDR_SCONTEXT CContext,
        void *pBuff,
        NDR_RUNDOWN userRunDownIn
        );

NDR_SCONTEXT
NDRSContextUnmarshall (
    void *pBuff,
    unsigned long DataRepresentation
    );

void
RpcSsDestroyClientContext (
    void * * ContextHandle
    );
# 349 "/usr/local/arm-wince-pe/include/rpcndr.h" 3
void
NDRcopy (
    void *pTarget,
    void *pSource,
    unsigned int size
    );

size_t
MIDL_wchar_strlen (
    wchar_t * s
    );

void
MIDL_wchar_strcpy (
    void * t,
    wchar_t * s
    );

void
char_from_ndr (
    PRPC_MESSAGE SourceMessage,
    unsigned char * Target
    );

void
char_array_from_ndr (
    PRPC_MESSAGE SourceMessage,
    unsigned long LowerIndex,
    unsigned long UpperIndex,
    unsigned char * Target
    );

void
short_from_ndr (
    PRPC_MESSAGE source,
    unsigned short * target
    );

void
short_array_from_ndr(
    PRPC_MESSAGE SourceMessage,
    unsigned long LowerIndex,
    unsigned long UpperIndex,
    unsigned short * Target
    );

void
short_from_ndr_temp (
    unsigned char * * source,
    unsigned short * target,
    unsigned long format
    );

void
long_from_ndr (
    PRPC_MESSAGE source,
    unsigned long * target
    );

void
long_array_from_ndr(
    PRPC_MESSAGE SourceMessage,
    unsigned long LowerIndex,
    unsigned long UpperIndex,
    unsigned long * Target
    );

void
long_from_ndr_temp (
    unsigned char * * source,
    unsigned long * target,
    unsigned long format
    );

void
enum_from_ndr(
    PRPC_MESSAGE SourceMessage,
    unsigned int * Target
    );

void
float_from_ndr (
    PRPC_MESSAGE SourceMessage,
    void * Target
    );

void
float_array_from_ndr (
    PRPC_MESSAGE SourceMessage,
    unsigned long LowerIndex,
    unsigned long UpperIndex,
    void * Target
    );

void
double_from_ndr (
    PRPC_MESSAGE SourceMessage,
    void * Target
    );

void
double_array_from_ndr (
    PRPC_MESSAGE SourceMessage,
    unsigned long LowerIndex,
    unsigned long UpperIndex,
    void * Target
    );

void
hyper_from_ndr (
    PRPC_MESSAGE source,
    __int64 * target
    );

void
hyper_array_from_ndr(
    PRPC_MESSAGE SourceMessage,
    unsigned long LowerIndex,
    unsigned long UpperIndex,
    __int64 * Target
    );

void
hyper_from_ndr_temp (
    unsigned char * * source,
    __int64 * target,
    unsigned long format
    );

void
data_from_ndr (
    PRPC_MESSAGE source,
    void * target,
    char * format,
    unsigned char MscPak
    );

void
data_into_ndr (
    void * source,
    PRPC_MESSAGE target,
    char * format,
    unsigned char MscPak
    );

void
tree_into_ndr (
    void * source,
    PRPC_MESSAGE target,
    char * format,
    unsigned char MscPak
    );

void
data_size_ndr (
    void * source,
    PRPC_MESSAGE target,
    char * format,
    unsigned char MscPak
    );

void
tree_size_ndr (
    void * source,
    PRPC_MESSAGE target,
    char * format,
    unsigned char MscPak
    );

void
tree_peek_ndr (
    PRPC_MESSAGE source,
    unsigned char * * buffer,
    char * format,
    unsigned char MscPak
    );

void *
midl_allocate (
    size_t size
    );





typedef unsigned long error_status_t;
# 617 "/usr/local/arm-wince-pe/include/rpcndr.h" 3
struct _MIDL_STUB_MESSAGE;
struct _MIDL_STUB_DESC;
struct _FULL_PTR_XLAT_TABLES;

typedef unsigned char * RPC_BUFPTR;
typedef unsigned long RPC_LENGTH;


typedef void ( * EXPR_EVAL)( struct _MIDL_STUB_MESSAGE * );

typedef const unsigned char * PFORMAT_STRING;




typedef struct
    {
    long Dimension;


    unsigned long * BufferConformanceMark;
    unsigned long * BufferVarianceMark;


    unsigned long * MaxCountArray;
    unsigned long * OffsetArray;
    unsigned long * ActualCountArray;
    } ARRAY_INFO, *PARRAY_INFO;





typedef void
( * NDR_PIPE_PULL_RTN)(
        char * state,
        void * buf,
        unsigned long esize,
        unsigned long * ecount );

typedef void
( * NDR_PIPE_PUSH_RTN)(
        char * state,
        void * buf,
        unsigned long ecount );

typedef void
( * NDR_PIPE_ALLOC_RTN)(
        char * state,
        unsigned long bsize,
        void * * buf,
        unsigned long * bcount );


typedef struct _GENERIC_PIPE_TYPE
    {
    NDR_PIPE_PULL_RTN pfnPull;
    NDR_PIPE_PUSH_RTN pfnPush;
    NDR_PIPE_ALLOC_RTN pfnAlloc;
    char * pState;
    } GENERIC_PIPE_TYPE;


typedef struct {
    int CurrentState;
    int ElemsInChunk;
    int ElemAlign;
    int ElemWireSize;
    int ElemMemSize;
    int PartialBufferSize;
    unsigned char * PartialElem;
    int PartialElemSize;
    int PartialOffset;
    int EndOfPipe;
    } NDR_PIPE_STATE;

typedef struct _PIPE_MESSAGE
    {
    unsigned short Signature;
    unsigned short PipeId;
    GENERIC_PIPE_TYPE * pPipeType;
    PFORMAT_STRING pTypeFormat;
    unsigned short PipeStatus;
    unsigned short PipeFlags;
    struct _MIDL_STUB_MESSAGE * pStubMsg;
    } NDR_PIPE_MESSAGE, * PNDR_PIPE_MESSAGE;

typedef struct _NDR_PIPE_DESC
    {
    NDR_PIPE_MESSAGE * pPipeMsg;
    short CurrentPipe;
    short InPipes;
    short OutPipes;
    short TotalPipes;
    short PipeVersion;
    short Flags;
    unsigned char * DispatchBuffer;
    unsigned char * LastPartialBuffer;
    unsigned long LastPartialSize;
    unsigned char * BufferSave;
    unsigned long LengthSave;
    NDR_PIPE_STATE RuntimeState;
    } NDR_PIPE_DESC, * PNDR_PIPE_DESC;






# 1 "/usr/local/arm-wince-pe/include/pshpack4.h" 1 3
# 30 "/usr/local/arm-wince-pe/include/pshpack4.h" 3
#pragma pack(4)
# 727 "/usr/local/arm-wince-pe/include/rpcndr.h" 2 3


typedef struct _MIDL_STUB_MESSAGE
    {

    PRPC_MESSAGE RpcMsg;


    unsigned char * Buffer;





    unsigned char * BufferStart;
    unsigned char * BufferEnd;
# 751 "/usr/local/arm-wince-pe/include/rpcndr.h" 3
    unsigned char * BufferMark;


    unsigned long BufferLength;


    unsigned long MemorySize;


    unsigned char * Memory;


    int IsClient;


    int ReuseBuffer;


    unsigned char * AllocAllNodesMemory;


    unsigned char * AllocAllNodesMemoryEnd;






    int IgnoreEmbeddedPointers;





    unsigned char * PointerBufferMark;




    unsigned char fBufferValid;




    unsigned char uFlags;





    unsigned long MaxCount;





    unsigned long Offset;





    unsigned long ActualCount;


    void * ( * pfnAllocate)(size_t);
    void ( * pfnFree)(void *);







    unsigned char * StackTop;





    unsigned char * pPresentedType;
    unsigned char * pTransmitType;
# 842 "/usr/local/arm-wince-pe/include/rpcndr.h" 3
    handle_t SavedHandle;




    const struct _MIDL_STUB_DESC * StubDesc;




    struct _FULL_PTR_XLAT_TABLES * FullPtrXlatTables;

    unsigned long FullPtrRefId;





    int fCheckBounds;

    int fInDontFree :1;
    int fDontCallFreeInst :1;
    int fInOnlyParam :1;
    int fHasReturn :1;

    unsigned long dwDestContext;
    void * pvDestContext;

    NDR_SCONTEXT * SavedContextHandles;

    long ParamNumber;

    struct IRpcChannelBuffer * pRpcChannelBuffer;

    PARRAY_INFO pArrayInfo;





    unsigned long * SizePtrCountArray;
    unsigned long * SizePtrOffsetArray;
    unsigned long * SizePtrLengthArray;




    void * pArgQueue;

    unsigned long dwStubPhase;





    NDR_PIPE_DESC * pPipeDesc;

    unsigned long Reserved[4];





    } MIDL_STUB_MESSAGE, *PMIDL_STUB_MESSAGE;


# 1 "/usr/local/arm-wince-pe/include/poppack.h" 1 3
# 34 "/usr/local/arm-wince-pe/include/poppack.h" 3
#pragma pack()
# 909 "/usr/local/arm-wince-pe/include/rpcndr.h" 2 3





typedef void *
        ( * GENERIC_BINDING_ROUTINE)
        (void *);
typedef void
        ( * GENERIC_UNBIND_ROUTINE)
        (void *, unsigned char *);

typedef struct _GENERIC_BINDING_ROUTINE_PAIR
    {
    GENERIC_BINDING_ROUTINE pfnBind;
    GENERIC_UNBIND_ROUTINE pfnUnbind;
    } GENERIC_BINDING_ROUTINE_PAIR, *PGENERIC_BINDING_ROUTINE_PAIR;

typedef struct __GENERIC_BINDING_INFO
    {
    void * pObj;
    unsigned int Size;
    GENERIC_BINDING_ROUTINE pfnBind;
    GENERIC_UNBIND_ROUTINE pfnUnbind;
    } GENERIC_BINDING_INFO, *PGENERIC_BINDING_INFO;
# 946 "/usr/local/arm-wince-pe/include/rpcndr.h" 3
typedef void ( * XMIT_HELPER_ROUTINE)
    ( PMIDL_STUB_MESSAGE );

typedef struct _XMIT_ROUTINE_QUINTUPLE
    {
    XMIT_HELPER_ROUTINE pfnTranslateToXmit;
    XMIT_HELPER_ROUTINE pfnTranslateFromXmit;
    XMIT_HELPER_ROUTINE pfnFreeXmit;
    XMIT_HELPER_ROUTINE pfnFreeInst;
    } XMIT_ROUTINE_QUINTUPLE, *PXMIT_ROUTINE_QUINTUPLE;

typedef unsigned long
( * USER_MARSHAL_SIZING_ROUTINE)
    (unsigned long *,
     unsigned long,
     void * );

typedef unsigned char *
( * USER_MARSHAL_MARSHALLING_ROUTINE)
    (unsigned long *,
     unsigned char * ,
     void * );

typedef unsigned char *
( * USER_MARSHAL_UNMARSHALLING_ROUTINE)
    (unsigned long *,
     unsigned char * ,
     void * );

typedef void ( * USER_MARSHAL_FREEING_ROUTINE)
    (unsigned long *,
     void * );

typedef struct _USER_MARSHAL_ROUTINE_QUADRUPLE
    {
    USER_MARSHAL_SIZING_ROUTINE pfnBufferSize;
    USER_MARSHAL_MARSHALLING_ROUTINE pfnMarshall;
    USER_MARSHAL_UNMARSHALLING_ROUTINE pfnUnmarshall;
    USER_MARSHAL_FREEING_ROUTINE pfnFree;
    } USER_MARSHAL_ROUTINE_QUADRUPLE;

typedef struct _USER_MARSHAL_CB
{
    unsigned long Flags;
    PMIDL_STUB_MESSAGE pStubMsg;
    PFORMAT_STRING pReserve;
} USER_MARSHAL_CB;





typedef struct _MALLOC_FREE_STRUCT
    {
    void * ( * pfnAllocate)(size_t);
    void ( * pfnFree)(void *);
    } MALLOC_FREE_STRUCT;

typedef struct _COMM_FAULT_OFFSETS
    {
    short CommOffset;
    short FaultOffset;
    } COMM_FAULT_OFFSETS;





typedef struct _MIDL_STUB_DESC
    {

    void * RpcInterfaceInformation;

    void * ( * pfnAllocate)(size_t);
    void ( * pfnFree)(void *);

    union
        {
        handle_t * pAutoHandle;
        handle_t * pPrimitiveHandle;
        PGENERIC_BINDING_INFO pGenericBindingInfo;
        } IMPLICIT_HANDLE_INFO;

    const NDR_RUNDOWN * apfnNdrRundownRoutines;
    const GENERIC_BINDING_ROUTINE_PAIR * aGenericBindingRoutinePairs;

    const EXPR_EVAL * apfnExprEval;

    const XMIT_ROUTINE_QUINTUPLE * aXmitQuintuple;

    const unsigned char * pFormatTypes;

    int fCheckBounds;


    unsigned long Version;





    MALLOC_FREE_STRUCT * pMallocFreeStruct;

    long MIDLVersion;

    const COMM_FAULT_OFFSETS * CommFaultOffsets;



    const USER_MARSHAL_ROUTINE_QUADRUPLE * aUserMarshalQuadruple;

    long Reserved1;
    long Reserved2;
    long Reserved3;
    long Reserved4;
    long Reserved5;

    } MIDL_STUB_DESC;

typedef const MIDL_STUB_DESC * PMIDL_STUB_DESC;

typedef void * PMIDL_XMIT_TYPE;





#pragma warning( disable:4200 )

typedef struct _MIDL_FORMAT_STRING
    {
    short Pad;
    unsigned char Format[];
    } MIDL_FORMAT_STRING;

#pragma warning( default:4200 )





typedef void ( * STUB_THUNK)( PMIDL_STUB_MESSAGE );

typedef long ( * SERVER_ROUTINE)();




typedef struct _MIDL_SERVER_INFO_
    {
    PMIDL_STUB_DESC pStubDesc;
    const SERVER_ROUTINE * DispatchTable;
    PFORMAT_STRING ProcString;
    const unsigned short * FmtStringOffset;
    const STUB_THUNK * ThunkTable;
    PFORMAT_STRING LocalFormatTypes;
    PFORMAT_STRING LocalProcString;
    const unsigned short * LocalFmtStringOffset;
    } MIDL_SERVER_INFO, *PMIDL_SERVER_INFO;




typedef struct _MIDL_STUBLESS_PROXY_INFO
    {
    PMIDL_STUB_DESC pStubDesc;
    PFORMAT_STRING ProcFormatString;
    const unsigned short * FormatStringOffset;
    PFORMAT_STRING LocalFormatTypes;
    PFORMAT_STRING LocalProcString;
    const unsigned short * LocalFmtStringOffset;
    } MIDL_STUBLESS_PROXY_INFO;

typedef MIDL_STUBLESS_PROXY_INFO * PMIDL_STUBLESS_PROXY_INFO;




typedef union _CLIENT_CALL_RETURN
    {
    void * Pointer;
    long Simple;
    } CLIENT_CALL_RETURN;





typedef enum
        {
        XLAT_SERVER = 1,
        XLAT_CLIENT
        } XLAT_SIDE;





typedef struct _FULL_PTR_TO_REFID_ELEMENT
    {
    struct _FULL_PTR_TO_REFID_ELEMENT * Next;

    void * Pointer;
    unsigned long RefId;
    unsigned char State;
    } FULL_PTR_TO_REFID_ELEMENT, *PFULL_PTR_TO_REFID_ELEMENT;




typedef struct _FULL_PTR_XLAT_TABLES
    {



    struct
        {
        void * * XlatTable;
        unsigned char * StateTable;
        unsigned long NumberOfEntries;
        } RefIdToPointer;




    struct
        {
        PFULL_PTR_TO_REFID_ELEMENT * XlatTable;
        unsigned long NumberOfBuckets;
        unsigned long HashMask;
        } PointerToRefId;




    unsigned long NextRefId;
# 1190 "/usr/local/arm-wince-pe/include/rpcndr.h" 3
    XLAT_SIDE XlatSide;
    } FULL_PTR_XLAT_TABLES, *PFULL_PTR_XLAT_TABLES;
# 1201 "/usr/local/arm-wince-pe/include/rpcndr.h" 3
void
NdrSimpleTypeMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    unsigned char FormatChar
    );

unsigned char *
NdrPointerMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



unsigned char *
NdrSimpleStructMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

unsigned char *
NdrConformantStructMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

unsigned char *
NdrConformantVaryingStructMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

unsigned char *
NdrHardStructMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

unsigned char *
NdrComplexStructMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



unsigned char *
NdrFixedArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

unsigned char *
NdrConformantArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

unsigned char *
NdrConformantVaryingArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

unsigned char *
NdrVaryingArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

unsigned char *
NdrComplexArrayMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



unsigned char *
NdrNonConformantStringMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

unsigned char *
NdrConformantStringMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



unsigned char *
NdrEncapsulatedUnionMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

unsigned char *
NdrNonEncapsulatedUnionMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



unsigned char *
NdrByteCountPointerMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



unsigned char *
NdrXmitOrRepAsMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



unsigned char *
NdrUserMarshalMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



unsigned char *
NdrInterfacePointerMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



void
NdrClientContextMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    NDR_CCONTEXT ContextHandle,
    int fCheck
    );

void
NdrServerContextMarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    NDR_SCONTEXT ContextHandle,
    NDR_RUNDOWN RundownRoutine
    );





void
NdrSimpleTypeUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    unsigned char FormatChar
    );

unsigned char *
NdrPointerUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



unsigned char *
NdrSimpleStructUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

unsigned char *
NdrConformantStructUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

unsigned char *
NdrConformantVaryingStructUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

unsigned char *
NdrHardStructUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

unsigned char *
NdrComplexStructUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



unsigned char *
NdrFixedArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

unsigned char *
NdrConformantArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

unsigned char *
NdrConformantVaryingArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

unsigned char *
NdrVaryingArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

unsigned char *
NdrComplexArrayUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



unsigned char *
NdrNonConformantStringUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

unsigned char *
NdrConformantStringUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



unsigned char *
NdrEncapsulatedUnionUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );

unsigned char *
NdrNonEncapsulatedUnionUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



unsigned char *
NdrByteCountPointerUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



unsigned char *
NdrXmitOrRepAsUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



unsigned char *
NdrUserMarshalUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



unsigned char *
NdrInterfacePointerUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * ppMemory,
    PFORMAT_STRING pFormat,
    unsigned char fMustAlloc
    );



void
NdrClientContextUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg,
    NDR_CCONTEXT * pContextHandle,
    RPC_BINDING_HANDLE BindHandle
    );

NDR_SCONTEXT
NdrServerContextUnmarshall(
    PMIDL_STUB_MESSAGE pStubMsg
    );





void
NdrPointerBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



void
NdrSimpleStructBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

void
NdrConformantStructBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

void
NdrConformantVaryingStructBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

void
NdrHardStructBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

void
NdrComplexStructBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



void
NdrFixedArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

void
NdrConformantArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

void
NdrConformantVaryingArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

void
NdrVaryingArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

void
NdrComplexArrayBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



void
NdrConformantStringBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

void
NdrNonConformantStringBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



void
NdrEncapsulatedUnionBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

void
NdrNonEncapsulatedUnionBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



void
NdrByteCountPointerBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



void
NdrXmitOrRepAsBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



void
NdrUserMarshalBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



void
NdrInterfacePointerBufferSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



void
NdrContextHandleSize(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );





unsigned long
NdrPointerMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



unsigned long
NdrSimpleStructMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

unsigned long
NdrConformantStructMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

unsigned long
NdrConformantVaryingStructMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

unsigned long
NdrHardStructMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

unsigned long
NdrComplexStructMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



unsigned long
NdrFixedArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

unsigned long
NdrConformantArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

unsigned long
NdrConformantVaryingArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

unsigned long
NdrVaryingArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

unsigned long
NdrComplexArrayMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



unsigned long
NdrConformantStringMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

unsigned long
NdrNonConformantStringMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



unsigned long
NdrEncapsulatedUnionMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );

unsigned long
NdrNonEncapsulatedUnionMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



unsigned long
NdrXmitOrRepAsMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



unsigned long
NdrUserMarshalMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



unsigned long
NdrInterfacePointerMemorySize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );





void
NdrPointerFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



void
NdrSimpleStructFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

void
NdrConformantStructFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

void
NdrConformantVaryingStructFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

void
NdrHardStructFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

void
NdrComplexStructFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



void
NdrFixedArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

void
NdrConformantArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

void
NdrConformantVaryingArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

void
NdrVaryingArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

void
NdrComplexArrayFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



void
NdrEncapsulatedUnionFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );

void
NdrNonEncapsulatedUnionFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



void
NdrByteCountPointerFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



void
NdrXmitOrRepAsFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



void
NdrUserMarshalFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );



void
NdrInterfacePointerFree(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pMemory,
    PFORMAT_STRING pFormat
    );





void
NdrConvert2(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat,
    long NumberParams
    );

void
NdrConvert(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );
# 2021 "/usr/local/arm-wince-pe/include/rpcndr.h" 3
unsigned char *
NdrUserMarshalSimpleTypeConvert(
    unsigned long * pFlags,
    unsigned char * pBuffer,
    unsigned char FormatChar
    );





void
NdrClientInitializeNew(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    unsigned int ProcNum
    );

unsigned char *
NdrServerInitializeNew(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor
    );

void
NdrServerInitializePartial(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    unsigned long RequestedBufferSize
    );

void
NdrClientInitialize(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    unsigned int ProcNum
    );

unsigned char *
NdrServerInitialize(
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor
    );

unsigned char *
NdrServerInitializeUnmarshall (
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    PRPC_MESSAGE pRpcMsg
    );

void
NdrServerInitializeMarshall (
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg
    );

unsigned char *
NdrGetBuffer(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned long BufferLength,
    RPC_BINDING_HANDLE Handle
    );

unsigned char *
NdrNsGetBuffer(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned long BufferLength,
    RPC_BINDING_HANDLE Handle
    );

unsigned char *
NdrGetPipeBuffer(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned long BufferLength,
    RPC_BINDING_HANDLE Handle );

void
NdrGetPartialBuffer(
    PMIDL_STUB_MESSAGE pStubMsg );

unsigned char *
NdrSendReceive(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pBufferEnd
    );

unsigned char *
NdrNsSendReceive(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * pBufferEnd,
    RPC_BINDING_HANDLE * pAutoHandle
    );

void
NdrPipeSendReceive(
    PMIDL_STUB_MESSAGE pStubMsg,
    NDR_PIPE_DESC * pPipeDesc
    );

void
NdrFreeBuffer(
    PMIDL_STUB_MESSAGE pStubMsg
    );


unsigned long
NdrGetDcomProtocolVersion(
    PMIDL_STUB_MESSAGE pStubMsg,
    RPC_VERSION * pVersion );





void
NdrPipesInitialize(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pParamDesc,
    NDR_PIPE_DESC * pPipeDesc,
    NDR_PIPE_MESSAGE * pPipeMsg,
    char * pStackTop,
    unsigned long NumberParams );

void
NdrMarkNextActivePipe(
    NDR_PIPE_DESC * pPipeDesc,
    unsigned int DirectionMask );

void
NdrPipePull(
    char * pState,
    void * buf,
    unsigned long esize,
    unsigned long * ecount );

void
NdrPipePush(
    char * pState,
    void * buf,
    unsigned long ecount );

void
NdrIsAppDoneWithPipes(
    NDR_PIPE_DESC * pPipeDesc
    );

void
NdrPipesDone(
    PMIDL_STUB_MESSAGE pStubMsg
    );
# 2185 "/usr/local/arm-wince-pe/include/rpcndr.h" 3
CLIENT_CALL_RETURN __cdecl
NdrClientCall2(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );

CLIENT_CALL_RETURN __cdecl
NdrClientCall(
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    ...
    );


typedef enum {
    STUB_UNMARSHAL,
    STUB_CALL_SERVER,
    STUB_MARSHAL,
    STUB_CALL_SERVER_NO_HRESULT
}STUB_PHASE;

typedef enum {
    PROXY_CALCSIZE,
    PROXY_GETBUFFER,
    PROXY_MARSHAL,
    PROXY_SENDRECEIVE,
    PROXY_UNMARSHAL
}PROXY_PHASE;

long
NdrStubCall2(
    struct IRpcStubBuffer * pThis,
    struct IRpcChannelBuffer * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );

void
NdrServerCall2(
    PRPC_MESSAGE pRpcMsg
    );

long
NdrStubCall (
    struct IRpcStubBuffer * pThis,
    struct IRpcChannelBuffer * pChannel,
    PRPC_MESSAGE pRpcMsg,
    unsigned long * pdwStubPhase
    );

void
NdrServerCall(
    PRPC_MESSAGE pRpcMsg
    );

int
NdrServerUnmarshall(
    struct IRpcChannelBuffer * pChannel,
    PRPC_MESSAGE pRpcMsg,
    PMIDL_STUB_MESSAGE pStubMsg,
    PMIDL_STUB_DESC pStubDescriptor,
    PFORMAT_STRING pFormat,
    void * pParamList
    );

void
NdrServerMarshall(
    struct IRpcStubBuffer * pThis,
    struct IRpcChannelBuffer * pChannel,
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat
    );



RPC_STATUS
NdrMapCommAndFaultStatus(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned long * pCommStatus,
    unsigned long * pFaultStatus,
    RPC_STATUS Status
    );



int
NdrSH_UPDecision(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * pPtrInMem,
    RPC_BUFPTR pBuffer
    );

int
NdrSH_TLUPDecision(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * pPtrInMem
    );

int
NdrSH_TLUPDecisionBuffer(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * pPtrInMem
    );

int
NdrSH_IfAlloc(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * pPtrInMem,
    unsigned long Count
    );

int
NdrSH_IfAllocRef(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * pPtrInMem,
    unsigned long Count
    );

int
NdrSH_IfAllocSet(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * pPtrInMem,
    unsigned long Count
    );

RPC_BUFPTR
NdrSH_IfCopy(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * pPtrInMem,
    unsigned long Count
    );

RPC_BUFPTR
NdrSH_IfAllocCopy(
    PMIDL_STUB_MESSAGE pStubMsg,
    unsigned char * * pPtrInMem,
    unsigned long Count
    );

unsigned long
NdrSH_Copy(
    unsigned char * pStubMsg,
    unsigned char * pPtrInMem,
    unsigned long Count
    );

void
NdrSH_IfFree(
    PMIDL_STUB_MESSAGE pMessage,
    unsigned char * pPtr );


RPC_BUFPTR
NdrSH_StringMarshall(
    PMIDL_STUB_MESSAGE pMessage,
    unsigned char * pMemory,
    unsigned long Count,
    int Size );

RPC_BUFPTR
NdrSH_StringUnMarshall(
    PMIDL_STUB_MESSAGE pMessage,
    unsigned char * * pMemory,
    int Size );





typedef void * RPC_SS_THREAD_HANDLE;

typedef void *
RPC_CLIENT_ALLOC (
    size_t Size
    );

typedef void
RPC_CLIENT_FREE (
    void * Ptr
    );





void *
RpcSsAllocate (
    size_t Size
    );

void
RpcSsDisableAllocate (
    void
    );

void
RpcSsEnableAllocate (
    void
    );

void
RpcSsFree (
    void * NodeToFree
    );

RPC_SS_THREAD_HANDLE
RpcSsGetThreadHandle (
    void
    );

void
RpcSsSetClientAllocFree (
    RPC_CLIENT_ALLOC * ClientAlloc,
    RPC_CLIENT_FREE * ClientFree
    );

void
RpcSsSetThreadHandle (
    RPC_SS_THREAD_HANDLE Id
    );

void
RpcSsSwapClientAllocFree (
    RPC_CLIENT_ALLOC * ClientAlloc,
    RPC_CLIENT_FREE * ClientFree,
    RPC_CLIENT_ALLOC * * OldClientAlloc,
    RPC_CLIENT_FREE * * OldClientFree
    );





void *
RpcSmAllocate (
    size_t Size,
    RPC_STATUS * pStatus
    );

RPC_STATUS
RpcSmClientFree (
    void * pNodeToFree
    );

RPC_STATUS
RpcSmDestroyClientContext (
    void * * ContextHandle
    );

RPC_STATUS
RpcSmDisableAllocate (
    void
    );

RPC_STATUS
RpcSmEnableAllocate (
    void
    );

RPC_STATUS
RpcSmFree (
    void * NodeToFree
    );

RPC_SS_THREAD_HANDLE
RpcSmGetThreadHandle (
    RPC_STATUS * pStatus
    );

RPC_STATUS
RpcSmSetClientAllocFree (
    RPC_CLIENT_ALLOC * ClientAlloc,
    RPC_CLIENT_FREE * ClientFree
    );

RPC_STATUS
RpcSmSetThreadHandle (
    RPC_SS_THREAD_HANDLE Id
    );

RPC_STATUS
RpcSmSwapClientAllocFree (
    RPC_CLIENT_ALLOC * ClientAlloc,
    RPC_CLIENT_FREE * ClientFree,
    RPC_CLIENT_ALLOC * * OldClientAlloc,
    RPC_CLIENT_FREE * * OldClientFree
    );





void
NdrRpcSsEnableAllocate(
    PMIDL_STUB_MESSAGE pMessage );

void
NdrRpcSsDisableAllocate(
    PMIDL_STUB_MESSAGE pMessage );

void
NdrRpcSmSetClientToOsf(
    PMIDL_STUB_MESSAGE pMessage );

void *
NdrRpcSmClientAllocate (
    size_t Size
    );

void
NdrRpcSmClientFree (
    void * NodeToFree
    );

void *
NdrRpcSsDefaultAllocate (
    size_t Size
    );

void
NdrRpcSsDefaultFree (
    void * NodeToFree
    );
# 2518 "/usr/local/arm-wince-pe/include/rpcndr.h" 3
PFULL_PTR_XLAT_TABLES
NdrFullPointerXlatInit(
    unsigned long NumberOfPointers,
    XLAT_SIDE XlatSide
    );

void
NdrFullPointerXlatFree(
    PFULL_PTR_XLAT_TABLES pXlatTables
    );

int
NdrFullPointerQueryPointer(
    PFULL_PTR_XLAT_TABLES pXlatTables,
    void * pPointer,
    unsigned char QueryType,
    unsigned long * pRefId
    );

int
NdrFullPointerQueryRefId(
    PFULL_PTR_XLAT_TABLES pXlatTables,
    unsigned long RefId,
    unsigned char QueryType,
    void * * ppPointer
    );

void
NdrFullPointerInsertRefId(
    PFULL_PTR_XLAT_TABLES pXlatTables,
    unsigned long RefId,
    void * pPointer
    );

int
NdrFullPointerFree(
    PFULL_PTR_XLAT_TABLES pXlatTables,
    void * Pointer
    );

void *
NdrAllocate(
    PMIDL_STUB_MESSAGE pStubMsg,
    size_t Len
    );

void
NdrClearOutParameters(
    PMIDL_STUB_MESSAGE pStubMsg,
    PFORMAT_STRING pFormat,
    void * ArgAddr
    );






void *
NdrOleAllocate (
    size_t Size
    );

void
NdrOleFree (
    void * NodeToFree
    );
# 14 "/usr/local/arm-wince-pe/include/objbase.h" 2 3




# 1 "/usr/local/arm-wince-pe/include/pshpack8.h" 1 3
# 30 "/usr/local/arm-wince-pe/include/pshpack8.h" 3
#pragma pack(8)
# 19 "/usr/local/arm-wince-pe/include/objbase.h" 2 3
# 314 "/usr/local/arm-wince-pe/include/objbase.h" 3
# 1 "/usr/local/arm-wince-pe/include/stdlib.h" 1 3
# 14 "/usr/local/arm-wince-pe/include/stdlib.h" 3
# 1 "/usr/local/lib/gcc-lib/arm-wince-pe/3.3.3/include/stddef.h" 1 3 4
# 15 "/usr/local/arm-wince-pe/include/stdlib.h" 2 3


# 1 "/usr/local/arm-wince-pe/include/machine/stdlib.h" 1 3
# 18 "/usr/local/arm-wince-pe/include/stdlib.h" 2 3

# 1 "/usr/local/arm-wince-pe/include/alloca.h" 1 3
# 20 "/usr/local/arm-wince-pe/include/stdlib.h" 2 3




typedef struct
{
  int quot;
  int rem;
} div_t;

typedef struct
{
  long quot;
  long rem;
} ldiv_t;
# 45 "/usr/local/arm-wince-pe/include/stdlib.h" 3
extern int __mb_cur_max;



void abort (void) __attribute__ ((noreturn));
int abs (int);
int atexit (void (*__func)(void));
double atof (const char *__nptr);

float atoff (const char *__nptr);

int atoi (const char *__nptr);
long atol (const char *__nptr);
void * bsearch (const void * __key, const void * __base, size_t __nmemb, size_t __size, int (* _compar) (const void *, const void *));




void * calloc (size_t __nmemb, size_t __size);
div_t div (int __numer, int __denom);
void exit (int __status) __attribute__ ((noreturn));
void free (void *);
char * getenv (const char *__string);
char * _getenv_r (struct _reent *, const char *__string);
char * _findenv (const char *, int *);
char * _findenv_r (struct _reent *, const char *, int *);
long labs (long);
ldiv_t ldiv (long __numer, long __denom);
void * malloc (size_t __size);
int mblen (const char *, size_t);
int _mblen_r (struct _reent *, const char *, size_t, _mbstate_t *);
int mbtowc (wchar_t *, const char *, size_t);
int _mbtowc_r (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *);
int wctomb (char *, wchar_t);
int _wctomb_r (struct _reent *, char *, wchar_t, _mbstate_t *);
size_t mbstowcs (wchar_t *, const char *, size_t);
size_t _mbstowcs_r (struct _reent *, wchar_t *, const char *, size_t, _mbstate_t *);
size_t wcstombs (char *, const wchar_t *, size_t);
size_t _wcstombs_r (struct _reent *, char *, const wchar_t *, size_t, _mbstate_t *);


int mkstemp (char *);
char * mktemp (char *);


void qsort (void * __base, size_t __nmemb, size_t __size, int(*_compar)(const void *, const void *));
int rand (void);
void * realloc (void * __r, size_t __size);
void srand (unsigned __seed);
double strtod (const char *__n, char **__end_PTR);
double _strtod_r (struct _reent *,const char *__n, char **__end_PTR);
float strtof (const char *__n, char **__end_PTR);






long strtol (const char *__n, char **__end_PTR, int __base);
long _strtol_r (struct _reent *,const char *__n, char **__end_PTR, int __base);
unsigned long strtoul (const char *__n, char **__end_PTR, int __base);
unsigned long _strtoul_r (struct _reent *,const char *__n, char **__end_PTR, int __base);

int system (const char *__string);


long a64l (const char *__input);
char * l64a (long __input);
char * _l64a_r (struct _reent *,long __input);
int on_exit (void (*__func)(int, void *),void * __arg);
void _Exit (int __status) __attribute__ ((noreturn));
int putenv (const char *__string);
int _putenv_r (struct _reent *, const char *__string);
int setenv (const char *__string, const char *__value, int __overwrite);
int _setenv_r (struct _reent *, const char *__string, const char *__value, int __overwrite);

char * gcvt (double,int,char *);
char * gcvtf (float,int,char *);
char * fcvt (double,int,int *,int *);
char * fcvtf (float,int,int *,int *);
char * ecvt (double,int,int *,int *);
char * ecvtbuf (double, int, int*, int*, char *);
char * fcvtbuf (double, int, int*, int*, char *);
char * ecvtf (float,int,int *,int *);
char * dtoa (double, int, int, int *, int*, char**);
int rand_r (unsigned *__seed);

double drand48 (void);
double _drand48_r (struct _reent *);
double erand48 (unsigned short [3]);
double _erand48_r (struct _reent *, unsigned short [3]);
long jrand48 (unsigned short [3]);
long _jrand48_r (struct _reent *, unsigned short [3]);
void lcong48 (unsigned short [7]);
void _lcong48_r (struct _reent *, unsigned short [7]);
long lrand48 (void);
long _lrand48_r (struct _reent *);
long mrand48 (void);
long _mrand48_r (struct _reent *);
long nrand48 (unsigned short [3]);
long _nrand48_r (struct _reent *, unsigned short [3]);
unsigned short *
       seed48 (unsigned short [3]);
unsigned short *
       _seed48_r (struct _reent *, unsigned short [3]);
void srand48 (long);
void _srand48_r (struct _reent *, long);
long long strtoll (const char *__n, char **__end_PTR, int __base);
long long _strtoll_r (struct _reent *, const char *__n, char **__end_PTR, int __base);
unsigned long long strtoull (const char *__n, char **__end_PTR, int __base);
unsigned long long _strtoull_r (struct _reent *, const char *__n, char **__end_PTR, int __base);


void cfree (void *);
# 172 "/usr/local/arm-wince-pe/include/stdlib.h" 3
char * _dtoa_r (struct _reent *, double, int, int, int *, int*, char**);

void * _malloc_r (struct _reent *, size_t);
void * _calloc_r (struct _reent *, size_t, size_t);
void _free_r (struct _reent *, void *);
void * _realloc_r (struct _reent *, void *, size_t);
void _mstats_r (struct _reent *, char *);

int _system_r (struct _reent *, const char *);

void __eprintf (const char *, const char *, unsigned int, const char *);
# 213 "/usr/local/arm-wince-pe/include/stdlib.h" 3

# 315 "/usr/local/arm-wince-pe/include/objbase.h" 2 3
# 345 "/usr/local/arm-wince-pe/include/objbase.h" 3
typedef enum tagREGCLS
{
    REGCLS_SINGLEUSE = 0,
    REGCLS_MULTIPLEUSE = 1,

    REGCLS_MULTI_SEPARATE = 2,

    REGCLS_SUSPENDED = 4,

    REGCLS_SURROGATE = 8


} REGCLS;
# 412 "/usr/local/arm-wince-pe/include/objbase.h" 3
typedef struct IRpcStubBuffer IRpcStubBuffer;
typedef struct IRpcChannelBuffer IRpcChannelBuffer;

# 1 "/usr/local/arm-wince-pe/include/wtypes.h" 1 3
# 12 "/usr/local/arm-wince-pe/include/wtypes.h" 3
# 1 "/usr/local/arm-wince-pe/include/rpc.h" 1 3
# 13 "/usr/local/arm-wince-pe/include/wtypes.h" 2 3
# 24 "/usr/local/arm-wince-pe/include/wtypes.h" 3
void * MIDL_user_allocate(size_t);
void MIDL_user_free( void * );
# 43 "/usr/local/arm-wince-pe/include/wtypes.h" 3
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_v0_0_s_ifspec;
# 57 "/usr/local/arm-wince-pe/include/wtypes.h" 3
typedef struct tagRemHGLOBAL
    {
    long fNullHGlobal;
    unsigned long cbData;
                    byte data[ 1 ];
    } RemHGLOBAL;

typedef struct tagRemHMETAFILEPICT
    {
    long mm;
    long xExt;
    long yExt;
    unsigned long cbData;
                    byte data[ 1 ];
    } RemHMETAFILEPICT;

typedef struct tagRemHENHMETAFILE
    {
    unsigned long cbData;
                    byte data[ 1 ];
    } RemHENHMETAFILE;

typedef struct tagRemHBITMAP
    {
    unsigned long cbData;
                    byte data[ 1 ];
    } RemHBITMAP;

typedef struct tagRemHPALETTE
    {
    unsigned long cbData;
                    byte data[ 1 ];
    } RemHPALETTE;

typedef struct tagRemBRUSH
    {
    unsigned long cbData;
                    byte data[ 1 ];
    } RemHBRUSH;
# 333 "/usr/local/arm-wince-pe/include/wtypes.h" 3
typedef char OLECHAR;
typedef LPSTR LPOLESTR;
typedef LPCSTR LPCOLESTR;
# 362 "/usr/local/arm-wince-pe/include/wtypes.h" 3
typedef unsigned char UCHAR;

typedef short SHORT;

typedef unsigned short USHORT;

typedef DWORD ULONG;

typedef double DOUBLE;
# 482 "/usr/local/arm-wince-pe/include/wtypes.h" 3
typedef struct _COAUTHIDENTITY
    {
                    USHORT *User;
    ULONG UserLength;
                    USHORT *Domain;
    ULONG DomainLength;
                    USHORT *Password;
    ULONG PasswordLength;
    ULONG Flags;
    } COAUTHIDENTITY;

typedef struct _COAUTHINFO
    {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    LPWSTR pwszServerPrincName;
    DWORD dwAuthnLevel;
    DWORD dwImpersonationLevel;
    COAUTHIDENTITY *pAuthIdentityData;
    DWORD dwCapabilities;
    } COAUTHINFO;

typedef struct _COSERVERINFO
    {
    DWORD dwReserved1;
    LPWSTR pwszName;
    COAUTHINFO *pAuthInfo;
    DWORD dwReserved2;
    } COSERVERINFO;

typedef LONG SCODE;






typedef SCODE *PSCODE;
# 534 "/usr/local/arm-wince-pe/include/wtypes.h" 3
typedef GUID *LPGUID;
# 549 "/usr/local/arm-wince-pe/include/wtypes.h" 3
typedef GUID IID;

typedef IID *LPIID;



typedef GUID CLSID;

typedef CLSID *LPCLSID;



typedef GUID FMTID;

typedef FMTID *LPFMTID;
# 613 "/usr/local/arm-wince-pe/include/wtypes.h" 3
typedef
enum tagMEMCTX
    { MEMCTX_TASK = 1,
        MEMCTX_SHARED = 2,
        MEMCTX_MACSYSTEM = 3,
        MEMCTX_UNKNOWN = -1,
        MEMCTX_SAME = -2
    } MEMCTX;
# 631 "/usr/local/arm-wince-pe/include/wtypes.h" 3
typedef
enum tagCLSCTX
    { CLSCTX_INPROC_SERVER = 0x1,
        CLSCTX_INPROC_HANDLER = 0x2,
        CLSCTX_LOCAL_SERVER = 0x4,
        CLSCTX_INPROC_SERVER16 = 0x8,
        CLSCTX_REMOTE_SERVER = 0x10,
        CLSCTX_INPROC_HANDLER16 = 0x20,
        CLSCTX_INPROC_SERVERX86 = 0x40,
        CLSCTX_INPROC_HANDLERX86 = 0x80
    } CLSCTX;

typedef
enum tagMSHLFLAGS
    { MSHLFLAGS_NORMAL = 0,
        MSHLFLAGS_TABLESTRONG = 1,
        MSHLFLAGS_TABLEWEAK = 2,
        MSHLFLAGS_NOPING = 4
    } MSHLFLAGS;

typedef
enum tagMSHCTX
    { MSHCTX_LOCAL = 0,
        MSHCTX_NOSHAREDMEM = 1,
        MSHCTX_DIFFERENTMACHINE = 2,
        MSHCTX_INPROC = 3
    } MSHCTX;

typedef
enum tagDVASPECT
    { DVASPECT_CONTENT = 1,
        DVASPECT_THUMBNAIL = 2,
        DVASPECT_ICON = 4,
        DVASPECT_DOCPRINT = 8
    } DVASPECT;

typedef
enum tagSTGC
    { STGC_DEFAULT = 0,
        STGC_OVERWRITE = 1,
        STGC_ONLYIFCURRENT = 2,
        STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE = 4
    } STGC;

typedef
enum tagSTGMOVE
    { STGMOVE_MOVE = 0,
        STGMOVE_COPY = 1,
        STGMOVE_SHALLOWCOPY = 2
    } STGMOVE;

typedef
enum tagSTATFLAG
    { STATFLAG_DEFAULT = 0,
        STATFLAG_NONAME = 1,
        STATFLAG_NOOPEN = 2
    } STATFLAG;

typedef void *HCONTEXT;



typedef DWORD LCID;


typedef struct _BYTE_BLOB
    {
    unsigned long clSize;
                    byte abData[ 1 ];
    } BYTE_BLOB;

typedef BYTE_BLOB *UP_BYTE_BLOB;

typedef struct _WORD_BLOB
    {
    unsigned long clSize;
                    unsigned short asData[ 1 ];
    } WORD_BLOB;

typedef WORD_BLOB *UP_WORD_BLOB;

typedef struct _DWORD_BLOB
    {
    unsigned long clSize;
                    unsigned long alData[ 1 ];
    } DWORD_BLOB;

typedef DWORD_BLOB *UP_DWORD_BLOB;

typedef struct _FLAGGED_BYTE_BLOB
    {
    unsigned long fFlags;
    unsigned long clSize;
                    byte abData[ 1 ];
    } FLAGGED_BYTE_BLOB;

typedef FLAGGED_BYTE_BLOB *UP_FLAGGED_BYTE_BLOB;

typedef struct _FLAGGED_WORD_BLOB
    {
    unsigned long fFlags;
    unsigned long clSize;
                    unsigned short asData[ 1 ];
    } FLAGGED_WORD_BLOB;

typedef FLAGGED_WORD_BLOB *UP_FLAGGED_WORD_BLOB;

typedef struct _BYTE_SIZEDARR
    {
    unsigned long clSize;
                    byte *pData;
    } BYTE_SIZEDARR;

typedef struct _SHORT_SIZEDARR
    {
    unsigned long clSize;
                    unsigned short *pData;
    } WORD_SIZEDARR;

typedef struct _LONG_SIZEDARR
    {
    unsigned long clSize;
                    unsigned long *pData;
    } DWORD_SIZEDARR;

typedef struct _HYPER_SIZEDARR
    {
    unsigned long clSize;
                    __int64 *pData;
    } HYPER_SIZEDARR;





typedef struct _userCLIPFORMAT
    {
    long fContext;
                                          union __MIDL_IWinTypes_0001
        {
                       DWORD dwValue;
                               wchar_t *pwszName;
        } u;
    } userCLIPFORMAT;

typedef userCLIPFORMAT *wireCLIPFORMAT;

typedef WORD CLIPFORMAT;

typedef struct _GDI_NONREMOTE
    {
    long fContext;
                                          union __MIDL_IWinTypes_0002
        {
                       long hInproc;
                       DWORD_BLOB *hRemote;
        } u;
    } GDI_NONREMOTE;

typedef struct _userHGLOBAL
    {
    long fContext;
                                          union __MIDL_IWinTypes_0003
        {
                       long hInproc;
                       FLAGGED_BYTE_BLOB *hRemote;
                        long hGlobal;
        } u;
    } userHGLOBAL;

typedef userHGLOBAL *wireHGLOBAL;

typedef struct _userHMETAFILE
    {
    long fContext;
                                          union __MIDL_IWinTypes_0004
        {
                       long hInproc;
                       BYTE_BLOB *hRemote;
                        long hGlobal;
        } u;
    } userHMETAFILE;

typedef struct _remoteMETAFILEPICT
    {
    long mm;
    long xExt;
    long yExt;
    userHMETAFILE *hMF;
    } remoteMETAFILEPICT;

typedef struct _userHMETAFILEPICT
    {
    long fContext;
                                          union __MIDL_IWinTypes_0005
        {
                       long hInproc;
                       remoteMETAFILEPICT *hRemote;
                        long hGlobal;
        } u;
    } userHMETAFILEPICT;

typedef struct _userHENHMETAFILE
    {
    long fContext;
                                          union __MIDL_IWinTypes_0006
        {
                       long hInproc;
                       BYTE_BLOB *hRemote;
                        long hGlobal;
        } u;
    } userHENHMETAFILE;

typedef struct _userBITMAP
    {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    ULONG cbSize;
                    byte pBuffer[ 1 ];
    } userBITMAP;

typedef struct _userHBITMAP
    {
    long fContext;
                                          union __MIDL_IWinTypes_0007
        {
                       long hInproc;
                       userBITMAP *hRemote;
                        long hGlobal;
        } u;
    } userHBITMAP;

typedef struct tagrpcLOGPALETTE
    {
    WORD palVersion;
    WORD palNumEntries;
                    PALETTEENTRY palPalEntry[ 1 ];
    } rpcLOGPALETTE;

typedef struct _userHPALETTE
    {
    long fContext;
                                          union __MIDL_IWinTypes_0008
        {
                       long hInproc;
                       rpcLOGPALETTE *hRemote;
                        long hGlobal;
        } u;
    } userHPALETTE;

typedef struct _RemotableHandle
    {
    long fContext;
                                          union __MIDL_IWinTypes_0009
        {
                       long hInproc;
                       long hRemote;
        } u;
    } RemotableHandle;

typedef RemotableHandle *wireHWND;

typedef RemotableHandle *wireHMENU;

typedef RemotableHandle *wireHACCEL;

typedef RemotableHandle *wireHBRUSH;

typedef RemotableHandle *wireHFONT;

typedef RemotableHandle *wireHDC;

typedef RemotableHandle *wireHICON;
# 975 "/usr/local/arm-wince-pe/include/wtypes.h" 3
typedef userHBITMAP *wireHBITMAP;

typedef userHPALETTE *wireHPALETTE;

typedef userHENHMETAFILE *wireHENHMETAFILE;

typedef userHMETAFILE *wireHMETAFILE;

typedef userHMETAFILEPICT *wireHMETAFILEPICT;
# 999 "/usr/local/arm-wince-pe/include/wtypes.h" 3
typedef void *HMETAFILEPICT;



extern RPC_IF_HANDLE IWinTypes_v0_1_c_ifspec;
extern RPC_IF_HANDLE IWinTypes_v0_1_s_ifspec;
# 1015 "/usr/local/arm-wince-pe/include/wtypes.h" 3
typedef double DATE;
# 1030 "/usr/local/arm-wince-pe/include/wtypes.h" 3
typedef union tagCY {
    struct {




        unsigned long Lo;
        long Hi;

    };
    LONGLONG int64;
} CY;


typedef CY *LPCY;
# 1060 "/usr/local/arm-wince-pe/include/wtypes.h" 3
typedef struct tagDEC {
    USHORT wReserved;
    union {
        struct {
            BYTE scale;
            BYTE sign;
        };
        USHORT signscale;
    };
    ULONG Hi32;
    union {
        struct {




            ULONG Lo32;
            ULONG Mid32;

        };
        ULONGLONG Lo64;
    };
} DECIMAL;




typedef DECIMAL *LPDECIMAL;

typedef FLAGGED_WORD_BLOB *wireBSTR;

typedef OLECHAR *BSTR;

typedef BSTR *LPBSTR;


typedef short VARIANT_BOOL;

typedef VARIANT_BOOL _VARIANT_BOOL;

typedef boolean BOOLEAN;






typedef struct tagBSTRBLOB
    {
    ULONG cbSize;
                    BYTE *pData;
    } BSTRBLOB;

typedef struct tagBSTRBLOB *LPBSTRBLOB;
# 1122 "/usr/local/arm-wince-pe/include/wtypes.h" 3
typedef struct tagBLOB
    {
    ULONG cbSize;
                    BYTE *pBlobData;
    } BLOB;

typedef struct tagBLOB *LPBLOB;


typedef struct tagCLIPDATA
    {
    ULONG cbSize;
    long ulClipFmt;
                    BYTE *pClipData;
    } CLIPDATA;



typedef unsigned short VARTYPE;
# 1198 "/usr/local/arm-wince-pe/include/wtypes.h" 3
enum VARENUM
    { VT_EMPTY = 0,
        VT_NULL = 1,
        VT_I2 = 2,
        VT_I4 = 3,
        VT_R4 = 4,
        VT_R8 = 5,
        VT_CY = 6,
        VT_DATE = 7,
        VT_BSTR = 8,
        VT_DISPATCH = 9,
        VT_ERROR = 10,
        VT_BOOL = 11,
        VT_VARIANT = 12,
        VT_UNKNOWN = 13,
        VT_DECIMAL = 14,
        VT_I1 = 16,
        VT_UI1 = 17,
        VT_UI2 = 18,
        VT_UI4 = 19,
        VT_I8 = 20,
        VT_UI8 = 21,
        VT_INT = 22,
        VT_UINT = 23,
        VT_VOID = 24,
        VT_HRESULT = 25,
        VT_PTR = 26,
        VT_SAFEARRAY = 27,
        VT_CARRAY = 28,
        VT_USERDEFINED = 29,
        VT_LPSTR = 30,
        VT_LPWSTR = 31,
        VT_RECORD = 36,
        VT_FILETIME = 64,
        VT_BLOB = 65,
        VT_STREAM = 66,
        VT_STORAGE = 67,
        VT_STREAMED_OBJECT = 68,
        VT_STORED_OBJECT = 69,
        VT_BLOB_OBJECT = 70,
        VT_CF = 71,
        VT_CLSID = 72,
        VT_BSTR_BLOB = 0xfff,
        VT_VECTOR = 0x1000,
        VT_ARRAY = 0x2000,
        VT_BYREF = 0x4000,
        VT_RESERVED = 0x8000,
        VT_ILLEGAL = 0xffff,
        VT_ILLEGALMASKED = 0xfff,
        VT_TYPEMASK = 0xfff
    };
typedef ULONG PROPID;
# 1276 "/usr/local/arm-wince-pe/include/wtypes.h" 3
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0001_v0_0_s_ifspec;
# 416 "/usr/local/arm-wince-pe/include/objbase.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/unknwn.h" 1 3
# 12 "/usr/local/arm-wince-pe/include/unknwn.h" 3
# 1 "/usr/local/arm-wince-pe/include/rpc.h" 1 3
# 13 "/usr/local/arm-wince-pe/include/unknwn.h" 2 3



# 1 "/usr/local/arm-wince-pe/include/ole2.h" 1 3
# 17 "/usr/local/arm-wince-pe/include/unknwn.h" 2 3
# 30 "/usr/local/arm-wince-pe/include/unknwn.h" 3
typedef struct IUnknown IUnknown;





typedef struct IClassFactory IClassFactory;




# 1 "/usr/local/arm-wince-pe/include/wtypes.h" 1 3
# 12 "/usr/local/arm-wince-pe/include/wtypes.h" 3
# 1 "/usr/local/arm-wince-pe/include/rpc.h" 1 3
# 13 "/usr/local/arm-wince-pe/include/wtypes.h" 2 3
# 42 "/usr/local/arm-wince-pe/include/unknwn.h" 2 3

void * MIDL_user_allocate(size_t);
void MIDL_user_free( void * );
# 62 "/usr/local/arm-wince-pe/include/unknwn.h" 3
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_v0_0_s_ifspec;
# 76 "/usr/local/arm-wince-pe/include/unknwn.h" 3
typedef IUnknown *LPUNKNOWN;






extern const IID IID_IUnknown;
# 105 "/usr/local/arm-wince-pe/include/unknwn.h" 3
    typedef struct IUnknownVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IUnknown * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IUnknown * This);

        ULONG ( __export __stdcall *Release )(
            IUnknown * This);

       
    } IUnknownVtbl;

    struct IUnknown
    {
        struct IUnknownVtbl *lpVtbl;
    };
# 149 "/usr/local/arm-wince-pe/include/unknwn.h" 3
HRESULT __export __stdcall IUnknown_QueryInterface_Proxy(
    IUnknown * This,
               const IID * const riid,
                        void * *ppvObject);


void IUnknown_QueryInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __export __stdcall IUnknown_AddRef_Proxy(
    IUnknown * This);


void IUnknown_AddRef_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __export __stdcall IUnknown_Release_Proxy(
    IUnknown * This);


void IUnknown_Release_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 199 "/usr/local/arm-wince-pe/include/unknwn.h" 3
typedef IClassFactory *LPCLASSFACTORY;


extern const IID IID_IClassFactory;
# 222 "/usr/local/arm-wince-pe/include/unknwn.h" 3
    typedef struct IClassFactoryVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IClassFactory * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IClassFactory * This);

        ULONG ( __export __stdcall *Release )(
            IClassFactory * This);

                      HRESULT ( __export __stdcall *CreateInstance )(
            IClassFactory * This,
                               IUnknown *pUnkOuter,
                       const IID * const riid,
                                void * *ppvObject);

                      HRESULT ( __export __stdcall *LockServer )(
            IClassFactory * This,
                       BOOL fLock);

       
    } IClassFactoryVtbl;

    struct IClassFactory
    {
        struct IClassFactoryVtbl *lpVtbl;
    };
# 283 "/usr/local/arm-wince-pe/include/unknwn.h" 3
                HRESULT __export __stdcall IClassFactory_RemoteCreateInstance_Proxy(
    IClassFactory * This,
               const IID * const riid,
                        IUnknown * *ppvObject);


void IClassFactory_RemoteCreateInstance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __stdcall IClassFactory_RemoteLockServer_Proxy(
    IClassFactory * This,
               BOOL fLock);


void IClassFactory_RemoteLockServer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 314 "/usr/local/arm-wince-pe/include/unknwn.h" 3
              HRESULT __export __stdcall IClassFactory_CreateInstance_Proxy(
    IClassFactory * This,
                       IUnknown *pUnkOuter,
               const IID * const riid,
                        void * *ppvObject);


                HRESULT __export __stdcall IClassFactory_CreateInstance_Stub(
    IClassFactory * This,
               const IID * const riid,
                        IUnknown * *ppvObject);

              HRESULT __export __stdcall IClassFactory_LockServer_Proxy(
    IClassFactory * This,
               BOOL fLock);


                HRESULT __stdcall IClassFactory_LockServer_Stub(
    IClassFactory * This,
               BOOL fLock);
# 417 "/usr/local/arm-wince-pe/include/objbase.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/objidl.h" 1 3
# 12 "/usr/local/arm-wince-pe/include/objidl.h" 3
# 1 "/usr/local/arm-wince-pe/include/rpc.h" 1 3
# 13 "/usr/local/arm-wince-pe/include/objidl.h" 2 3
# 30 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef struct IMarshal IMarshal;





typedef struct IMalloc IMalloc;





typedef struct IMallocSpy IMallocSpy;





typedef struct IStdMarshalInfo IStdMarshalInfo;





typedef struct IExternalConnection IExternalConnection;





typedef struct IMultiQI IMultiQI;





typedef struct IEnumUnknown IEnumUnknown;





typedef struct IBindCtx IBindCtx;





typedef struct IEnumMoniker IEnumMoniker;





typedef struct IRunnableObject IRunnableObject;





typedef struct IRunningObjectTable IRunningObjectTable;





typedef struct IPersist IPersist;





typedef struct IPersistStream IPersistStream;





typedef struct IMoniker IMoniker;





typedef struct IROTData IROTData;





typedef struct IEnumString IEnumString;





typedef struct ISequentialStream ISequentialStream;





typedef struct IStream IStream;





typedef struct IEnumSTATSTG IEnumSTATSTG;





typedef struct IStorage IStorage;





typedef struct IPersistFile IPersistFile;





typedef struct IPersistStorage IPersistStorage;





typedef struct ILockBytes ILockBytes;





typedef struct IEnumFORMATETC IEnumFORMATETC;





typedef struct IEnumSTATDATA IEnumSTATDATA;





typedef struct IRootStorage IRootStorage;





typedef struct IAdviseSink IAdviseSink;





typedef struct IAdviseSink2 IAdviseSink2;





typedef struct IDataObject IDataObject;





typedef struct IDataAdviseHolder IDataAdviseHolder;





typedef struct IMessageFilter IMessageFilter;





typedef struct IRpcChannelBuffer IRpcChannelBuffer;





typedef struct IRpcChannelBuffer2 IRpcChannelBuffer2;





typedef struct IRpcProxyBuffer IRpcProxyBuffer;





typedef struct IRpcStubBuffer IRpcStubBuffer;





typedef struct IPSFactoryBuffer IPSFactoryBuffer;





typedef struct IChannelHook IChannelHook;





typedef struct IPropertyStorage IPropertyStorage;





typedef struct IPropertySetStorage IPropertySetStorage;





typedef struct IEnumSTATPROPSTG IEnumSTATPROPSTG;





typedef struct IEnumSTATPROPSETSTG IEnumSTATPROPSETSTG;





typedef struct IClientSecurity IClientSecurity;





typedef struct IServerSecurity IServerSecurity;





typedef struct IClassActivator IClassActivator;





typedef struct IRpcOptions IRpcOptions;





typedef struct IFillLockBytes IFillLockBytes;





typedef struct IProgressNotify IProgressNotify;





typedef struct ILayoutStorage ILayoutStorage;





typedef struct ISurrogate ISurrogate;





typedef struct IGlobalInterfaceTable IGlobalInterfaceTable;





typedef struct IComBinding IComBinding;




# 1 "/usr/local/arm-wince-pe/include/unknwn.h" 1 3
# 12 "/usr/local/arm-wince-pe/include/unknwn.h" 3
# 1 "/usr/local/arm-wince-pe/include/rpc.h" 1 3
# 13 "/usr/local/arm-wince-pe/include/unknwn.h" 2 3
# 336 "/usr/local/arm-wince-pe/include/objidl.h" 2 3

void * MIDL_user_allocate(size_t);
void MIDL_user_free( void * );
# 366 "/usr/local/arm-wince-pe/include/objidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_v0_0_s_ifspec;
# 380 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IMarshal *LPMARSHAL;


extern const IID IID_IMarshal;
# 430 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IMarshalVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IMarshal * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IMarshal * This);

        ULONG ( __export __stdcall *Release )(
            IMarshal * This);

        HRESULT ( __export __stdcall *GetUnmarshalClass )(
            IMarshal * This,
                       const IID * const riid,
                               void *pv,
                       DWORD dwDestContext,
                               void *pvDestContext,
                       DWORD mshlflags,
                        CLSID *pCid);

        HRESULT ( __export __stdcall *GetMarshalSizeMax )(
            IMarshal * This,
                       const IID * const riid,
                               void *pv,
                       DWORD dwDestContext,
                               void *pvDestContext,
                       DWORD mshlflags,
                        DWORD *pSize);

        HRESULT ( __export __stdcall *MarshalInterface )(
            IMarshal * This,
                               IStream *pStm,
                       const IID * const riid,
                               void *pv,
                       DWORD dwDestContext,
                               void *pvDestContext,
                       DWORD mshlflags);

        HRESULT ( __export __stdcall *UnmarshalInterface )(
            IMarshal * This,
                               IStream *pStm,
                       const IID * const riid,
                        void * *ppv);

        HRESULT ( __export __stdcall *ReleaseMarshalData )(
            IMarshal * This,
                               IStream *pStm);

        HRESULT ( __export __stdcall *DisconnectObject )(
            IMarshal * This,
                       DWORD dwReserved);

       
    } IMarshalVtbl;

    struct IMarshal
    {
        struct IMarshalVtbl *lpVtbl;
    };
# 534 "/usr/local/arm-wince-pe/include/objidl.h" 3
HRESULT __export __stdcall IMarshal_GetUnmarshalClass_Proxy(
    IMarshal * This,
               const IID * const riid,
                       void *pv,
               DWORD dwDestContext,
                       void *pvDestContext,
               DWORD mshlflags,
                CLSID *pCid);


void IMarshal_GetUnmarshalClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IMarshal_GetMarshalSizeMax_Proxy(
    IMarshal * This,
               const IID * const riid,
                       void *pv,
               DWORD dwDestContext,
                       void *pvDestContext,
               DWORD mshlflags,
                DWORD *pSize);


void IMarshal_GetMarshalSizeMax_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IMarshal_MarshalInterface_Proxy(
    IMarshal * This,
                       IStream *pStm,
               const IID * const riid,
                       void *pv,
               DWORD dwDestContext,
                       void *pvDestContext,
               DWORD mshlflags);


void IMarshal_MarshalInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IMarshal_UnmarshalInterface_Proxy(
    IMarshal * This,
                       IStream *pStm,
               const IID * const riid,
                void * *ppv);


void IMarshal_UnmarshalInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IMarshal_ReleaseMarshalData_Proxy(
    IMarshal * This,
                       IStream *pStm);


void IMarshal_ReleaseMarshalData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IMarshal_DisconnectObject_Proxy(
    IMarshal * This,
               DWORD dwReserved);


void IMarshal_DisconnectObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 638 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IMalloc *LPMALLOC;


extern const IID IID_IMalloc;
# 671 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IMallocVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IMalloc * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IMalloc * This);

        ULONG ( __export __stdcall *Release )(
            IMalloc * This);

        void *( __export __stdcall *Alloc )(
            IMalloc * This,
                       ULONG cb);

        void *( __export __stdcall *Realloc )(
            IMalloc * This,
                       void *pv,
                       ULONG cb);

        void ( __export __stdcall *Free )(
            IMalloc * This,
                       void *pv);

        ULONG ( __export __stdcall *GetSize )(
            IMalloc * This,
                       void *pv);

        int ( __export __stdcall *DidAlloc )(
            IMalloc * This,
            void *pv);

        void ( __export __stdcall *HeapMinimize )(
            IMalloc * This);

       
    } IMallocVtbl;

    struct IMalloc
    {
        struct IMallocVtbl *lpVtbl;
    };
# 758 "/usr/local/arm-wince-pe/include/objidl.h" 3
void *__export __stdcall IMalloc_Alloc_Proxy(
    IMalloc * This,
               ULONG cb);


void IMalloc_Alloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void *__export __stdcall IMalloc_Realloc_Proxy(
    IMalloc * This,
               void *pv,
               ULONG cb);


void IMalloc_Realloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __export __stdcall IMalloc_Free_Proxy(
    IMalloc * This,
               void *pv);


void IMalloc_Free_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __export __stdcall IMalloc_GetSize_Proxy(
    IMalloc * This,
               void *pv);


void IMalloc_GetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


int __export __stdcall IMalloc_DidAlloc_Proxy(
    IMalloc * This,
    void *pv);


void IMalloc_DidAlloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __export __stdcall IMalloc_HeapMinimize_Proxy(
    IMalloc * This);


void IMalloc_HeapMinimize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 845 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IMallocSpy *LPMALLOCSPY;


extern const IID IID_IMallocSpy;
# 904 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IMallocSpyVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IMallocSpy * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IMallocSpy * This);

        ULONG ( __export __stdcall *Release )(
            IMallocSpy * This);

        ULONG ( __export __stdcall *PreAlloc )(
            IMallocSpy * This,
                       ULONG cbRequest);

        void *( __export __stdcall *PostAlloc )(
            IMallocSpy * This,
                       void *pActual);

        void *( __export __stdcall *PreFree )(
            IMallocSpy * This,
                       void *pRequest,
                       BOOL fSpyed);

        void ( __export __stdcall *PostFree )(
            IMallocSpy * This,
                       BOOL fSpyed);

        ULONG ( __export __stdcall *PreRealloc )(
            IMallocSpy * This,
                       void *pRequest,
                       ULONG cbRequest,
                        void * *ppNewRequest,
                       BOOL fSpyed);

        void *( __export __stdcall *PostRealloc )(
            IMallocSpy * This,
                       void *pActual,
                       BOOL fSpyed);

        void *( __export __stdcall *PreGetSize )(
            IMallocSpy * This,
                       void *pRequest,
                       BOOL fSpyed);

        ULONG ( __export __stdcall *PostGetSize )(
            IMallocSpy * This,
                       ULONG cbActual,
                       BOOL fSpyed);

        void *( __export __stdcall *PreDidAlloc )(
            IMallocSpy * This,
                       void *pRequest,
                       BOOL fSpyed);

        int ( __export __stdcall *PostDidAlloc )(
            IMallocSpy * This,
                       void *pRequest,
                       BOOL fSpyed,
                       int fActual);

        void ( __export __stdcall *PreHeapMinimize )(
            IMallocSpy * This);

        void ( __export __stdcall *PostHeapMinimize )(
            IMallocSpy * This);

       
    } IMallocSpyVtbl;

    struct IMallocSpy
    {
        struct IMallocSpyVtbl *lpVtbl;
    };
# 1041 "/usr/local/arm-wince-pe/include/objidl.h" 3
ULONG __export __stdcall IMallocSpy_PreAlloc_Proxy(
    IMallocSpy * This,
               ULONG cbRequest);


void IMallocSpy_PreAlloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void *__export __stdcall IMallocSpy_PostAlloc_Proxy(
    IMallocSpy * This,
               void *pActual);


void IMallocSpy_PostAlloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void *__export __stdcall IMallocSpy_PreFree_Proxy(
    IMallocSpy * This,
               void *pRequest,
               BOOL fSpyed);


void IMallocSpy_PreFree_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __export __stdcall IMallocSpy_PostFree_Proxy(
    IMallocSpy * This,
               BOOL fSpyed);


void IMallocSpy_PostFree_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __export __stdcall IMallocSpy_PreRealloc_Proxy(
    IMallocSpy * This,
               void *pRequest,
               ULONG cbRequest,
                void * *ppNewRequest,
               BOOL fSpyed);


void IMallocSpy_PreRealloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void *__export __stdcall IMallocSpy_PostRealloc_Proxy(
    IMallocSpy * This,
               void *pActual,
               BOOL fSpyed);


void IMallocSpy_PostRealloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void *__export __stdcall IMallocSpy_PreGetSize_Proxy(
    IMallocSpy * This,
               void *pRequest,
               BOOL fSpyed);


void IMallocSpy_PreGetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __export __stdcall IMallocSpy_PostGetSize_Proxy(
    IMallocSpy * This,
               ULONG cbActual,
               BOOL fSpyed);


void IMallocSpy_PostGetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void *__export __stdcall IMallocSpy_PreDidAlloc_Proxy(
    IMallocSpy * This,
               void *pRequest,
               BOOL fSpyed);


void IMallocSpy_PreDidAlloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


int __export __stdcall IMallocSpy_PostDidAlloc_Proxy(
    IMallocSpy * This,
               void *pRequest,
               BOOL fSpyed,
               int fActual);


void IMallocSpy_PostDidAlloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __export __stdcall IMallocSpy_PreHeapMinimize_Proxy(
    IMallocSpy * This);


void IMallocSpy_PreHeapMinimize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __export __stdcall IMallocSpy_PostHeapMinimize_Proxy(
    IMallocSpy * This);


void IMallocSpy_PostHeapMinimize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 1208 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IStdMarshalInfo *LPSTDMARSHALINFO;


extern const IID IID_IStdMarshalInfo;
# 1228 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IStdMarshalInfoVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IStdMarshalInfo * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IStdMarshalInfo * This);

        ULONG ( __export __stdcall *Release )(
            IStdMarshalInfo * This);

        HRESULT ( __export __stdcall *GetClassForHandler )(
            IStdMarshalInfo * This,
                       DWORD dwDestContext,
                               void *pvDestContext,
                        CLSID *pClsid);

       
    } IStdMarshalInfoVtbl;

    struct IStdMarshalInfo
    {
        struct IStdMarshalInfoVtbl *lpVtbl;
    };
# 1282 "/usr/local/arm-wince-pe/include/objidl.h" 3
HRESULT __export __stdcall IStdMarshalInfo_GetClassForHandler_Proxy(
    IStdMarshalInfo * This,
               DWORD dwDestContext,
                       void *pvDestContext,
                CLSID *pClsid);


void IStdMarshalInfo_GetClassForHandler_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 1311 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IExternalConnection *LPEXTERNALCONNECTION;

typedef
enum tagEXTCONN
    { EXTCONN_STRONG = 0x1,
        EXTCONN_WEAK = 0x2,
        EXTCONN_CALLABLE = 0x4
    } EXTCONN;


extern const IID IID_IExternalConnection;
# 1342 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IExternalConnectionVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IExternalConnection * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IExternalConnection * This);

        ULONG ( __export __stdcall *Release )(
            IExternalConnection * This);

        DWORD ( __export __stdcall *AddConnection )(
            IExternalConnection * This,
                       DWORD extconn,
                       DWORD reserved);

        DWORD ( __export __stdcall *ReleaseConnection )(
            IExternalConnection * This,
                       DWORD extconn,
                       DWORD reserved,
                       BOOL fLastReleaseCloses);

       
    } IExternalConnectionVtbl;

    struct IExternalConnection
    {
        struct IExternalConnectionVtbl *lpVtbl;
    };
# 1404 "/usr/local/arm-wince-pe/include/objidl.h" 3
DWORD __export __stdcall IExternalConnection_AddConnection_Proxy(
    IExternalConnection * This,
               DWORD extconn,
               DWORD reserved);


void IExternalConnection_AddConnection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


DWORD __export __stdcall IExternalConnection_ReleaseConnection_Proxy(
    IExternalConnection * This,
               DWORD extconn,
               DWORD reserved,
               BOOL fLastReleaseCloses);


void IExternalConnection_ReleaseConnection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 1446 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IMultiQI *LPMULTIQI;

typedef struct tagMULTI_QI
    {
    const IID *pIID;
    IUnknown *pItf;
    HRESULT hr;
    } MULTI_QI;


extern const IID IID_IMultiQI;
# 1472 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IMultiQIVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IMultiQI * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IMultiQI * This);

        ULONG ( __export __stdcall *Release )(
            IMultiQI * This);

        HRESULT ( __export __stdcall *QueryMultipleInterfaces )(
            IMultiQI * This,
                       ULONG cMQIs,
                            MULTI_QI *pMQIs);

       
    } IMultiQIVtbl;

    struct IMultiQI
    {
        struct IMultiQIVtbl *lpVtbl;
    };
# 1525 "/usr/local/arm-wince-pe/include/objidl.h" 3
HRESULT __export __stdcall IMultiQI_QueryMultipleInterfaces_Proxy(
    IMultiQI * This,
               ULONG cMQIs,
                    MULTI_QI *pMQIs);


void IMultiQI_QueryMultipleInterfaces_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 1553 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IEnumUnknown *LPENUMUNKNOWN;


extern const IID IID_IEnumUnknown;
# 1581 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IEnumUnknownVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IEnumUnknown * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IEnumUnknown * This);

        ULONG ( __export __stdcall *Release )(
            IEnumUnknown * This);

                      HRESULT ( __export __stdcall *Next )(
            IEnumUnknown * This,
                       ULONG celt,
                        IUnknown * *rgelt,
                        ULONG *pceltFetched);

        HRESULT ( __export __stdcall *Skip )(
            IEnumUnknown * This,
                       ULONG celt);

        HRESULT ( __export __stdcall *Reset )(
            IEnumUnknown * This);

        HRESULT ( __export __stdcall *Clone )(
            IEnumUnknown * This,
                        IEnumUnknown * *ppenum);

       
    } IEnumUnknownVtbl;

    struct IEnumUnknown
    {
        struct IEnumUnknownVtbl *lpVtbl;
    };
# 1655 "/usr/local/arm-wince-pe/include/objidl.h" 3
                HRESULT __export __stdcall IEnumUnknown_RemoteNext_Proxy(
    IEnumUnknown * This,
               ULONG celt,
                                    IUnknown * *rgelt,
                ULONG *pceltFetched);


void IEnumUnknown_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumUnknown_Skip_Proxy(
    IEnumUnknown * This,
               ULONG celt);


void IEnumUnknown_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumUnknown_Reset_Proxy(
    IEnumUnknown * This);


void IEnumUnknown_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumUnknown_Clone_Proxy(
    IEnumUnknown * This,
                IEnumUnknown * *ppenum);


void IEnumUnknown_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 1719 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IBindCtx *LPBC;

typedef IBindCtx *LPBINDCTX;

typedef struct tagBIND_OPTS
    {
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    } BIND_OPTS;

typedef struct tagBIND_OPTS *LPBIND_OPTS;
# 1741 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef struct tagBIND_OPTS2
    {
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    DWORD dwTrackFlags;
    DWORD dwClassContext;
    LCID locale;
    COSERVERINFO *pServerInfo;
    } BIND_OPTS2;

typedef struct tagBIND_OPTS2 *LPBIND_OPTS2;


typedef
enum tagBIND_FLAGS
    { BIND_MAYBOTHERUSER = 1,
        BIND_JUSTTESTEXISTENCE = 2
    } BIND_FLAGS;


extern const IID IID_IBindCtx;
# 1806 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IBindCtxVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IBindCtx * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IBindCtx * This);

        ULONG ( __export __stdcall *Release )(
            IBindCtx * This);

        HRESULT ( __export __stdcall *RegisterObjectBound )(
            IBindCtx * This,
                               IUnknown *punk);

        HRESULT ( __export __stdcall *RevokeObjectBound )(
            IBindCtx * This,
                               IUnknown *punk);

        HRESULT ( __export __stdcall *ReleaseBoundObjects )(
            IBindCtx * This);

                      HRESULT ( __export __stdcall *SetBindOptions )(
            IBindCtx * This,
                       BIND_OPTS *pbindopts);

                      HRESULT ( __export __stdcall *GetBindOptions )(
            IBindCtx * This,
                            BIND_OPTS *pbindopts);

        HRESULT ( __export __stdcall *GetRunningObjectTable )(
            IBindCtx * This,
                        IRunningObjectTable * *pprot);

        HRESULT ( __export __stdcall *RegisterObjectParam )(
            IBindCtx * This,
                       LPOLESTR pszKey,
                               IUnknown *punk);

        HRESULT ( __export __stdcall *GetObjectParam )(
            IBindCtx * This,
                       LPOLESTR pszKey,
                        IUnknown * *ppunk);

        HRESULT ( __export __stdcall *EnumObjectParam )(
            IBindCtx * This,
                        IEnumString * *ppenum);

        HRESULT ( __export __stdcall *RevokeObjectParam )(
            IBindCtx * This,
                       LPOLESTR pszKey);

       
    } IBindCtxVtbl;

    struct IBindCtx
    {
        struct IBindCtxVtbl *lpVtbl;
    };
# 1922 "/usr/local/arm-wince-pe/include/objidl.h" 3
HRESULT __export __stdcall IBindCtx_RegisterObjectBound_Proxy(
    IBindCtx * This,
                       IUnknown *punk);


void IBindCtx_RegisterObjectBound_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IBindCtx_RevokeObjectBound_Proxy(
    IBindCtx * This,
                       IUnknown *punk);


void IBindCtx_RevokeObjectBound_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IBindCtx_ReleaseBoundObjects_Proxy(
    IBindCtx * This);


void IBindCtx_ReleaseBoundObjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall IBindCtx_RemoteSetBindOptions_Proxy(
    IBindCtx * This,
               BIND_OPTS2 *pbindopts);


void IBindCtx_RemoteSetBindOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall IBindCtx_RemoteGetBindOptions_Proxy(
    IBindCtx * This,
                    BIND_OPTS2 *pbindopts);


void IBindCtx_RemoteGetBindOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IBindCtx_GetRunningObjectTable_Proxy(
    IBindCtx * This,
                IRunningObjectTable * *pprot);


void IBindCtx_GetRunningObjectTable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IBindCtx_RegisterObjectParam_Proxy(
    IBindCtx * This,
               LPOLESTR pszKey,
                       IUnknown *punk);


void IBindCtx_RegisterObjectParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IBindCtx_GetObjectParam_Proxy(
    IBindCtx * This,
               LPOLESTR pszKey,
                IUnknown * *ppunk);


void IBindCtx_GetObjectParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IBindCtx_EnumObjectParam_Proxy(
    IBindCtx * This,
                IEnumString * *ppenum);


void IBindCtx_EnumObjectParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IBindCtx_RevokeObjectParam_Proxy(
    IBindCtx * This,
               LPOLESTR pszKey);


void IBindCtx_RevokeObjectParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2058 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IEnumMoniker *LPENUMMONIKER;


extern const IID IID_IEnumMoniker;
# 2086 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IEnumMonikerVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IEnumMoniker * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IEnumMoniker * This);

        ULONG ( __export __stdcall *Release )(
            IEnumMoniker * This);

                      HRESULT ( __export __stdcall *Next )(
            IEnumMoniker * This,
                       ULONG celt,
                                            IMoniker * *rgelt,
                        ULONG *pceltFetched);

        HRESULT ( __export __stdcall *Skip )(
            IEnumMoniker * This,
                       ULONG celt);

        HRESULT ( __export __stdcall *Reset )(
            IEnumMoniker * This);

        HRESULT ( __export __stdcall *Clone )(
            IEnumMoniker * This,
                        IEnumMoniker * *ppenum);

       
    } IEnumMonikerVtbl;

    struct IEnumMoniker
    {
        struct IEnumMonikerVtbl *lpVtbl;
    };
# 2160 "/usr/local/arm-wince-pe/include/objidl.h" 3
                HRESULT __export __stdcall IEnumMoniker_RemoteNext_Proxy(
    IEnumMoniker * This,
               ULONG celt,
                                    IMoniker * *rgelt,
                ULONG *pceltFetched);


void IEnumMoniker_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumMoniker_Skip_Proxy(
    IEnumMoniker * This,
               ULONG celt);


void IEnumMoniker_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumMoniker_Reset_Proxy(
    IEnumMoniker * This);


void IEnumMoniker_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumMoniker_Clone_Proxy(
    IEnumMoniker * This,
                IEnumMoniker * *ppenum);


void IEnumMoniker_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2224 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IRunnableObject *LPRUNNABLEOBJECT;


extern const IID IID_IRunnableObject;
# 2254 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IRunnableObjectVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IRunnableObject * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IRunnableObject * This);

        ULONG ( __export __stdcall *Release )(
            IRunnableObject * This);

        HRESULT ( __export __stdcall *GetRunningClass )(
            IRunnableObject * This,
                        LPCLSID lpClsid);

        HRESULT ( __export __stdcall *Run )(
            IRunnableObject * This,
                       LPBINDCTX pbc);

                      BOOL ( __export __stdcall *IsRunning )(
            IRunnableObject * This);

        HRESULT ( __export __stdcall *LockRunning )(
            IRunnableObject * This,
                       BOOL fLock,
                       BOOL fLastUnlockCloses);

        HRESULT ( __export __stdcall *SetContainedObject )(
            IRunnableObject * This,
                       BOOL fContained);

       
    } IRunnableObjectVtbl;

    struct IRunnableObject
    {
        struct IRunnableObjectVtbl *lpVtbl;
    };
# 2334 "/usr/local/arm-wince-pe/include/objidl.h" 3
HRESULT __export __stdcall IRunnableObject_GetRunningClass_Proxy(
    IRunnableObject * This,
                LPCLSID lpClsid);


void IRunnableObject_GetRunningClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRunnableObject_Run_Proxy(
    IRunnableObject * This,
               LPBINDCTX pbc);


void IRunnableObject_Run_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall IRunnableObject_RemoteIsRunning_Proxy(
    IRunnableObject * This);


void IRunnableObject_RemoteIsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRunnableObject_LockRunning_Proxy(
    IRunnableObject * This,
               BOOL fLock,
               BOOL fLastUnlockCloses);


void IRunnableObject_LockRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRunnableObject_SetContainedObject_Proxy(
    IRunnableObject * This,
               BOOL fContained);


void IRunnableObject_SetContainedObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2409 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IRunningObjectTable *LPRUNNINGOBJECTTABLE;


extern const IID IID_IRunningObjectTable;
# 2451 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IRunningObjectTableVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IRunningObjectTable * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IRunningObjectTable * This);

        ULONG ( __export __stdcall *Release )(
            IRunningObjectTable * This);

        HRESULT ( __export __stdcall *Register )(
            IRunningObjectTable * This,
                       DWORD grfFlags,
                               IUnknown *punkObject,
                               IMoniker *pmkObjectName,
                        DWORD *pdwRegister);

        HRESULT ( __export __stdcall *Revoke )(
            IRunningObjectTable * This,
                       DWORD dwRegister);

        HRESULT ( __export __stdcall *IsRunning )(
            IRunningObjectTable * This,
                               IMoniker *pmkObjectName);

        HRESULT ( __export __stdcall *GetObjectA )(
            IRunningObjectTable * This,
                               IMoniker *pmkObjectName,
                        IUnknown * *ppunkObject);

        HRESULT ( __export __stdcall *NoteChangeTime )(
            IRunningObjectTable * This,
                       DWORD dwRegister,
                       FILETIME *pfiletime);

        HRESULT ( __export __stdcall *GetTimeOfLastChange )(
            IRunningObjectTable * This,
                               IMoniker *pmkObjectName,
                        FILETIME *pfiletime);

        HRESULT ( __export __stdcall *EnumRunning )(
            IRunningObjectTable * This,
                        IEnumMoniker * *ppenumMoniker);

       
    } IRunningObjectTableVtbl;

    struct IRunningObjectTable
    {
        struct IRunningObjectTableVtbl *lpVtbl;
    };
# 2551 "/usr/local/arm-wince-pe/include/objidl.h" 3
HRESULT __export __stdcall IRunningObjectTable_Register_Proxy(
    IRunningObjectTable * This,
               DWORD grfFlags,
                       IUnknown *punkObject,
                       IMoniker *pmkObjectName,
                DWORD *pdwRegister);


void IRunningObjectTable_Register_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRunningObjectTable_Revoke_Proxy(
    IRunningObjectTable * This,
               DWORD dwRegister);


void IRunningObjectTable_Revoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRunningObjectTable_IsRunning_Proxy(
    IRunningObjectTable * This,
                       IMoniker *pmkObjectName);


void IRunningObjectTable_IsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRunningObjectTable_GetObject_Proxy(
    IRunningObjectTable * This,
                       IMoniker *pmkObjectName,
                IUnknown * *ppunkObject);


void IRunningObjectTable_GetObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRunningObjectTable_NoteChangeTime_Proxy(
    IRunningObjectTable * This,
               DWORD dwRegister,
               FILETIME *pfiletime);


void IRunningObjectTable_NoteChangeTime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRunningObjectTable_GetTimeOfLastChange_Proxy(
    IRunningObjectTable * This,
                       IMoniker *pmkObjectName,
                FILETIME *pfiletime);


void IRunningObjectTable_GetTimeOfLastChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRunningObjectTable_EnumRunning_Proxy(
    IRunningObjectTable * This,
                IEnumMoniker * *ppenumMoniker);


void IRunningObjectTable_EnumRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2656 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IPersist *LPPERSIST;


extern const IID IID_IPersist;
# 2674 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IPersistVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IPersist * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IPersist * This);

        ULONG ( __export __stdcall *Release )(
            IPersist * This);

        HRESULT ( __export __stdcall *GetClassID )(
            IPersist * This,
                        CLSID *pClassID);

       
    } IPersistVtbl;

    struct IPersist
    {
        struct IPersistVtbl *lpVtbl;
    };
# 2726 "/usr/local/arm-wince-pe/include/objidl.h" 3
HRESULT __export __stdcall IPersist_GetClassID_Proxy(
    IPersist * This,
                CLSID *pClassID);


void IPersist_GetClassID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2753 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IPersistStream *LPPERSISTSTREAM;


extern const IID IID_IPersistStream;
# 2780 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IPersistStreamVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IPersistStream * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IPersistStream * This);

        ULONG ( __export __stdcall *Release )(
            IPersistStream * This);

        HRESULT ( __export __stdcall *GetClassID )(
            IPersistStream * This,
                        CLSID *pClassID);

        HRESULT ( __export __stdcall *IsDirty )(
            IPersistStream * This);

        HRESULT ( __export __stdcall *Load )(
            IPersistStream * This,
                               IStream *pStm);

        HRESULT ( __export __stdcall *Save )(
            IPersistStream * This,
                               IStream *pStm,
                       BOOL fClearDirty);

        HRESULT ( __export __stdcall *GetSizeMax )(
            IPersistStream * This,
                        ULARGE_INTEGER *pcbSize);

       
    } IPersistStreamVtbl;

    struct IPersistStream
    {
        struct IPersistStreamVtbl *lpVtbl;
    };
# 2861 "/usr/local/arm-wince-pe/include/objidl.h" 3
HRESULT __export __stdcall IPersistStream_IsDirty_Proxy(
    IPersistStream * This);


void IPersistStream_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPersistStream_Load_Proxy(
    IPersistStream * This,
                       IStream *pStm);


void IPersistStream_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPersistStream_Save_Proxy(
    IPersistStream * This,
                       IStream *pStm,
               BOOL fClearDirty);


void IPersistStream_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPersistStream_GetSizeMax_Proxy(
    IPersistStream * This,
                ULARGE_INTEGER *pcbSize);


void IPersistStream_GetSizeMax_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2924 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IMoniker *LPMONIKER;

typedef
enum tagMKSYS
    { MKSYS_NONE = 0,
        MKSYS_GENERICCOMPOSITE = 1,
        MKSYS_FILEMONIKER = 2,
        MKSYS_ANTIMONIKER = 3,
        MKSYS_ITEMMONIKER = 4,
        MKSYS_POINTERMONIKER = 5,
        MKSYS_CLASSMONIKER = 7,
        MKSYS_OBJREFMONIKER = 8
    } MKSYS;

typedef
enum tagMKREDUCE
    { MKRREDUCE_ONE = 3 << 16,
        MKRREDUCE_TOUSER = 2 << 16,
        MKRREDUCE_THROUGHUSER = 1 << 16,
        MKRREDUCE_ALL = 0
    } MKRREDUCE;


extern const IID IID_IMoniker;
# 3028 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IMonikerVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IMoniker * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IMoniker * This);

        ULONG ( __export __stdcall *Release )(
            IMoniker * This);

        HRESULT ( __export __stdcall *GetClassID )(
            IMoniker * This,
                        CLSID *pClassID);

        HRESULT ( __export __stdcall *IsDirty )(
            IMoniker * This);

        HRESULT ( __export __stdcall *Load )(
            IMoniker * This,
                               IStream *pStm);

        HRESULT ( __export __stdcall *Save )(
            IMoniker * This,
                               IStream *pStm,
                       BOOL fClearDirty);

        HRESULT ( __export __stdcall *GetSizeMax )(
            IMoniker * This,
                        ULARGE_INTEGER *pcbSize);

                      HRESULT ( __export __stdcall *BindToObject )(
            IMoniker * This,
                               IBindCtx *pbc,
                               IMoniker *pmkToLeft,
                       const IID * const riidResult,
                                void * *ppvResult);

                      HRESULT ( __export __stdcall *BindToStorage )(
            IMoniker * This,
                               IBindCtx *pbc,
                               IMoniker *pmkToLeft,
                       const IID * const riid,
                                void * *ppvObj);

        HRESULT ( __export __stdcall *Reduce )(
            IMoniker * This,
                               IBindCtx *pbc,
                       DWORD dwReduceHowFar,
                                    IMoniker * *ppmkToLeft,
                        IMoniker * *ppmkReduced);

        HRESULT ( __export __stdcall *ComposeWith )(
            IMoniker * This,
                               IMoniker *pmkRight,
                       BOOL fOnlyIfNotGeneric,
                        IMoniker * *ppmkComposite);

        HRESULT ( __export __stdcall *Enum )(
            IMoniker * This,
                       BOOL fForward,
                        IEnumMoniker * *ppenumMoniker);

        HRESULT ( __export __stdcall *IsEqual )(
            IMoniker * This,
                               IMoniker *pmkOtherMoniker);

        HRESULT ( __export __stdcall *Hash )(
            IMoniker * This,
                        DWORD *pdwHash);

        HRESULT ( __export __stdcall *IsRunning )(
            IMoniker * This,
                               IBindCtx *pbc,
                               IMoniker *pmkToLeft,
                               IMoniker *pmkNewlyRunning);

        HRESULT ( __export __stdcall *GetTimeOfLastChange )(
            IMoniker * This,
                               IBindCtx *pbc,
                               IMoniker *pmkToLeft,
                        FILETIME *pFileTime);

        HRESULT ( __export __stdcall *Inverse )(
            IMoniker * This,
                        IMoniker * *ppmk);

        HRESULT ( __export __stdcall *CommonPrefixWith )(
            IMoniker * This,
                               IMoniker *pmkOther,
                        IMoniker * *ppmkPrefix);

        HRESULT ( __export __stdcall *RelativePathTo )(
            IMoniker * This,
                               IMoniker *pmkOther,
                        IMoniker * *ppmkRelPath);

        HRESULT ( __export __stdcall *GetDisplayName )(
            IMoniker * This,
                               IBindCtx *pbc,
                               IMoniker *pmkToLeft,
                        LPOLESTR *ppszDisplayName);

        HRESULT ( __export __stdcall *ParseDisplayName )(
            IMoniker * This,
                               IBindCtx *pbc,
                               IMoniker *pmkToLeft,
                       LPOLESTR pszDisplayName,
                        ULONG *pchEaten,
                        IMoniker * *ppmkOut);

        HRESULT ( __export __stdcall *IsSystemMoniker )(
            IMoniker * This,
                        DWORD *pdwMksys);

       
    } IMonikerVtbl;

    struct IMoniker
    {
        struct IMonikerVtbl *lpVtbl;
    };
# 3239 "/usr/local/arm-wince-pe/include/objidl.h" 3
                HRESULT __export __stdcall IMoniker_RemoteBindToObject_Proxy(
    IMoniker * This,
                       IBindCtx *pbc,
                       IMoniker *pmkToLeft,
               const IID * const riidResult,
                        IUnknown * *ppvResult);


void IMoniker_RemoteBindToObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall IMoniker_RemoteBindToStorage_Proxy(
    IMoniker * This,
                       IBindCtx *pbc,
                       IMoniker *pmkToLeft,
               const IID * const riid,
                        IUnknown * *ppvObj);


void IMoniker_RemoteBindToStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IMoniker_Reduce_Proxy(
    IMoniker * This,
                       IBindCtx *pbc,
               DWORD dwReduceHowFar,
                            IMoniker * *ppmkToLeft,
                IMoniker * *ppmkReduced);


void IMoniker_Reduce_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IMoniker_ComposeWith_Proxy(
    IMoniker * This,
                       IMoniker *pmkRight,
               BOOL fOnlyIfNotGeneric,
                IMoniker * *ppmkComposite);


void IMoniker_ComposeWith_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IMoniker_Enum_Proxy(
    IMoniker * This,
               BOOL fForward,
                IEnumMoniker * *ppenumMoniker);


void IMoniker_Enum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IMoniker_IsEqual_Proxy(
    IMoniker * This,
                       IMoniker *pmkOtherMoniker);


void IMoniker_IsEqual_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IMoniker_Hash_Proxy(
    IMoniker * This,
                DWORD *pdwHash);


void IMoniker_Hash_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IMoniker_IsRunning_Proxy(
    IMoniker * This,
                       IBindCtx *pbc,
                       IMoniker *pmkToLeft,
                       IMoniker *pmkNewlyRunning);


void IMoniker_IsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IMoniker_GetTimeOfLastChange_Proxy(
    IMoniker * This,
                       IBindCtx *pbc,
                       IMoniker *pmkToLeft,
                FILETIME *pFileTime);


void IMoniker_GetTimeOfLastChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IMoniker_Inverse_Proxy(
    IMoniker * This,
                IMoniker * *ppmk);


void IMoniker_Inverse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IMoniker_CommonPrefixWith_Proxy(
    IMoniker * This,
                       IMoniker *pmkOther,
                IMoniker * *ppmkPrefix);


void IMoniker_CommonPrefixWith_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IMoniker_RelativePathTo_Proxy(
    IMoniker * This,
                       IMoniker *pmkOther,
                IMoniker * *ppmkRelPath);


void IMoniker_RelativePathTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IMoniker_GetDisplayName_Proxy(
    IMoniker * This,
                       IBindCtx *pbc,
                       IMoniker *pmkToLeft,
                LPOLESTR *ppszDisplayName);


void IMoniker_GetDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IMoniker_ParseDisplayName_Proxy(
    IMoniker * This,
                       IBindCtx *pbc,
                       IMoniker *pmkToLeft,
               LPOLESTR pszDisplayName,
                ULONG *pchEaten,
                IMoniker * *ppmkOut);


void IMoniker_ParseDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IMoniker_IsSystemMoniker_Proxy(
    IMoniker * This,
                DWORD *pdwMksys);


void IMoniker_IsSystemMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 3459 "/usr/local/arm-wince-pe/include/objidl.h" 3
extern const IID IID_IROTData;
# 3476 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IROTDataVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IROTData * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IROTData * This);

        ULONG ( __export __stdcall *Release )(
            IROTData * This);

        HRESULT ( __export __stdcall *GetComparisonData )(
            IROTData * This,
                                 byte *pbData,
                       ULONG cbMax,
                        ULONG *pcbData);

       
    } IROTDataVtbl;

    struct IROTData
    {
        struct IROTDataVtbl *lpVtbl;
    };
# 3530 "/usr/local/arm-wince-pe/include/objidl.h" 3
HRESULT __export __stdcall IROTData_GetComparisonData_Proxy(
    IROTData * This,
                         byte *pbData,
               ULONG cbMax,
                ULONG *pcbData);


void IROTData_GetComparisonData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 3559 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IEnumString *LPENUMSTRING;


extern const IID IID_IEnumString;
# 3587 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IEnumStringVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IEnumString * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IEnumString * This);

        ULONG ( __export __stdcall *Release )(
            IEnumString * This);

                      HRESULT ( __export __stdcall *Next )(
            IEnumString * This,
                       ULONG celt,
                                            LPOLESTR *rgelt,
                        ULONG *pceltFetched);

        HRESULT ( __export __stdcall *Skip )(
            IEnumString * This,
                       ULONG celt);

        HRESULT ( __export __stdcall *Reset )(
            IEnumString * This);

        HRESULT ( __export __stdcall *Clone )(
            IEnumString * This,
                        IEnumString * *ppenum);

       
    } IEnumStringVtbl;

    struct IEnumString
    {
        struct IEnumStringVtbl *lpVtbl;
    };
# 3661 "/usr/local/arm-wince-pe/include/objidl.h" 3
                HRESULT __export __stdcall IEnumString_RemoteNext_Proxy(
    IEnumString * This,
               ULONG celt,
                                    LPOLESTR *rgelt,
                ULONG *pceltFetched);


void IEnumString_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumString_Skip_Proxy(
    IEnumString * This,
               ULONG celt);


void IEnumString_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumString_Reset_Proxy(
    IEnumString * This);


void IEnumString_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumString_Clone_Proxy(
    IEnumString * This,
                IEnumString * *ppenum);


void IEnumString_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 3726 "/usr/local/arm-wince-pe/include/objidl.h" 3
extern const IID IID_ISequentialStream;
# 3748 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct ISequentialStreamVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            ISequentialStream * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            ISequentialStream * This);

        ULONG ( __export __stdcall *Release )(
            ISequentialStream * This);

                      HRESULT ( __export __stdcall *Read )(
            ISequentialStream * This,
                                            void *pv,
                       ULONG cb,
                        ULONG *pcbRead);

                      HRESULT ( __export __stdcall *Write )(
            ISequentialStream * This,
                                const void *pv,
                       ULONG cb,
                        ULONG *pcbWritten);

       
    } ISequentialStreamVtbl;

    struct ISequentialStream
    {
        struct ISequentialStreamVtbl *lpVtbl;
    };
# 3811 "/usr/local/arm-wince-pe/include/objidl.h" 3
                HRESULT __export __stdcall ISequentialStream_RemoteRead_Proxy(
    ISequentialStream * This,
                                    byte *pv,
               ULONG cb,
                ULONG *pcbRead);


void ISequentialStream_RemoteRead_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall ISequentialStream_RemoteWrite_Proxy(
    ISequentialStream * This,
                        const byte *pv,
               ULONG cb,
                ULONG *pcbWritten);


void ISequentialStream_RemoteWrite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 3854 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IStream *LPSTREAM;

typedef struct tagSTATSTG
    {
    LPOLESTR pwcsName;
    DWORD type;
    ULARGE_INTEGER cbSize;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD grfMode;
    DWORD grfLocksSupported;
    CLSID clsid;
    DWORD grfStateBits;
    DWORD reserved;
    } STATSTG;

typedef
enum tagSTGTY
    { STGTY_STORAGE = 1,
        STGTY_STREAM = 2,
        STGTY_LOCKBYTES = 3,
        STGTY_PROPERTY = 4
    } STGTY;

typedef
enum tagSTREAM_SEEK
    { STREAM_SEEK_SET = 0,
        STREAM_SEEK_CUR = 1,
        STREAM_SEEK_END = 2
    } STREAM_SEEK;

typedef
enum tagLOCKTYPE
    { LOCK_WRITE = 1,
        LOCK_EXCLUSIVE = 2,
        LOCK_ONLYONCE = 4
    } LOCKTYPE;


extern const IID IID_IStream;
# 3942 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IStreamVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IStream * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IStream * This);

        ULONG ( __export __stdcall *Release )(
            IStream * This);

                      HRESULT ( __export __stdcall *Read )(
            IStream * This,
                                            void *pv,
                       ULONG cb,
                        ULONG *pcbRead);

                      HRESULT ( __export __stdcall *Write )(
            IStream * This,
                                const void *pv,
                       ULONG cb,
                        ULONG *pcbWritten);

                      HRESULT ( __export __stdcall *Seek )(
            IStream * This,
                       LARGE_INTEGER dlibMove,
                       DWORD dwOrigin,
                        ULARGE_INTEGER *plibNewPosition);

        HRESULT ( __export __stdcall *SetSize )(
            IStream * This,
                       ULARGE_INTEGER libNewSize);

                      HRESULT ( __export __stdcall *CopyTo )(
            IStream * This,
                               IStream *pstm,
                       ULARGE_INTEGER cb,
                        ULARGE_INTEGER *pcbRead,
                        ULARGE_INTEGER *pcbWritten);

        HRESULT ( __export __stdcall *Commit )(
            IStream * This,
                       DWORD grfCommitFlags);

        HRESULT ( __export __stdcall *Revert )(
            IStream * This);

        HRESULT ( __export __stdcall *LockRegion )(
            IStream * This,
                       ULARGE_INTEGER libOffset,
                       ULARGE_INTEGER cb,
                       DWORD dwLockType);

        HRESULT ( __export __stdcall *UnlockRegion )(
            IStream * This,
                       ULARGE_INTEGER libOffset,
                       ULARGE_INTEGER cb,
                       DWORD dwLockType);

        HRESULT ( __export __stdcall *Stat )(
            IStream * This,
                        STATSTG *pstatstg,
                       DWORD grfStatFlag);

        HRESULT ( __export __stdcall *Clone )(
            IStream * This,
                        IStream * *ppstm);

       
    } IStreamVtbl;

    struct IStream
    {
        struct IStreamVtbl *lpVtbl;
    };
# 4078 "/usr/local/arm-wince-pe/include/objidl.h" 3
                HRESULT __export __stdcall IStream_RemoteSeek_Proxy(
    IStream * This,
               LARGE_INTEGER dlibMove,
               DWORD dwOrigin,
                ULARGE_INTEGER *plibNewPosition);


void IStream_RemoteSeek_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IStream_SetSize_Proxy(
    IStream * This,
               ULARGE_INTEGER libNewSize);


void IStream_SetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall IStream_RemoteCopyTo_Proxy(
    IStream * This,
                       IStream *pstm,
               ULARGE_INTEGER cb,
                ULARGE_INTEGER *pcbRead,
                ULARGE_INTEGER *pcbWritten);


void IStream_RemoteCopyTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IStream_Commit_Proxy(
    IStream * This,
               DWORD grfCommitFlags);


void IStream_Commit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IStream_Revert_Proxy(
    IStream * This);


void IStream_Revert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IStream_LockRegion_Proxy(
    IStream * This,
               ULARGE_INTEGER libOffset,
               ULARGE_INTEGER cb,
               DWORD dwLockType);


void IStream_LockRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IStream_UnlockRegion_Proxy(
    IStream * This,
               ULARGE_INTEGER libOffset,
               ULARGE_INTEGER cb,
               DWORD dwLockType);


void IStream_UnlockRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IStream_Stat_Proxy(
    IStream * This,
                STATSTG *pstatstg,
               DWORD grfStatFlag);


void IStream_Stat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IStream_Clone_Proxy(
    IStream * This,
                IStream * *ppstm);


void IStream_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 4210 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IEnumSTATSTG *LPENUMSTATSTG;


extern const IID IID_IEnumSTATSTG;
# 4238 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IEnumSTATSTGVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IEnumSTATSTG * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IEnumSTATSTG * This);

        ULONG ( __export __stdcall *Release )(
            IEnumSTATSTG * This);

                      HRESULT ( __export __stdcall *Next )(
            IEnumSTATSTG * This,
                       ULONG celt,
                                            STATSTG *rgelt,
                        ULONG *pceltFetched);

        HRESULT ( __export __stdcall *Skip )(
            IEnumSTATSTG * This,
                       ULONG celt);

        HRESULT ( __export __stdcall *Reset )(
            IEnumSTATSTG * This);

        HRESULT ( __export __stdcall *Clone )(
            IEnumSTATSTG * This,
                        IEnumSTATSTG * *ppenum);

       
    } IEnumSTATSTGVtbl;

    struct IEnumSTATSTG
    {
        struct IEnumSTATSTGVtbl *lpVtbl;
    };
# 4312 "/usr/local/arm-wince-pe/include/objidl.h" 3
                HRESULT __export __stdcall IEnumSTATSTG_RemoteNext_Proxy(
    IEnumSTATSTG * This,
               ULONG celt,
                                    STATSTG *rgelt,
                ULONG *pceltFetched);


void IEnumSTATSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumSTATSTG_Skip_Proxy(
    IEnumSTATSTG * This,
               ULONG celt);


void IEnumSTATSTG_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumSTATSTG_Reset_Proxy(
    IEnumSTATSTG * This);


void IEnumSTATSTG_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumSTATSTG_Clone_Proxy(
    IEnumSTATSTG * This,
                IEnumSTATSTG * *ppenum);


void IEnumSTATSTG_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 4376 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IStorage *LPSTORAGE;

typedef struct tagRemSNB
    {
    unsigned long ulCntStr;
    unsigned long ulCntChar;
                    OLECHAR rgString[ 1 ];
    } RemSNB;

typedef RemSNB *wireSNB;

typedef OLECHAR * *SNB;


extern const IID IID_IStorage;
# 4478 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IStorageVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IStorage * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IStorage * This);

        ULONG ( __export __stdcall *Release )(
            IStorage * This);

        HRESULT ( __export __stdcall *CreateStream )(
            IStorage * This,
                               const OLECHAR *pwcsName,
                       DWORD grfMode,
                       DWORD reserved1,
                       DWORD reserved2,
                        IStream * *ppstm);

                      HRESULT ( __export __stdcall *OpenStream )(
            IStorage * This,
                               const OLECHAR *pwcsName,
                               void *reserved1,
                       DWORD grfMode,
                       DWORD reserved2,
                        IStream * *ppstm);

        HRESULT ( __export __stdcall *CreateStorage )(
            IStorage * This,
                               const OLECHAR *pwcsName,
                       DWORD grfMode,
                       DWORD dwStgFmt,
                       DWORD reserved2,
                        IStorage * *ppstg);

        HRESULT ( __export __stdcall *OpenStorage )(
            IStorage * This,
                                       const OLECHAR *pwcsName,
                               IStorage *pstgPriority,
                       DWORD grfMode,
                               SNB snbExclude,
                       DWORD reserved,
                        IStorage * *ppstg);

        HRESULT ( __export __stdcall *CopyTo )(
            IStorage * This,
                       DWORD ciidExclude,
                                        const IID *rgiidExclude,
                               SNB snbExclude,
                               IStorage *pstgDest);

        HRESULT ( __export __stdcall *MoveElementTo )(
            IStorage * This,
                               const OLECHAR *pwcsName,
                               IStorage *pstgDest,
                               const OLECHAR *pwcsNewName,
                       DWORD grfFlags);

        HRESULT ( __export __stdcall *Commit )(
            IStorage * This,
                       DWORD grfCommitFlags);

        HRESULT ( __export __stdcall *Revert )(
            IStorage * This);

                      HRESULT ( __export __stdcall *EnumElements )(
            IStorage * This,
                       DWORD reserved1,
                                        void *reserved2,
                       DWORD reserved3,
                        IEnumSTATSTG * *ppenum);

        HRESULT ( __export __stdcall *DestroyElement )(
            IStorage * This,
                               const OLECHAR *pwcsName);

        HRESULT ( __export __stdcall *RenameElement )(
            IStorage * This,
                               const OLECHAR *pwcsOldName,
                               const OLECHAR *pwcsNewName);

        HRESULT ( __export __stdcall *SetElementTimes )(
            IStorage * This,
                                       const OLECHAR *pwcsName,
                               const FILETIME *pctime,
                               const FILETIME *patime,
                               const FILETIME *pmtime);

        HRESULT ( __export __stdcall *SetClass )(
            IStorage * This,
                       const CLSID * const clsid);

        HRESULT ( __export __stdcall *SetStateBits )(
            IStorage * This,
                       DWORD grfStateBits,
                       DWORD grfMask);

        HRESULT ( __export __stdcall *Stat )(
            IStorage * This,
                        STATSTG *pstatstg,
                       DWORD grfStatFlag);

       
    } IStorageVtbl;

    struct IStorage
    {
        struct IStorageVtbl *lpVtbl;
    };
# 4659 "/usr/local/arm-wince-pe/include/objidl.h" 3
HRESULT __export __stdcall IStorage_CreateStream_Proxy(
    IStorage * This,
                       const OLECHAR *pwcsName,
               DWORD grfMode,
               DWORD reserved1,
               DWORD reserved2,
                IStream * *ppstm);


void IStorage_CreateStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall IStorage_RemoteOpenStream_Proxy(
    IStorage * This,
                       const OLECHAR *pwcsName,
               unsigned long cbReserved1,
                                byte *reserved1,
               DWORD grfMode,
               DWORD reserved2,
                IStream * *ppstm);


void IStorage_RemoteOpenStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IStorage_CreateStorage_Proxy(
    IStorage * This,
                       const OLECHAR *pwcsName,
               DWORD grfMode,
               DWORD dwStgFmt,
               DWORD reserved2,
                IStorage * *ppstg);


void IStorage_CreateStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IStorage_OpenStorage_Proxy(
    IStorage * This,
                               const OLECHAR *pwcsName,
                       IStorage *pstgPriority,
               DWORD grfMode,
                       SNB snbExclude,
               DWORD reserved,
                IStorage * *ppstg);


void IStorage_OpenStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IStorage_CopyTo_Proxy(
    IStorage * This,
               DWORD ciidExclude,
                                const IID *rgiidExclude,
                       SNB snbExclude,
                       IStorage *pstgDest);


void IStorage_CopyTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IStorage_MoveElementTo_Proxy(
    IStorage * This,
                       const OLECHAR *pwcsName,
                       IStorage *pstgDest,
                       const OLECHAR *pwcsNewName,
               DWORD grfFlags);


void IStorage_MoveElementTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IStorage_Commit_Proxy(
    IStorage * This,
               DWORD grfCommitFlags);


void IStorage_Commit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IStorage_Revert_Proxy(
    IStorage * This);


void IStorage_Revert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall IStorage_RemoteEnumElements_Proxy(
    IStorage * This,
               DWORD reserved1,
               unsigned long cbReserved2,
                                byte *reserved2,
               DWORD reserved3,
                IEnumSTATSTG * *ppenum);


void IStorage_RemoteEnumElements_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IStorage_DestroyElement_Proxy(
    IStorage * This,
                       const OLECHAR *pwcsName);


void IStorage_DestroyElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IStorage_RenameElement_Proxy(
    IStorage * This,
                       const OLECHAR *pwcsOldName,
                       const OLECHAR *pwcsNewName);


void IStorage_RenameElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IStorage_SetElementTimes_Proxy(
    IStorage * This,
                               const OLECHAR *pwcsName,
                       const FILETIME *pctime,
                       const FILETIME *patime,
                       const FILETIME *pmtime);


void IStorage_SetElementTimes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IStorage_SetClass_Proxy(
    IStorage * This,
               const CLSID * const clsid);


void IStorage_SetClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IStorage_SetStateBits_Proxy(
    IStorage * This,
               DWORD grfStateBits,
               DWORD grfMask);


void IStorage_SetStateBits_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IStorage_Stat_Proxy(
    IStorage * This,
                STATSTG *pstatstg,
               DWORD grfStatFlag);


void IStorage_Stat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 4887 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IPersistFile *LPPERSISTFILE;


extern const IID IID_IPersistFile;
# 4918 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IPersistFileVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IPersistFile * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IPersistFile * This);

        ULONG ( __export __stdcall *Release )(
            IPersistFile * This);

        HRESULT ( __export __stdcall *GetClassID )(
            IPersistFile * This,
                        CLSID *pClassID);

        HRESULT ( __export __stdcall *IsDirty )(
            IPersistFile * This);

        HRESULT ( __export __stdcall *Load )(
            IPersistFile * This,
                       LPCOLESTR pszFileName,
                       DWORD dwMode);

        HRESULT ( __export __stdcall *Save )(
            IPersistFile * This,
                               LPCOLESTR pszFileName,
                       BOOL fRemember);

        HRESULT ( __export __stdcall *SaveCompleted )(
            IPersistFile * This,
                               LPCOLESTR pszFileName);

        HRESULT ( __export __stdcall *GetCurFile )(
            IPersistFile * This,
                        LPOLESTR *ppszFileName);

       
    } IPersistFileVtbl;

    struct IPersistFile
    {
        struct IPersistFileVtbl *lpVtbl;
    };
# 5007 "/usr/local/arm-wince-pe/include/objidl.h" 3
HRESULT __export __stdcall IPersistFile_IsDirty_Proxy(
    IPersistFile * This);


void IPersistFile_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPersistFile_Load_Proxy(
    IPersistFile * This,
               LPCOLESTR pszFileName,
               DWORD dwMode);


void IPersistFile_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPersistFile_Save_Proxy(
    IPersistFile * This,
                       LPCOLESTR pszFileName,
               BOOL fRemember);


void IPersistFile_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPersistFile_SaveCompleted_Proxy(
    IPersistFile * This,
                       LPCOLESTR pszFileName);


void IPersistFile_SaveCompleted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPersistFile_GetCurFile_Proxy(
    IPersistFile * This,
                LPOLESTR *ppszFileName);


void IPersistFile_GetCurFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 5083 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IPersistStorage *LPPERSISTSTORAGE;


extern const IID IID_IPersistStorage;
# 5115 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IPersistStorageVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IPersistStorage * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IPersistStorage * This);

        ULONG ( __export __stdcall *Release )(
            IPersistStorage * This);

        HRESULT ( __export __stdcall *GetClassID )(
            IPersistStorage * This,
                        CLSID *pClassID);

        HRESULT ( __export __stdcall *IsDirty )(
            IPersistStorage * This);

        HRESULT ( __export __stdcall *InitNew )(
            IPersistStorage * This,
                               IStorage *pStg);

        HRESULT ( __export __stdcall *Load )(
            IPersistStorage * This,
                               IStorage *pStg);

        HRESULT ( __export __stdcall *Save )(
            IPersistStorage * This,
                               IStorage *pStgSave,
                       BOOL fSameAsLoad);

        HRESULT ( __export __stdcall *SaveCompleted )(
            IPersistStorage * This,
                               IStorage *pStgNew);

        HRESULT ( __export __stdcall *HandsOffStorage )(
            IPersistStorage * This);

       
    } IPersistStorageVtbl;

    struct IPersistStorage
    {
        struct IPersistStorageVtbl *lpVtbl;
    };
# 5209 "/usr/local/arm-wince-pe/include/objidl.h" 3
HRESULT __export __stdcall IPersistStorage_IsDirty_Proxy(
    IPersistStorage * This);


void IPersistStorage_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPersistStorage_InitNew_Proxy(
    IPersistStorage * This,
                       IStorage *pStg);


void IPersistStorage_InitNew_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPersistStorage_Load_Proxy(
    IPersistStorage * This,
                       IStorage *pStg);


void IPersistStorage_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPersistStorage_Save_Proxy(
    IPersistStorage * This,
                       IStorage *pStgSave,
               BOOL fSameAsLoad);


void IPersistStorage_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPersistStorage_SaveCompleted_Proxy(
    IPersistStorage * This,
                       IStorage *pStgNew);


void IPersistStorage_SaveCompleted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPersistStorage_HandsOffStorage_Proxy(
    IPersistStorage * This);


void IPersistStorage_HandsOffStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 5295 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef ILockBytes *LPLOCKBYTES;


extern const IID IID_ILockBytes;
# 5341 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct ILockBytesVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            ILockBytes * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            ILockBytes * This);

        ULONG ( __export __stdcall *Release )(
            ILockBytes * This);

                      HRESULT ( __export __stdcall *ReadAt )(
            ILockBytes * This,
                       ULARGE_INTEGER ulOffset,
                                            void *pv,
                       ULONG cb,
                        ULONG *pcbRead);

                      HRESULT ( __export __stdcall *WriteAt )(
            ILockBytes * This,
                       ULARGE_INTEGER ulOffset,
                                const void *pv,
                       ULONG cb,
                        ULONG *pcbWritten);

        HRESULT ( __export __stdcall *Flush )(
            ILockBytes * This);

        HRESULT ( __export __stdcall *SetSize )(
            ILockBytes * This,
                       ULARGE_INTEGER cb);

        HRESULT ( __export __stdcall *LockRegion )(
            ILockBytes * This,
                       ULARGE_INTEGER libOffset,
                       ULARGE_INTEGER cb,
                       DWORD dwLockType);

        HRESULT ( __export __stdcall *UnlockRegion )(
            ILockBytes * This,
                       ULARGE_INTEGER libOffset,
                       ULARGE_INTEGER cb,
                       DWORD dwLockType);

        HRESULT ( __export __stdcall *Stat )(
            ILockBytes * This,
                        STATSTG *pstatstg,
                       DWORD grfStatFlag);

       
    } ILockBytesVtbl;

    struct ILockBytes
    {
        struct ILockBytesVtbl *lpVtbl;
    };
# 5445 "/usr/local/arm-wince-pe/include/objidl.h" 3
                HRESULT __export __stdcall ILockBytes_RemoteReadAt_Proxy(
    ILockBytes * This,
               ULARGE_INTEGER ulOffset,
                                    byte *pv,
               ULONG cb,
                ULONG *pcbRead);


void ILockBytes_RemoteReadAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall ILockBytes_RemoteWriteAt_Proxy(
    ILockBytes * This,
               ULARGE_INTEGER ulOffset,
                        const byte *pv,
               ULONG cb,
                ULONG *pcbWritten);


void ILockBytes_RemoteWriteAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ILockBytes_Flush_Proxy(
    ILockBytes * This);


void ILockBytes_Flush_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ILockBytes_SetSize_Proxy(
    ILockBytes * This,
               ULARGE_INTEGER cb);


void ILockBytes_SetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ILockBytes_LockRegion_Proxy(
    ILockBytes * This,
               ULARGE_INTEGER libOffset,
               ULARGE_INTEGER cb,
               DWORD dwLockType);


void ILockBytes_LockRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ILockBytes_UnlockRegion_Proxy(
    ILockBytes * This,
               ULARGE_INTEGER libOffset,
               ULARGE_INTEGER cb,
               DWORD dwLockType);


void ILockBytes_UnlockRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ILockBytes_Stat_Proxy(
    ILockBytes * This,
                STATSTG *pstatstg,
               DWORD grfStatFlag);


void ILockBytes_Stat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 5554 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IEnumFORMATETC *LPENUMFORMATETC;

typedef struct tagDVTARGETDEVICE
    {
    DWORD tdSize;
    WORD tdDriverNameOffset;
    WORD tdDeviceNameOffset;
    WORD tdPortNameOffset;
    WORD tdExtDevmodeOffset;
                    BYTE tdData[ 1 ];
    } DVTARGETDEVICE;

typedef CLIPFORMAT *LPCLIPFORMAT;

typedef struct tagFORMATETC
    {
    CLIPFORMAT cfFormat;
                   DVTARGETDEVICE *ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
    } FORMATETC;

typedef struct tagFORMATETC *LPFORMATETC;


extern const IID IID_IEnumFORMATETC;
# 5605 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IEnumFORMATETCVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IEnumFORMATETC * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IEnumFORMATETC * This);

        ULONG ( __export __stdcall *Release )(
            IEnumFORMATETC * This);

                      HRESULT ( __export __stdcall *Next )(
            IEnumFORMATETC * This,
                       ULONG celt,
                                            FORMATETC *rgelt,
                        ULONG *pceltFetched);

        HRESULT ( __export __stdcall *Skip )(
            IEnumFORMATETC * This,
                       ULONG celt);

        HRESULT ( __export __stdcall *Reset )(
            IEnumFORMATETC * This);

        HRESULT ( __export __stdcall *Clone )(
            IEnumFORMATETC * This,
                        IEnumFORMATETC * *ppenum);

       
    } IEnumFORMATETCVtbl;

    struct IEnumFORMATETC
    {
        struct IEnumFORMATETCVtbl *lpVtbl;
    };
# 5679 "/usr/local/arm-wince-pe/include/objidl.h" 3
                HRESULT __export __stdcall IEnumFORMATETC_RemoteNext_Proxy(
    IEnumFORMATETC * This,
               ULONG celt,
                                    FORMATETC *rgelt,
                ULONG *pceltFetched);


void IEnumFORMATETC_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumFORMATETC_Skip_Proxy(
    IEnumFORMATETC * This,
               ULONG celt);


void IEnumFORMATETC_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumFORMATETC_Reset_Proxy(
    IEnumFORMATETC * This);


void IEnumFORMATETC_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumFORMATETC_Clone_Proxy(
    IEnumFORMATETC * This,
                IEnumFORMATETC * *ppenum);


void IEnumFORMATETC_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 5743 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IEnumSTATDATA *LPENUMSTATDATA;

typedef
enum tagADVF
    { ADVF_NODATA = 1,
        ADVF_PRIMEFIRST = 2,
        ADVF_ONLYONCE = 4,
        ADVF_DATAONSTOP = 64,
        ADVFCACHE_NOHANDLER = 8,
        ADVFCACHE_FORCEBUILTIN = 16,
        ADVFCACHE_ONSAVE = 32
    } ADVF;

typedef struct tagSTATDATA
    {
    FORMATETC formatetc;
    DWORD advf;
                   IAdviseSink *pAdvSink;
    DWORD dwConnection;
    } STATDATA;

typedef STATDATA *LPSTATDATA;


extern const IID IID_IEnumSTATDATA;
# 5792 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IEnumSTATDATAVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IEnumSTATDATA * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IEnumSTATDATA * This);

        ULONG ( __export __stdcall *Release )(
            IEnumSTATDATA * This);

                      HRESULT ( __export __stdcall *Next )(
            IEnumSTATDATA * This,
                       ULONG celt,
                                            STATDATA *rgelt,
                        ULONG *pceltFetched);

        HRESULT ( __export __stdcall *Skip )(
            IEnumSTATDATA * This,
                       ULONG celt);

        HRESULT ( __export __stdcall *Reset )(
            IEnumSTATDATA * This);

        HRESULT ( __export __stdcall *Clone )(
            IEnumSTATDATA * This,
                        IEnumSTATDATA * *ppenum);

       
    } IEnumSTATDATAVtbl;

    struct IEnumSTATDATA
    {
        struct IEnumSTATDATAVtbl *lpVtbl;
    };
# 5866 "/usr/local/arm-wince-pe/include/objidl.h" 3
                HRESULT __export __stdcall IEnumSTATDATA_RemoteNext_Proxy(
    IEnumSTATDATA * This,
               ULONG celt,
                                    STATDATA *rgelt,
                ULONG *pceltFetched);


void IEnumSTATDATA_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumSTATDATA_Skip_Proxy(
    IEnumSTATDATA * This,
               ULONG celt);


void IEnumSTATDATA_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumSTATDATA_Reset_Proxy(
    IEnumSTATDATA * This);


void IEnumSTATDATA_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumSTATDATA_Clone_Proxy(
    IEnumSTATDATA * This,
                IEnumSTATDATA * *ppenum);


void IEnumSTATDATA_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 5930 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IRootStorage *LPROOTSTORAGE;


extern const IID IID_IRootStorage;
# 5948 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IRootStorageVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IRootStorage * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IRootStorage * This);

        ULONG ( __export __stdcall *Release )(
            IRootStorage * This);

        HRESULT ( __export __stdcall *SwitchToFile )(
            IRootStorage * This,
                       LPOLESTR pszFile);

       
    } IRootStorageVtbl;

    struct IRootStorage
    {
        struct IRootStorageVtbl *lpVtbl;
    };
# 6000 "/usr/local/arm-wince-pe/include/objidl.h" 3
HRESULT __export __stdcall IRootStorage_SwitchToFile_Proxy(
    IRootStorage * This,
               LPOLESTR pszFile);


void IRootStorage_SwitchToFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 6027 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IAdviseSink *LPADVISESINK;

typedef
enum tagTYMED
    { TYMED_HGLOBAL = 1,
        TYMED_FILE = 2,
        TYMED_ISTREAM = 4,
        TYMED_ISTORAGE = 8,
        TYMED_GDI = 16,
        TYMED_MFPICT = 32,
        TYMED_ENHMF = 64,
        TYMED_NULL = 0
    } TYMED;


#pragma warning(disable:4200)

typedef struct tagRemSTGMEDIUM
    {
    DWORD tymed;
    DWORD dwHandleType;
    unsigned long pData;
    unsigned long pUnkForRelease;
    unsigned long cbData;
                    byte data[ 1 ];
    } RemSTGMEDIUM;


#pragma warning(default:4200)
# 6072 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef struct tagSTGMEDIUM
    {
    DWORD tymed;
                                   union
        {
                       HBITMAP hBitmap;
                       HMETAFILEPICT hMetaFilePict;
                       HENHMETAFILE hEnhMetaFile;
                       HGLOBAL hGlobal;
                       LPOLESTR lpszFileName;
                       IStream *pstm;
                       IStorage *pstg;

        } ;
                   IUnknown *pUnkForRelease;
    } uSTGMEDIUM;


typedef struct _GDI_OBJECT
    {
    DWORD ObjectType;
                                          union __MIDL_IAdviseSink_0002
        {
                       wireHBITMAP hBitmap;
                       wireHPALETTE hPalette;
                        wireHGLOBAL hGeneric;
        } u;
    } GDI_OBJECT;

typedef struct _userSTGMEDIUM
    {
    struct _STGMEDIUM_UNION
        {
        DWORD tymed;
                                              union __MIDL_IAdviseSink_0003
            {

                           wireHMETAFILEPICT hMetaFilePict;
                           wireHENHMETAFILE hHEnhMetaFile;
                           GDI_OBJECT *hGdiHandle;
                           wireHGLOBAL hGlobal;
                           LPOLESTR lpszFileName;
                           BYTE_BLOB *pstm;
                           BYTE_BLOB *pstg;
            } u;
        } ;
    IUnknown *pUnkForRelease;
    } userSTGMEDIUM;

typedef userSTGMEDIUM *wireSTGMEDIUM;

typedef uSTGMEDIUM STGMEDIUM;

typedef userSTGMEDIUM *wireASYNC_STGMEDIUM;

typedef STGMEDIUM ASYNC_STGMEDIUM;

typedef STGMEDIUM *LPSTGMEDIUM;

typedef struct _userFLAG_STGMEDIUM
    {
    long ContextFlags;
    long fPassOwnership;
    userSTGMEDIUM Stgmed;
    } userFLAG_STGMEDIUM;

typedef userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM;

typedef struct _FLAG_STGMEDIUM
    {
    long ContextFlags;
    long fPassOwnership;
    STGMEDIUM Stgmed;
    } FLAG_STGMEDIUM;


extern const IID IID_IAdviseSink;
# 6175 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IAdviseSinkVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IAdviseSink * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IAdviseSink * This);

        ULONG ( __export __stdcall *Release )(
            IAdviseSink * This);

                      void ( __export __stdcall *OnDataChange )(
            IAdviseSink * This,
                               FORMATETC *pFormatetc,
                               STGMEDIUM *pStgmed);

                      void ( __export __stdcall *OnViewChange )(
            IAdviseSink * This,
                       DWORD dwAspect,
                       LONG lindex);

                      void ( __export __stdcall *OnRename )(
            IAdviseSink * This,
                       IMoniker *pmk);

                      void ( __export __stdcall *OnSave )(
            IAdviseSink * This);

                      void ( __export __stdcall *OnClose )(
            IAdviseSink * This);

       
    } IAdviseSinkVtbl;

    struct IAdviseSink
    {
        struct IAdviseSinkVtbl *lpVtbl;
    };
# 6255 "/usr/local/arm-wince-pe/include/objidl.h" 3
                       void __export __stdcall IAdviseSink_RemoteOnDataChange_Proxy(
    IAdviseSink * This,
                       FORMATETC *pFormatetc,
                       ASYNC_STGMEDIUM *pStgmed);


void IAdviseSink_RemoteOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                       void __export __stdcall IAdviseSink_RemoteOnViewChange_Proxy(
    IAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);


void IAdviseSink_RemoteOnViewChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                       void __export __stdcall IAdviseSink_RemoteOnRename_Proxy(
    IAdviseSink * This,
               IMoniker *pmk);


void IAdviseSink_RemoteOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                       void __export __stdcall IAdviseSink_RemoteOnSave_Proxy(
    IAdviseSink * This);


void IAdviseSink_RemoteOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall IAdviseSink_RemoteOnClose_Proxy(
    IAdviseSink * This);


void IAdviseSink_RemoteOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 6330 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IAdviseSink2 *LPADVISESINK2;


extern const IID IID_IAdviseSink2;
# 6348 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IAdviseSink2Vtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IAdviseSink2 * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IAdviseSink2 * This);

        ULONG ( __export __stdcall *Release )(
            IAdviseSink2 * This);

                      void ( __export __stdcall *OnDataChange )(
            IAdviseSink2 * This,
                               FORMATETC *pFormatetc,
                               STGMEDIUM *pStgmed);

                      void ( __export __stdcall *OnViewChange )(
            IAdviseSink2 * This,
                       DWORD dwAspect,
                       LONG lindex);

                      void ( __export __stdcall *OnRename )(
            IAdviseSink2 * This,
                       IMoniker *pmk);

                      void ( __export __stdcall *OnSave )(
            IAdviseSink2 * This);

                      void ( __export __stdcall *OnClose )(
            IAdviseSink2 * This);

                      void ( __export __stdcall *OnLinkSrcChange )(
            IAdviseSink2 * This,
                               IMoniker *pmk);

       
    } IAdviseSink2Vtbl;

    struct IAdviseSink2
    {
        struct IAdviseSink2Vtbl *lpVtbl;
    };
# 6436 "/usr/local/arm-wince-pe/include/objidl.h" 3
                       void __export __stdcall IAdviseSink2_RemoteOnLinkSrcChange_Proxy(
    IAdviseSink2 * This,
                       IMoniker *pmk);


void IAdviseSink2_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 6463 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IDataObject *LPDATAOBJECT;

typedef
enum tagDATADIR
    { DATADIR_GET = 1,
        DATADIR_SET = 2
    } DATADIR;


extern const IID IID_IDataObject;
# 6520 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IDataObjectVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IDataObject * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IDataObject * This);

        ULONG ( __export __stdcall *Release )(
            IDataObject * This);

                      HRESULT ( __export __stdcall *GetData )(
            IDataObject * This,
                               FORMATETC *pformatetcIn,
                        STGMEDIUM *pmedium);

                      HRESULT ( __export __stdcall *GetDataHere )(
            IDataObject * This,
                               FORMATETC *pformatetc,
                            STGMEDIUM *pmedium);

        HRESULT ( __export __stdcall *QueryGetData )(
            IDataObject * This,
                               FORMATETC *pformatetc);

        HRESULT ( __export __stdcall *GetCanonicalFormatEtc )(
            IDataObject * This,
                               FORMATETC *pformatectIn,
                        FORMATETC *pformatetcOut);

                      HRESULT ( __export __stdcall *SetData )(
            IDataObject * This,
                               FORMATETC *pformatetc,
                               STGMEDIUM *pmedium,
                       BOOL fRelease);

        HRESULT ( __export __stdcall *EnumFormatEtc )(
            IDataObject * This,
                       DWORD dwDirection,
                        IEnumFORMATETC * *ppenumFormatEtc);

        HRESULT ( __export __stdcall *DAdvise )(
            IDataObject * This,
                       FORMATETC *pformatetc,
                       DWORD advf,
                               IAdviseSink *pAdvSink,
                        DWORD *pdwConnection);

        HRESULT ( __export __stdcall *DUnadvise )(
            IDataObject * This,
                       DWORD dwConnection);

        HRESULT ( __export __stdcall *EnumDAdvise )(
            IDataObject * This,
                        IEnumSTATDATA * *ppenumAdvise);

       
    } IDataObjectVtbl;

    struct IDataObject
    {
        struct IDataObjectVtbl *lpVtbl;
    };
# 6637 "/usr/local/arm-wince-pe/include/objidl.h" 3
                HRESULT __export __stdcall IDataObject_RemoteGetData_Proxy(
    IDataObject * This,
                       FORMATETC *pformatetcIn,
                STGMEDIUM *pRemoteMedium);


void IDataObject_RemoteGetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall IDataObject_RemoteGetDataHere_Proxy(
    IDataObject * This,
                       FORMATETC *pformatetc,
                    STGMEDIUM *pRemoteMedium);


void IDataObject_RemoteGetDataHere_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IDataObject_QueryGetData_Proxy(
    IDataObject * This,
                       FORMATETC *pformatetc);


void IDataObject_QueryGetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IDataObject_GetCanonicalFormatEtc_Proxy(
    IDataObject * This,
                       FORMATETC *pformatectIn,
                FORMATETC *pformatetcOut);


void IDataObject_GetCanonicalFormatEtc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall IDataObject_RemoteSetData_Proxy(
    IDataObject * This,
                       FORMATETC *pformatetc,
                       FLAG_STGMEDIUM *pmedium,
               BOOL fRelease);


void IDataObject_RemoteSetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IDataObject_EnumFormatEtc_Proxy(
    IDataObject * This,
               DWORD dwDirection,
                IEnumFORMATETC * *ppenumFormatEtc);


void IDataObject_EnumFormatEtc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IDataObject_DAdvise_Proxy(
    IDataObject * This,
               FORMATETC *pformatetc,
               DWORD advf,
                       IAdviseSink *pAdvSink,
                DWORD *pdwConnection);


void IDataObject_DAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IDataObject_DUnadvise_Proxy(
    IDataObject * This,
               DWORD dwConnection);


void IDataObject_DUnadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IDataObject_EnumDAdvise_Proxy(
    IDataObject * This,
                IEnumSTATDATA * *ppenumAdvise);


void IDataObject_EnumDAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 6769 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IDataAdviseHolder *LPDATAADVISEHOLDER;


extern const IID IID_IDataAdviseHolder;
# 6802 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IDataAdviseHolderVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IDataAdviseHolder * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IDataAdviseHolder * This);

        ULONG ( __export __stdcall *Release )(
            IDataAdviseHolder * This);

        HRESULT ( __export __stdcall *Advise )(
            IDataAdviseHolder * This,
                               IDataObject *pDataObject,
                               FORMATETC *pFetc,
                       DWORD advf,
                               IAdviseSink *pAdvise,
                        DWORD *pdwConnection);

        HRESULT ( __export __stdcall *Unadvise )(
            IDataAdviseHolder * This,
                       DWORD dwConnection);

        HRESULT ( __export __stdcall *EnumAdvise )(
            IDataAdviseHolder * This,
                        IEnumSTATDATA * *ppenumAdvise);

        HRESULT ( __export __stdcall *SendOnDataChange )(
            IDataAdviseHolder * This,
                               IDataObject *pDataObject,
                       DWORD dwReserved,
                       DWORD advf);

       
    } IDataAdviseHolderVtbl;

    struct IDataAdviseHolder
    {
        struct IDataAdviseHolderVtbl *lpVtbl;
    };
# 6881 "/usr/local/arm-wince-pe/include/objidl.h" 3
HRESULT __export __stdcall IDataAdviseHolder_Advise_Proxy(
    IDataAdviseHolder * This,
                       IDataObject *pDataObject,
                       FORMATETC *pFetc,
               DWORD advf,
                       IAdviseSink *pAdvise,
                DWORD *pdwConnection);


void IDataAdviseHolder_Advise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IDataAdviseHolder_Unadvise_Proxy(
    IDataAdviseHolder * This,
               DWORD dwConnection);


void IDataAdviseHolder_Unadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IDataAdviseHolder_EnumAdvise_Proxy(
    IDataAdviseHolder * This,
                IEnumSTATDATA * *ppenumAdvise);


void IDataAdviseHolder_EnumAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IDataAdviseHolder_SendOnDataChange_Proxy(
    IDataAdviseHolder * This,
                       IDataObject *pDataObject,
               DWORD dwReserved,
               DWORD advf);


void IDataAdviseHolder_SendOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 6950 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IMessageFilter *LPMESSAGEFILTER;

typedef
enum tagCALLTYPE
    { CALLTYPE_TOPLEVEL = 1,
        CALLTYPE_NESTED = 2,
        CALLTYPE_ASYNC = 3,
        CALLTYPE_TOPLEVEL_CALLPENDING = 4,
        CALLTYPE_ASYNC_CALLPENDING = 5
    } CALLTYPE;

typedef
enum tagSERVERCALL
    { SERVERCALL_ISHANDLED = 0,
        SERVERCALL_REJECTED = 1,
        SERVERCALL_RETRYLATER = 2
    } SERVERCALL;

typedef
enum tagPENDINGTYPE
    { PENDINGTYPE_TOPLEVEL = 1,
        PENDINGTYPE_NESTED = 2
    } PENDINGTYPE;

typedef
enum tagPENDINGMSG
    { PENDINGMSG_CANCELCALL = 0,
        PENDINGMSG_WAITNOPROCESS = 1,
        PENDINGMSG_WAITDEFPROCESS = 2
    } PENDINGMSG;

typedef struct tagINTERFACEINFO
    {
    IUnknown *pUnk;
    IID iid;
    WORD wMethod;
    } INTERFACEINFO;

typedef struct tagINTERFACEINFO *LPINTERFACEINFO;


extern const IID IID_IMessageFilter;
# 7019 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IMessageFilterVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IMessageFilter * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IMessageFilter * This);

        ULONG ( __export __stdcall *Release )(
            IMessageFilter * This);

        DWORD ( __export __stdcall *HandleInComingCall )(
            IMessageFilter * This,
                       DWORD dwCallType,
                       HTASK htaskCaller,
                       DWORD dwTickCount,
                       LPINTERFACEINFO lpInterfaceInfo);

        DWORD ( __export __stdcall *RetryRejectedCall )(
            IMessageFilter * This,
                       HTASK htaskCallee,
                       DWORD dwTickCount,
                       DWORD dwRejectType);

        DWORD ( __export __stdcall *MessagePending )(
            IMessageFilter * This,
                       HTASK htaskCallee,
                       DWORD dwTickCount,
                       DWORD dwPendingType);

       
    } IMessageFilterVtbl;

    struct IMessageFilter
    {
        struct IMessageFilterVtbl *lpVtbl;
    };
# 7092 "/usr/local/arm-wince-pe/include/objidl.h" 3
DWORD __export __stdcall IMessageFilter_HandleInComingCall_Proxy(
    IMessageFilter * This,
               DWORD dwCallType,
               HTASK htaskCaller,
               DWORD dwTickCount,
               LPINTERFACEINFO lpInterfaceInfo);


void IMessageFilter_HandleInComingCall_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


DWORD __export __stdcall IMessageFilter_RetryRejectedCall_Proxy(
    IMessageFilter * This,
               HTASK htaskCallee,
               DWORD dwTickCount,
               DWORD dwRejectType);


void IMessageFilter_RetryRejectedCall_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


DWORD __export __stdcall IMessageFilter_MessagePending_Proxy(
    IMessageFilter * This,
               HTASK htaskCallee,
               DWORD dwTickCount,
               DWORD dwPendingType);


void IMessageFilter_MessagePending_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 7150 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef unsigned long RPCOLEDATAREP;

typedef struct tagRPCOLEMESSAGE
    {
    void *reserved1;
    RPCOLEDATAREP dataRepresentation;
    void *Buffer;
    ULONG cbBuffer;
    ULONG iMethod;
    void *reserved2[ 5 ];
    ULONG rpcFlags;
    } RPCOLEMESSAGE;

typedef RPCOLEMESSAGE *PRPCOLEMESSAGE;


extern const IID IID_IRpcChannelBuffer;
# 7195 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IRpcChannelBufferVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IRpcChannelBuffer * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IRpcChannelBuffer * This);

        ULONG ( __export __stdcall *Release )(
            IRpcChannelBuffer * This);

        HRESULT ( __export __stdcall *GetBuffer )(
            IRpcChannelBuffer * This,
                       RPCOLEMESSAGE *pMessage,
                       const IID * const riid);

        HRESULT ( __export __stdcall *SendReceive )(
            IRpcChannelBuffer * This,
                            RPCOLEMESSAGE *pMessage,
                        ULONG *pStatus);

        HRESULT ( __export __stdcall *FreeBuffer )(
            IRpcChannelBuffer * This,
                       RPCOLEMESSAGE *pMessage);

        HRESULT ( __export __stdcall *GetDestCtx )(
            IRpcChannelBuffer * This,
                        DWORD *pdwDestContext,
                        void * *ppvDestContext);

        HRESULT ( __export __stdcall *IsConnected )(
            IRpcChannelBuffer * This);

       
    } IRpcChannelBufferVtbl;

    struct IRpcChannelBuffer
    {
        struct IRpcChannelBufferVtbl *lpVtbl;
    };
# 7277 "/usr/local/arm-wince-pe/include/objidl.h" 3
HRESULT __export __stdcall IRpcChannelBuffer_GetBuffer_Proxy(
    IRpcChannelBuffer * This,
               RPCOLEMESSAGE *pMessage,
               const IID * const riid);


void IRpcChannelBuffer_GetBuffer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRpcChannelBuffer_SendReceive_Proxy(
    IRpcChannelBuffer * This,
                    RPCOLEMESSAGE *pMessage,
                ULONG *pStatus);


void IRpcChannelBuffer_SendReceive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRpcChannelBuffer_FreeBuffer_Proxy(
    IRpcChannelBuffer * This,
               RPCOLEMESSAGE *pMessage);


void IRpcChannelBuffer_FreeBuffer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRpcChannelBuffer_GetDestCtx_Proxy(
    IRpcChannelBuffer * This,
                DWORD *pdwDestContext,
                void * *ppvDestContext);


void IRpcChannelBuffer_GetDestCtx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRpcChannelBuffer_IsConnected_Proxy(
    IRpcChannelBuffer * This);


void IRpcChannelBuffer_IsConnected_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 7355 "/usr/local/arm-wince-pe/include/objidl.h" 3
extern const IID IID_IRpcChannelBuffer2;
# 7370 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IRpcChannelBuffer2Vtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IRpcChannelBuffer2 * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IRpcChannelBuffer2 * This);

        ULONG ( __export __stdcall *Release )(
            IRpcChannelBuffer2 * This);

        HRESULT ( __export __stdcall *GetBuffer )(
            IRpcChannelBuffer2 * This,
                       RPCOLEMESSAGE *pMessage,
                       const IID * const riid);

        HRESULT ( __export __stdcall *SendReceive )(
            IRpcChannelBuffer2 * This,
                            RPCOLEMESSAGE *pMessage,
                        ULONG *pStatus);

        HRESULT ( __export __stdcall *FreeBuffer )(
            IRpcChannelBuffer2 * This,
                       RPCOLEMESSAGE *pMessage);

        HRESULT ( __export __stdcall *GetDestCtx )(
            IRpcChannelBuffer2 * This,
                        DWORD *pdwDestContext,
                        void * *ppvDestContext);

        HRESULT ( __export __stdcall *IsConnected )(
            IRpcChannelBuffer2 * This);

        HRESULT ( __export __stdcall *GetProtocolVersion )(
            IRpcChannelBuffer2 * This,
                            DWORD *pdwVersion);

       
    } IRpcChannelBuffer2Vtbl;

    struct IRpcChannelBuffer2
    {
        struct IRpcChannelBuffer2Vtbl *lpVtbl;
    };
# 7460 "/usr/local/arm-wince-pe/include/objidl.h" 3
HRESULT __export __stdcall IRpcChannelBuffer2_GetProtocolVersion_Proxy(
    IRpcChannelBuffer2 * This,
                    DWORD *pdwVersion);


void IRpcChannelBuffer2_GetProtocolVersion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 7488 "/usr/local/arm-wince-pe/include/objidl.h" 3
extern const IID IID_IRpcProxyBuffer;
# 7505 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IRpcProxyBufferVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IRpcProxyBuffer * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IRpcProxyBuffer * This);

        ULONG ( __export __stdcall *Release )(
            IRpcProxyBuffer * This);

        HRESULT ( __export __stdcall *Connect )(
            IRpcProxyBuffer * This,
                               IRpcChannelBuffer *pRpcChannelBuffer);

        void ( __export __stdcall *Disconnect )(
            IRpcProxyBuffer * This);

       
    } IRpcProxyBufferVtbl;

    struct IRpcProxyBuffer
    {
        struct IRpcProxyBufferVtbl *lpVtbl;
    };
# 7563 "/usr/local/arm-wince-pe/include/objidl.h" 3
HRESULT __export __stdcall IRpcProxyBuffer_Connect_Proxy(
    IRpcProxyBuffer * This,
                       IRpcChannelBuffer *pRpcChannelBuffer);


void IRpcProxyBuffer_Connect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __export __stdcall IRpcProxyBuffer_Disconnect_Proxy(
    IRpcProxyBuffer * This);


void IRpcProxyBuffer_Disconnect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 7602 "/usr/local/arm-wince-pe/include/objidl.h" 3
extern const IID IID_IRpcStubBuffer;
# 7634 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IRpcStubBufferVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IRpcStubBuffer * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IRpcStubBuffer * This);

        ULONG ( __export __stdcall *Release )(
            IRpcStubBuffer * This);

        HRESULT ( __export __stdcall *Connect )(
            IRpcStubBuffer * This,
                       IUnknown *pUnkServer);

        void ( __export __stdcall *Disconnect )(
            IRpcStubBuffer * This);

        HRESULT ( __export __stdcall *Invoke )(
            IRpcStubBuffer * This,
                       RPCOLEMESSAGE *_prpcmsg,
                       IRpcChannelBuffer *_pRpcChannelBuffer);

        IRpcStubBuffer *( __export __stdcall *IsIIDSupported )(
            IRpcStubBuffer * This,
                       const IID * const riid);

        ULONG ( __export __stdcall *CountRefs )(
            IRpcStubBuffer * This);

        HRESULT ( __export __stdcall *DebugServerQueryInterface )(
            IRpcStubBuffer * This,
            void * *ppv);

        void ( __export __stdcall *DebugServerRelease )(
            IRpcStubBuffer * This,
            void *pv);

       
    } IRpcStubBufferVtbl;

    struct IRpcStubBuffer
    {
        struct IRpcStubBufferVtbl *lpVtbl;
    };
# 7727 "/usr/local/arm-wince-pe/include/objidl.h" 3
HRESULT __export __stdcall IRpcStubBuffer_Connect_Proxy(
    IRpcStubBuffer * This,
               IUnknown *pUnkServer);


void IRpcStubBuffer_Connect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __export __stdcall IRpcStubBuffer_Disconnect_Proxy(
    IRpcStubBuffer * This);


void IRpcStubBuffer_Disconnect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRpcStubBuffer_Invoke_Proxy(
    IRpcStubBuffer * This,
               RPCOLEMESSAGE *_prpcmsg,
               IRpcChannelBuffer *_pRpcChannelBuffer);


void IRpcStubBuffer_Invoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


IRpcStubBuffer *__export __stdcall IRpcStubBuffer_IsIIDSupported_Proxy(
    IRpcStubBuffer * This,
               const IID * const riid);


void IRpcStubBuffer_IsIIDSupported_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __export __stdcall IRpcStubBuffer_CountRefs_Proxy(
    IRpcStubBuffer * This);


void IRpcStubBuffer_CountRefs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRpcStubBuffer_DebugServerQueryInterface_Proxy(
    IRpcStubBuffer * This,
    void * *ppv);


void IRpcStubBuffer_DebugServerQueryInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __export __stdcall IRpcStubBuffer_DebugServerRelease_Proxy(
    IRpcStubBuffer * This,
    void *pv);


void IRpcStubBuffer_DebugServerRelease_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 7826 "/usr/local/arm-wince-pe/include/objidl.h" 3
extern const IID IID_IPSFactoryBuffer;
# 7849 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IPSFactoryBufferVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IPSFactoryBuffer * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IPSFactoryBuffer * This);

        ULONG ( __export __stdcall *Release )(
            IPSFactoryBuffer * This);

        HRESULT ( __export __stdcall *CreateProxy )(
            IPSFactoryBuffer * This,
                       IUnknown *pUnkOuter,
                       const IID * const riid,
                        IRpcProxyBuffer * *ppProxy,
                        void * *ppv);

        HRESULT ( __export __stdcall *CreateStub )(
            IPSFactoryBuffer * This,
                       const IID * const riid,
                               IUnknown *pUnkServer,
                        IRpcStubBuffer * *ppStub);

       
    } IPSFactoryBufferVtbl;

    struct IPSFactoryBuffer
    {
        struct IPSFactoryBufferVtbl *lpVtbl;
    };
# 7913 "/usr/local/arm-wince-pe/include/objidl.h" 3
HRESULT __export __stdcall IPSFactoryBuffer_CreateProxy_Proxy(
    IPSFactoryBuffer * This,
               IUnknown *pUnkOuter,
               const IID * const riid,
                IRpcProxyBuffer * *ppProxy,
                void * *ppv);


void IPSFactoryBuffer_CreateProxy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPSFactoryBuffer_CreateStub_Proxy(
    IPSFactoryBuffer * This,
               const IID * const riid,
                       IUnknown *pUnkServer,
                IRpcStubBuffer * *ppStub);


void IPSFactoryBuffer_CreateStub_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 8253 "/usr/local/arm-wince-pe/include/objidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidl_0043_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0043_v0_0_s_ifspec;
# 8269 "/usr/local/arm-wince-pe/include/objidl.h" 3
extern const FMTID FMTID_SummaryInformation;

extern const FMTID FMTID_DocSummaryInformation;

extern const FMTID FMTID_UserDefinedProperties;
# 8286 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IPropertyStorage *LPPROPERTYSTORAGE;

typedef struct tagPROPVARIANT PROPVARIANT;

typedef struct tagCAUB
    {
    ULONG cElems;
                    unsigned char *pElems;
    } CAUB;

typedef struct tagCAI
    {
    ULONG cElems;
                    short *pElems;
    } CAI;

typedef struct tagCAUI
    {
    ULONG cElems;
                    USHORT *pElems;
    } CAUI;

typedef struct tagCAL
    {
    ULONG cElems;
                    long *pElems;
    } CAL;

typedef struct tagCAUL
    {
    ULONG cElems;
                    ULONG *pElems;
    } CAUL;

typedef struct tagCAFLT
    {
    ULONG cElems;
                    float *pElems;
    } CAFLT;

typedef struct tagCADBL
    {
    ULONG cElems;
                    double *pElems;
    } CADBL;

typedef struct tagCACY
    {
    ULONG cElems;
                    CY *pElems;
    } CACY;

typedef struct tagCADATE
    {
    ULONG cElems;
                    DATE *pElems;
    } CADATE;

typedef struct tagCABSTR
    {
    ULONG cElems;
                    BSTR *pElems;
    } CABSTR;

typedef struct tagCABSTRBLOB
    {
    ULONG cElems;
                    BSTRBLOB *pElems;
    } CABSTRBLOB;

typedef struct tagCABOOL
    {
    ULONG cElems;
                    VARIANT_BOOL *pElems;
    } CABOOL;

typedef struct tagCASCODE
    {
    ULONG cElems;
                    SCODE *pElems;
    } CASCODE;

typedef struct tagCAPROPVARIANT
    {
    ULONG cElems;
                    PROPVARIANT *pElems;
    } CAPROPVARIANT;

typedef struct tagCAH
    {
    ULONG cElems;
                    LARGE_INTEGER *pElems;
    } CAH;

typedef struct tagCAUH
    {
    ULONG cElems;
                    ULARGE_INTEGER *pElems;
    } CAUH;

typedef struct tagCALPSTR
    {
    ULONG cElems;
                    LPSTR *pElems;
    } CALPSTR;

typedef struct tagCALPWSTR
    {
    ULONG cElems;
                    LPWSTR *pElems;
    } CALPWSTR;

typedef struct tagCAFILETIME
    {
    ULONG cElems;
                    FILETIME *pElems;
    } CAFILETIME;

typedef struct tagCACLIPDATA
    {
    ULONG cElems;
                    CLIPDATA *pElems;
    } CACLIPDATA;

typedef struct tagCACLSID
    {
    ULONG cElems;
                    CLSID *pElems;
    } CACLSID;




#pragma warning(disable:4237)
struct tagPROPVARIANT
    {
    VARTYPE vt;
    WORD wReserved1;
    WORD wReserved2;
    WORD wReserved3;
                                          union
        {

                       UCHAR bVal;
                       short iVal;
                       USHORT uiVal;
                       VARIANT_BOOL boolVal;

                       long lVal;
                       ULONG ulVal;
                       float fltVal;
                       SCODE scode;
                       LARGE_INTEGER hVal;
                       ULARGE_INTEGER uhVal;
                       double dblVal;
                       CY cyVal;
                       DATE date;
                       FILETIME filetime;
                       CLSID *puuid;
                       BLOB blob;
                       CLIPDATA *pclipdata;
                       IStream *pStream;
                       IStorage *pStorage;
                       BSTR bstrVal;
                       BSTRBLOB bstrblobVal;
                       LPSTR pszVal;
                       LPWSTR pwszVal;
                       CAUB caub;
                       CAI cai;
                       CAUI caui;
                       CABOOL cabool;
                       CAL cal;
                       CAUL caul;
                       CAFLT caflt;
                       CASCODE cascode;
                       CAH cah;
                       CAUH cauh;
                       CADBL cadbl;
                       CACY cacy;
                       CADATE cadate;
                       CAFILETIME cafiletime;
                       CACLSID cauuid;
                       CACLIPDATA caclipdata;
                       CABSTR cabstr;
                       CABSTRBLOB cabstrblob;
                       CALPSTR calpstr;
                       CALPWSTR calpwstr;
                       CAPROPVARIANT capropvar;
        } ;
    };
typedef struct tagPROPVARIANT *LPPROPVARIANT;
# 8521 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef struct tagPROPSPEC
    {
    ULONG ulKind;
                                          union
        {
                       PROPID propid;
                       LPOLESTR lpwstr;

        } ;
    } PROPSPEC;

typedef struct tagSTATPROPSTG
    {
    LPOLESTR lpwstrName;
    PROPID propid;
    VARTYPE vt;
    } STATPROPSTG;






typedef struct tagSTATPROPSETSTG
    {
    FMTID fmtid;
    CLSID clsid;
    DWORD grfFlags;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD dwOSVersion;
    } STATPROPSETSTG;


extern const IID IID_IPropertyStorage;
# 8616 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IPropertyStorageVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IPropertyStorage * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IPropertyStorage * This);

        ULONG ( __export __stdcall *Release )(
            IPropertyStorage * This);

        HRESULT ( __export __stdcall *ReadMultiple )(
            IPropertyStorage * This,
                       ULONG cpspec,
                                const PROPSPEC rgpspec[ ],
                                 PROPVARIANT rgpropvar[ ]);

        HRESULT ( __export __stdcall *WriteMultiple )(
            IPropertyStorage * This,
                       ULONG cpspec,
                                const PROPSPEC rgpspec[ ],
                                const PROPVARIANT rgpropvar[ ],
                       PROPID propidNameFirst);

        HRESULT ( __export __stdcall *DeleteMultiple )(
            IPropertyStorage * This,
                       ULONG cpspec,
                                const PROPSPEC rgpspec[ ]);

        HRESULT ( __export __stdcall *ReadPropertyNames )(
            IPropertyStorage * This,
                       ULONG cpropid,
                                const PROPID rgpropid[ ],
                                 LPOLESTR rglpwstrName[ ]);

        HRESULT ( __export __stdcall *WritePropertyNames )(
            IPropertyStorage * This,
                       ULONG cpropid,
                                const PROPID rgpropid[ ],
                                const LPOLESTR rglpwstrName[ ]);

        HRESULT ( __export __stdcall *DeletePropertyNames )(
            IPropertyStorage * This,
                       ULONG cpropid,
                                const PROPID rgpropid[ ]);

        HRESULT ( __export __stdcall *Commit )(
            IPropertyStorage * This,
                       DWORD grfCommitFlags);

        HRESULT ( __export __stdcall *Revert )(
            IPropertyStorage * This);

        HRESULT ( __export __stdcall *Enum )(
            IPropertyStorage * This,
                        IEnumSTATPROPSTG * *ppenum);

        HRESULT ( __export __stdcall *SetTimes )(
            IPropertyStorage * This,
                       const FILETIME *pctime,
                       const FILETIME *patime,
                       const FILETIME *pmtime);

        HRESULT ( __export __stdcall *SetClass )(
            IPropertyStorage * This,
                       const CLSID * const clsid);

        HRESULT ( __export __stdcall *Stat )(
            IPropertyStorage * This,
                        STATPROPSETSTG *pstatpsstg);

       
    } IPropertyStorageVtbl;

    struct IPropertyStorage
    {
        struct IPropertyStorageVtbl *lpVtbl;
    };
# 8757 "/usr/local/arm-wince-pe/include/objidl.h" 3
HRESULT __export __stdcall IPropertyStorage_ReadMultiple_Proxy(
    IPropertyStorage * This,
               ULONG cpspec,
                        const PROPSPEC rgpspec[ ],
                         PROPVARIANT rgpropvar[ ]);


void IPropertyStorage_ReadMultiple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPropertyStorage_WriteMultiple_Proxy(
    IPropertyStorage * This,
               ULONG cpspec,
                        const PROPSPEC rgpspec[ ],
                        const PROPVARIANT rgpropvar[ ],
               PROPID propidNameFirst);


void IPropertyStorage_WriteMultiple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPropertyStorage_DeleteMultiple_Proxy(
    IPropertyStorage * This,
               ULONG cpspec,
                        const PROPSPEC rgpspec[ ]);


void IPropertyStorage_DeleteMultiple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPropertyStorage_ReadPropertyNames_Proxy(
    IPropertyStorage * This,
               ULONG cpropid,
                        const PROPID rgpropid[ ],
                         LPOLESTR rglpwstrName[ ]);


void IPropertyStorage_ReadPropertyNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPropertyStorage_WritePropertyNames_Proxy(
    IPropertyStorage * This,
               ULONG cpropid,
                        const PROPID rgpropid[ ],
                        const LPOLESTR rglpwstrName[ ]);


void IPropertyStorage_WritePropertyNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPropertyStorage_DeletePropertyNames_Proxy(
    IPropertyStorage * This,
               ULONG cpropid,
                        const PROPID rgpropid[ ]);


void IPropertyStorage_DeletePropertyNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPropertyStorage_Commit_Proxy(
    IPropertyStorage * This,
               DWORD grfCommitFlags);


void IPropertyStorage_Commit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPropertyStorage_Revert_Proxy(
    IPropertyStorage * This);


void IPropertyStorage_Revert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPropertyStorage_Enum_Proxy(
    IPropertyStorage * This,
                IEnumSTATPROPSTG * *ppenum);


void IPropertyStorage_Enum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPropertyStorage_SetTimes_Proxy(
    IPropertyStorage * This,
               const FILETIME *pctime,
               const FILETIME *patime,
               const FILETIME *pmtime);


void IPropertyStorage_SetTimes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPropertyStorage_SetClass_Proxy(
    IPropertyStorage * This,
               const CLSID * const clsid);


void IPropertyStorage_SetClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPropertyStorage_Stat_Proxy(
    IPropertyStorage * This,
                STATPROPSETSTG *pstatpsstg);


void IPropertyStorage_Stat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 8928 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IPropertySetStorage *LPPROPERTYSETSTORAGE;


extern const IID IID_IPropertySetStorage;
# 8961 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IPropertySetStorageVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IPropertySetStorage * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IPropertySetStorage * This);

        ULONG ( __export __stdcall *Release )(
            IPropertySetStorage * This);

        HRESULT ( __export __stdcall *Create )(
            IPropertySetStorage * This,
                       const FMTID * const rfmtid,
                               const CLSID *pclsid,
                       DWORD grfFlags,
                       DWORD grfMode,
                        IPropertyStorage * *ppprstg);

        HRESULT ( __export __stdcall *Open )(
            IPropertySetStorage * This,
                       const FMTID * const rfmtid,
                       DWORD grfMode,
                        IPropertyStorage * *ppprstg);

        HRESULT ( __export __stdcall *Delete )(
            IPropertySetStorage * This,
                       const FMTID * const rfmtid);

        HRESULT ( __export __stdcall *Enum )(
            IPropertySetStorage * This,
                        IEnumSTATPROPSETSTG * *ppenum);

       
    } IPropertySetStorageVtbl;

    struct IPropertySetStorage
    {
        struct IPropertySetStorageVtbl *lpVtbl;
    };
# 9040 "/usr/local/arm-wince-pe/include/objidl.h" 3
HRESULT __export __stdcall IPropertySetStorage_Create_Proxy(
    IPropertySetStorage * This,
               const FMTID * const rfmtid,
                       const CLSID *pclsid,
               DWORD grfFlags,
               DWORD grfMode,
                IPropertyStorage * *ppprstg);


void IPropertySetStorage_Create_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPropertySetStorage_Open_Proxy(
    IPropertySetStorage * This,
               const FMTID * const rfmtid,
               DWORD grfMode,
                IPropertyStorage * *ppprstg);


void IPropertySetStorage_Open_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPropertySetStorage_Delete_Proxy(
    IPropertySetStorage * This,
               const FMTID * const rfmtid);


void IPropertySetStorage_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IPropertySetStorage_Enum_Proxy(
    IPropertySetStorage * This,
                IEnumSTATPROPSETSTG * *ppenum);


void IPropertySetStorage_Enum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 9109 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IEnumSTATPROPSTG *LPENUMSTATPROPSTG;


extern const IID IID_IEnumSTATPROPSTG;
# 9137 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IEnumSTATPROPSTGVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IEnumSTATPROPSTG * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IEnumSTATPROPSTG * This);

        ULONG ( __export __stdcall *Release )(
            IEnumSTATPROPSTG * This);

                      HRESULT ( __export __stdcall *Next )(
            IEnumSTATPROPSTG * This,
                       ULONG celt,
                                            STATPROPSTG *rgelt,
                        ULONG *pceltFetched);

        HRESULT ( __export __stdcall *Skip )(
            IEnumSTATPROPSTG * This,
                       ULONG celt);

        HRESULT ( __export __stdcall *Reset )(
            IEnumSTATPROPSTG * This);

        HRESULT ( __export __stdcall *Clone )(
            IEnumSTATPROPSTG * This,
                        IEnumSTATPROPSTG * *ppenum);

       
    } IEnumSTATPROPSTGVtbl;

    struct IEnumSTATPROPSTG
    {
        struct IEnumSTATPROPSTGVtbl *lpVtbl;
    };
# 9211 "/usr/local/arm-wince-pe/include/objidl.h" 3
                HRESULT __export __stdcall IEnumSTATPROPSTG_RemoteNext_Proxy(
    IEnumSTATPROPSTG * This,
               ULONG celt,
                                    STATPROPSTG *rgelt,
                ULONG *pceltFetched);


void IEnumSTATPROPSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumSTATPROPSTG_Skip_Proxy(
    IEnumSTATPROPSTG * This,
               ULONG celt);


void IEnumSTATPROPSTG_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumSTATPROPSTG_Reset_Proxy(
    IEnumSTATPROPSTG * This);


void IEnumSTATPROPSTG_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumSTATPROPSTG_Clone_Proxy(
    IEnumSTATPROPSTG * This,
                IEnumSTATPROPSTG * *ppenum);


void IEnumSTATPROPSTG_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 9275 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef IEnumSTATPROPSETSTG *LPENUMSTATPROPSETSTG;


extern const IID IID_IEnumSTATPROPSETSTG;
# 9303 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IEnumSTATPROPSETSTGVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IEnumSTATPROPSETSTG * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IEnumSTATPROPSETSTG * This);

        ULONG ( __export __stdcall *Release )(
            IEnumSTATPROPSETSTG * This);

                      HRESULT ( __export __stdcall *Next )(
            IEnumSTATPROPSETSTG * This,
                       ULONG celt,
                                            STATPROPSETSTG *rgelt,
                        ULONG *pceltFetched);

        HRESULT ( __export __stdcall *Skip )(
            IEnumSTATPROPSETSTG * This,
                       ULONG celt);

        HRESULT ( __export __stdcall *Reset )(
            IEnumSTATPROPSETSTG * This);

        HRESULT ( __export __stdcall *Clone )(
            IEnumSTATPROPSETSTG * This,
                        IEnumSTATPROPSETSTG * *ppenum);

       
    } IEnumSTATPROPSETSTGVtbl;

    struct IEnumSTATPROPSETSTG
    {
        struct IEnumSTATPROPSETSTGVtbl *lpVtbl;
    };
# 9377 "/usr/local/arm-wince-pe/include/objidl.h" 3
                HRESULT __export __stdcall IEnumSTATPROPSETSTG_RemoteNext_Proxy(
    IEnumSTATPROPSETSTG * This,
               ULONG celt,
                                    STATPROPSETSTG *rgelt,
                ULONG *pceltFetched);


void IEnumSTATPROPSETSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumSTATPROPSETSTG_Skip_Proxy(
    IEnumSTATPROPSETSTG * This,
               ULONG celt);


void IEnumSTATPROPSETSTG_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumSTATPROPSETSTG_Reset_Proxy(
    IEnumSTATPROPSETSTG * This);


void IEnumSTATPROPSETSTG_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumSTATPROPSETSTG_Clone_Proxy(
    IEnumSTATPROPSETSTG * This,
                IEnumSTATPROPSETSTG * *ppenum);


void IEnumSTATPROPSETSTG_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 9438 "/usr/local/arm-wince-pe/include/objidl.h" 3
extern HRESULT __export __stdcall PropVariantCopy ( PROPVARIANT * pvarDest, const PROPVARIANT * pvarSrc );
extern HRESULT __export __stdcall PropVariantClear ( PROPVARIANT * pvar );
extern HRESULT __export __stdcall FreePropVariantArray ( ULONG cVariants, PROPVARIANT * rgvars );
# 9454 "/usr/local/arm-wince-pe/include/objidl.h" 3
extern HRESULT __export __stdcall StgCreatePropStg( IUnknown* pUnk, const FMTID * const fmtid, const CLSID *pclsid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg );
extern HRESULT __export __stdcall StgOpenPropStg( IUnknown* pUnk, const FMTID * const fmtid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg );
extern HRESULT __export __stdcall StgCreatePropSetStg( IStorage *pStorage, DWORD dwReserved, IPropertySetStorage **ppPropSetStg);


extern HRESULT __export __stdcall FmtIdToPropStgName( const FMTID *pfmtid, LPOLESTR oszName );
extern HRESULT __export __stdcall PropStgNameToFmtId( const LPOLESTR oszName, FMTID *pfmtid );
# 10094 "/usr/local/arm-wince-pe/include/objidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_objidl_0051_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0051_v0_0_s_ifspec;
# 10109 "/usr/local/arm-wince-pe/include/objidl.h" 3
extern const IID IID_IFillLockBytes;
# 10138 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IFillLockBytesVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IFillLockBytes * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IFillLockBytes * This);

        ULONG ( __export __stdcall *Release )(
            IFillLockBytes * This);

                      HRESULT ( __export __stdcall *FillAppend )(
            IFillLockBytes * This,
                                const void *pv,
                       ULONG cb,
                        ULONG *pcbWritten);

                      HRESULT ( __export __stdcall *FillAt )(
            IFillLockBytes * This,
                       ULARGE_INTEGER ulOffset,
                                const void *pv,
                       ULONG cb,
                        ULONG *pcbWritten);

        HRESULT ( __export __stdcall *SetFillSize )(
            IFillLockBytes * This,
                       ULARGE_INTEGER ulSize);

        HRESULT ( __export __stdcall *Terminate )(
            IFillLockBytes * This,
                       BOOL bCanceled);

       
    } IFillLockBytesVtbl;

    struct IFillLockBytes
    {
        struct IFillLockBytesVtbl *lpVtbl;
    };
# 10216 "/usr/local/arm-wince-pe/include/objidl.h" 3
                HRESULT __export __stdcall IFillLockBytes_RemoteFillAppend_Proxy(
    IFillLockBytes * This,
                        const byte *pv,
               ULONG cb,
                ULONG *pcbWritten);


void IFillLockBytes_RemoteFillAppend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall IFillLockBytes_RemoteFillAt_Proxy(
    IFillLockBytes * This,
               ULARGE_INTEGER ulOffset,
                        const byte *pv,
               ULONG cb,
                ULONG *pcbWritten);


void IFillLockBytes_RemoteFillAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IFillLockBytes_SetFillSize_Proxy(
    IFillLockBytes * This,
               ULARGE_INTEGER ulSize);


void IFillLockBytes_SetFillSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IFillLockBytes_Terminate_Proxy(
    IFillLockBytes * This,
               BOOL bCanceled);


void IFillLockBytes_Terminate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 10285 "/usr/local/arm-wince-pe/include/objidl.h" 3
extern const IID IID_IProgressNotify;
# 10303 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IProgressNotifyVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IProgressNotify * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IProgressNotify * This);

        ULONG ( __export __stdcall *Release )(
            IProgressNotify * This);

        HRESULT ( __export __stdcall *OnProgress )(
            IProgressNotify * This,
                       DWORD dwProgressCurrent,
                       DWORD dwProgressMaximum,
                       BOOL fAccurate,
                       BOOL fOwner);

       
    } IProgressNotifyVtbl;

    struct IProgressNotify
    {
        struct IProgressNotifyVtbl *lpVtbl;
    };
# 10358 "/usr/local/arm-wince-pe/include/objidl.h" 3
HRESULT __export __stdcall IProgressNotify_OnProgress_Proxy(
    IProgressNotify * This,
               DWORD dwProgressCurrent,
               DWORD dwProgressMaximum,
               BOOL fAccurate,
               BOOL fOwner);


void IProgressNotify_OnProgress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 10388 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef struct tagStorageLayout
    {
    DWORD LayoutType;
    OLECHAR *pwcsElementName;
    LARGE_INTEGER cOffset;
    LARGE_INTEGER cBytes;
    } StorageLayout;


extern const IID IID_ILayoutStorage;
# 10424 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct ILayoutStorageVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            ILayoutStorage * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            ILayoutStorage * This);

        ULONG ( __export __stdcall *Release )(
            ILayoutStorage * This);

        HRESULT ( __export __stdcall *LayoutScript )(
            ILayoutStorage * This,
                       StorageLayout *pStorageLayout,
                       DWORD nEntries,
                       DWORD glfInterleavedFlag);

        HRESULT ( __export __stdcall *BeginMonitor )(
            ILayoutStorage * This);

        HRESULT ( __export __stdcall *EndMonitor )(
            ILayoutStorage * This);

        HRESULT ( __export __stdcall *ReLayoutDocfile )(
            ILayoutStorage * This,
                       OLECHAR *pwcsNewDfName);

        HRESULT ( __export __stdcall *ReLayoutDocfileOnILockBytes )(
            ILayoutStorage * This,
                       ILockBytes *pILockBytes);

       
    } ILayoutStorageVtbl;

    struct ILayoutStorage
    {
        struct ILayoutStorageVtbl *lpVtbl;
    };
# 10504 "/usr/local/arm-wince-pe/include/objidl.h" 3
HRESULT __export __stdcall ILayoutStorage_LayoutScript_Proxy(
    ILayoutStorage * This,
               StorageLayout *pStorageLayout,
               DWORD nEntries,
               DWORD glfInterleavedFlag);


void ILayoutStorage_LayoutScript_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ILayoutStorage_BeginMonitor_Proxy(
    ILayoutStorage * This);


void ILayoutStorage_BeginMonitor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ILayoutStorage_EndMonitor_Proxy(
    ILayoutStorage * This);


void ILayoutStorage_EndMonitor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ILayoutStorage_ReLayoutDocfile_Proxy(
    ILayoutStorage * This,
               OLECHAR *pwcsNewDfName);


void ILayoutStorage_ReLayoutDocfile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ILayoutStorage_ReLayoutDocfileOnILockBytes_Proxy(
    ILayoutStorage * This,
               ILockBytes *pILockBytes);


void ILayoutStorage_ReLayoutDocfileOnILockBytes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 10579 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef ISurrogate *LPSURROGATE;


extern const IID IID_ISurrogate;
# 10599 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct ISurrogateVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            ISurrogate * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            ISurrogate * This);

        ULONG ( __export __stdcall *Release )(
            ISurrogate * This);

        HRESULT ( __export __stdcall *LoadDllServer )(
            ISurrogate * This,
                       const CLSID * const Clsid);

        HRESULT ( __export __stdcall *FreeSurrogate )(
            ISurrogate * This);

       
    } ISurrogateVtbl;

    struct ISurrogate
    {
        struct ISurrogateVtbl *lpVtbl;
    };
# 10657 "/usr/local/arm-wince-pe/include/objidl.h" 3
HRESULT __export __stdcall ISurrogate_LoadDllServer_Proxy(
    ISurrogate * This,
               const CLSID * const Clsid);


void ISurrogate_LoadDllServer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ISurrogate_FreeSurrogate_Proxy(
    ISurrogate * This);


void ISurrogate_FreeSurrogate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 10695 "/usr/local/arm-wince-pe/include/objidl.h" 3
typedef *LPGLOBALINTERFACETABLE;


extern const IID IID_IGlobalInterfaceTable;
# 10723 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IGlobalInterfaceTableVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IGlobalInterfaceTable * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IGlobalInterfaceTable * This);

        ULONG ( __export __stdcall *Release )(
            IGlobalInterfaceTable * This);

        HRESULT ( __export __stdcall *RegisterInterfaceInGlobal )(
            IGlobalInterfaceTable * This,
                       IUnknown *pUnk,
                       const IID * const riid,
                        DWORD *pdwCookie);

        HRESULT ( __export __stdcall *RevokeInterfaceFromGlobal )(
            IGlobalInterfaceTable * This,
                       DWORD dwCookie);

        HRESULT ( __export __stdcall *GetInterfaceFromGlobal )(
            IGlobalInterfaceTable * This,
                       DWORD dwCookie,
                       const IID * const riid,
                                void * *ppv);

       
    } IGlobalInterfaceTableVtbl;

    struct IGlobalInterfaceTable
    {
        struct IGlobalInterfaceTableVtbl *lpVtbl;
    };
# 10793 "/usr/local/arm-wince-pe/include/objidl.h" 3
HRESULT __export __stdcall IGlobalInterfaceTable_RegisterInterfaceInGlobal_Proxy(
    IGlobalInterfaceTable * This,
               IUnknown *pUnk,
               const IID * const riid,
                DWORD *pdwCookie);


void IGlobalInterfaceTable_RegisterInterfaceInGlobal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Proxy(
    IGlobalInterfaceTable * This,
               DWORD dwCookie);


void IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IGlobalInterfaceTable_GetInterfaceFromGlobal_Proxy(
    IGlobalInterfaceTable * This,
               DWORD dwCookie,
               const IID * const riid,
                        void * *ppv);


void IGlobalInterfaceTable_GetInterfaceFromGlobal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 10846 "/usr/local/arm-wince-pe/include/objidl.h" 3
enum __MIDL___MIDL_itf_objidl_0056_0001
    { COMBND_RPCSTRINGS = 0x1
    };


extern RPC_IF_HANDLE __MIDL_itf_objidl_0056_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0056_v0_0_s_ifspec;
# 10866 "/usr/local/arm-wince-pe/include/objidl.h" 3
extern const IID IID_IComBinding;
# 10892 "/usr/local/arm-wince-pe/include/objidl.h" 3
    typedef struct IComBindingVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IComBinding * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IComBinding * This);

        ULONG ( __export __stdcall *Release )(
            IComBinding * This);

        HRESULT ( __export __stdcall *InitBinding )(
            IComBinding * This,
                       DWORD dwEndpointFlags,
                       DWORD dwNICFlags,
                       DWORD mbzReserved1,
                       DWORD mbzReserved2,
                       LPOLESTR pszBinding);

        HRESULT ( __export __stdcall *QueryBinding )(
            IComBinding * This,
                        LPDWORD pdwEndpointFlags,
                        LPDWORD pdwNICFlags,
                        LPDWORD mbzReserved1,
                        LPDWORD mbzReserved2,
                        LPOLESTR *ppszBinding);

       
    } IComBindingVtbl;

    struct IComBinding
    {
        struct IComBindingVtbl *lpVtbl;
    };
# 10959 "/usr/local/arm-wince-pe/include/objidl.h" 3
HRESULT __export __stdcall IComBinding_InitBinding_Proxy(
    IComBinding * This,
               DWORD dwEndpointFlags,
               DWORD dwNICFlags,
               DWORD mbzReserved1,
               DWORD mbzReserved2,
               LPOLESTR pszBinding);


void IComBinding_InitBinding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IComBinding_QueryBinding_Proxy(
    IComBinding * This,
                LPDWORD pdwEndpointFlags,
                LPDWORD pdwNICFlags,
                LPDWORD mbzReserved1,
                LPDWORD mbzReserved2,
                LPOLESTR *ppszBinding);


void IComBinding_QueryBinding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 10997 "/usr/local/arm-wince-pe/include/objidl.h" 3
unsigned long ASYNC_STGMEDIUM_UserSize( unsigned long *, unsigned long , ASYNC_STGMEDIUM * );
unsigned char * ASYNC_STGMEDIUM_UserMarshal( unsigned long *, unsigned char *, ASYNC_STGMEDIUM * );
unsigned char * ASYNC_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM * );
void ASYNC_STGMEDIUM_UserFree( unsigned long *, ASYNC_STGMEDIUM * );

unsigned long BSTR_UserSize( unsigned long *, unsigned long , BSTR * );
unsigned char * BSTR_UserMarshal( unsigned long *, unsigned char *, BSTR * );
unsigned char * BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * );
void BSTR_UserFree( unsigned long *, BSTR * );

unsigned long CLIPFORMAT_UserSize( unsigned long *, unsigned long , CLIPFORMAT * );
unsigned char * CLIPFORMAT_UserMarshal( unsigned long *, unsigned char *, CLIPFORMAT * );
unsigned char * CLIPFORMAT_UserUnmarshal(unsigned long *, unsigned char *, CLIPFORMAT * );
void CLIPFORMAT_UserFree( unsigned long *, CLIPFORMAT * );

unsigned long FLAG_STGMEDIUM_UserSize( unsigned long *, unsigned long , FLAG_STGMEDIUM * );
unsigned char * FLAG_STGMEDIUM_UserMarshal( unsigned long *, unsigned char *, FLAG_STGMEDIUM * );
unsigned char * FLAG_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM * );
void FLAG_STGMEDIUM_UserFree( unsigned long *, FLAG_STGMEDIUM * );

unsigned long SNB_UserSize( unsigned long *, unsigned long , SNB * );
unsigned char * SNB_UserMarshal( unsigned long *, unsigned char *, SNB * );
unsigned char * SNB_UserUnmarshal(unsigned long *, unsigned char *, SNB * );
void SNB_UserFree( unsigned long *, SNB * );

unsigned long STGMEDIUM_UserSize( unsigned long *, unsigned long , STGMEDIUM * );
unsigned char * STGMEDIUM_UserMarshal( unsigned long *, unsigned char *, STGMEDIUM * );
unsigned char * STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, STGMEDIUM * );
void STGMEDIUM_UserFree( unsigned long *, STGMEDIUM * );

              BOOL __export __stdcall IRunnableObject_IsRunning_Proxy(
    IRunnableObject * This);


                HRESULT __export __stdcall IRunnableObject_IsRunning_Stub(
    IRunnableObject * This);

              HRESULT __export __stdcall IMoniker_BindToObject_Proxy(
    IMoniker * This,
                       IBindCtx *pbc,
                       IMoniker *pmkToLeft,
               const IID * const riidResult,
                        void * *ppvResult);


                HRESULT __export __stdcall IMoniker_BindToObject_Stub(
    IMoniker * This,
                       IBindCtx *pbc,
                       IMoniker *pmkToLeft,
               const IID * const riidResult,
                        IUnknown * *ppvResult);

              HRESULT __export __stdcall IMoniker_BindToStorage_Proxy(
    IMoniker * This,
                       IBindCtx *pbc,
                       IMoniker *pmkToLeft,
               const IID * const riid,
                        void * *ppvObj);


                HRESULT __export __stdcall IMoniker_BindToStorage_Stub(
    IMoniker * This,
                       IBindCtx *pbc,
                       IMoniker *pmkToLeft,
               const IID * const riid,
                        IUnknown * *ppvObj);

              HRESULT __export __stdcall IEnumString_Next_Proxy(
    IEnumString * This,
               ULONG celt,
                                    LPOLESTR *rgelt,
                ULONG *pceltFetched);


                HRESULT __export __stdcall IEnumString_Next_Stub(
    IEnumString * This,
               ULONG celt,
                                    LPOLESTR *rgelt,
                ULONG *pceltFetched);

              HRESULT __export __stdcall ISequentialStream_Read_Proxy(
    ISequentialStream * This,
                                    void *pv,
               ULONG cb,
                ULONG *pcbRead);


                HRESULT __export __stdcall ISequentialStream_Read_Stub(
    ISequentialStream * This,
                                    byte *pv,
               ULONG cb,
                ULONG *pcbRead);

              HRESULT __export __stdcall ISequentialStream_Write_Proxy(
    ISequentialStream * This,
                        const void *pv,
               ULONG cb,
                ULONG *pcbWritten);


                HRESULT __export __stdcall ISequentialStream_Write_Stub(
    ISequentialStream * This,
                        const byte *pv,
               ULONG cb,
                ULONG *pcbWritten);

              HRESULT __export __stdcall IStream_Seek_Proxy(
    IStream * This,
               LARGE_INTEGER dlibMove,
               DWORD dwOrigin,
                ULARGE_INTEGER *plibNewPosition);


                HRESULT __export __stdcall IStream_Seek_Stub(
    IStream * This,
               LARGE_INTEGER dlibMove,
               DWORD dwOrigin,
                ULARGE_INTEGER *plibNewPosition);

              HRESULT __export __stdcall IStream_CopyTo_Proxy(
    IStream * This,
                       IStream *pstm,
               ULARGE_INTEGER cb,
                ULARGE_INTEGER *pcbRead,
                ULARGE_INTEGER *pcbWritten);


                HRESULT __export __stdcall IStream_CopyTo_Stub(
    IStream * This,
                       IStream *pstm,
               ULARGE_INTEGER cb,
                ULARGE_INTEGER *pcbRead,
                ULARGE_INTEGER *pcbWritten);

              HRESULT __export __stdcall IEnumSTATSTG_Next_Proxy(
    IEnumSTATSTG * This,
               ULONG celt,
                                    STATSTG *rgelt,
                ULONG *pceltFetched);


                HRESULT __export __stdcall IEnumSTATSTG_Next_Stub(
    IEnumSTATSTG * This,
               ULONG celt,
                                    STATSTG *rgelt,
                ULONG *pceltFetched);

              HRESULT __export __stdcall IStorage_OpenStream_Proxy(
    IStorage * This,
                       const OLECHAR *pwcsName,
                       void *reserved1,
               DWORD grfMode,
               DWORD reserved2,
                IStream * *ppstm);


                HRESULT __export __stdcall IStorage_OpenStream_Stub(
    IStorage * This,
                       const OLECHAR *pwcsName,
               unsigned long cbReserved1,
                                byte *reserved1,
               DWORD grfMode,
               DWORD reserved2,
                IStream * *ppstm);

              HRESULT __export __stdcall IEnumUnknown_Next_Proxy(
    IEnumUnknown * This,
               ULONG celt,
                IUnknown * *rgelt,
                ULONG *pceltFetched);


                HRESULT __export __stdcall IEnumUnknown_Next_Stub(
    IEnumUnknown * This,
               ULONG celt,
                                    IUnknown * *rgelt,
                ULONG *pceltFetched);

              HRESULT __export __stdcall IBindCtx_SetBindOptions_Proxy(
    IBindCtx * This,
               BIND_OPTS *pbindopts);


                HRESULT __export __stdcall IBindCtx_SetBindOptions_Stub(
    IBindCtx * This,
               BIND_OPTS2 *pbindopts);

              HRESULT __export __stdcall IBindCtx_GetBindOptions_Proxy(
    IBindCtx * This,
                    BIND_OPTS *pbindopts);


                HRESULT __export __stdcall IBindCtx_GetBindOptions_Stub(
    IBindCtx * This,
                    BIND_OPTS2 *pbindopts);

              HRESULT __export __stdcall IEnumMoniker_Next_Proxy(
    IEnumMoniker * This,
               ULONG celt,
                                    IMoniker * *rgelt,
                ULONG *pceltFetched);


                HRESULT __export __stdcall IEnumMoniker_Next_Stub(
    IEnumMoniker * This,
               ULONG celt,
                                    IMoniker * *rgelt,
                ULONG *pceltFetched);

              HRESULT __export __stdcall IStorage_EnumElements_Proxy(
    IStorage * This,
               DWORD reserved1,
                                void *reserved2,
               DWORD reserved3,
                IEnumSTATSTG * *ppenum);


                HRESULT __export __stdcall IStorage_EnumElements_Stub(
    IStorage * This,
               DWORD reserved1,
               unsigned long cbReserved2,
                                byte *reserved2,
               DWORD reserved3,
                IEnumSTATSTG * *ppenum);

              HRESULT __export __stdcall ILockBytes_ReadAt_Proxy(
    ILockBytes * This,
               ULARGE_INTEGER ulOffset,
                                    void *pv,
               ULONG cb,
                ULONG *pcbRead);


                HRESULT __export __stdcall ILockBytes_ReadAt_Stub(
    ILockBytes * This,
               ULARGE_INTEGER ulOffset,
                                    byte *pv,
               ULONG cb,
                ULONG *pcbRead);

              HRESULT __export __stdcall ILockBytes_WriteAt_Proxy(
    ILockBytes * This,
               ULARGE_INTEGER ulOffset,
                        const void *pv,
               ULONG cb,
                ULONG *pcbWritten);


                HRESULT __export __stdcall ILockBytes_WriteAt_Stub(
    ILockBytes * This,
               ULARGE_INTEGER ulOffset,
                        const byte *pv,
               ULONG cb,
                ULONG *pcbWritten);

              HRESULT __export __stdcall IEnumFORMATETC_Next_Proxy(
    IEnumFORMATETC * This,
               ULONG celt,
                                    FORMATETC *rgelt,
                ULONG *pceltFetched);


                HRESULT __export __stdcall IEnumFORMATETC_Next_Stub(
    IEnumFORMATETC * This,
               ULONG celt,
                                    FORMATETC *rgelt,
                ULONG *pceltFetched);

              HRESULT __export __stdcall IEnumSTATDATA_Next_Proxy(
    IEnumSTATDATA * This,
               ULONG celt,
                                    STATDATA *rgelt,
                ULONG *pceltFetched);


                HRESULT __export __stdcall IEnumSTATDATA_Next_Stub(
    IEnumSTATDATA * This,
               ULONG celt,
                                    STATDATA *rgelt,
                ULONG *pceltFetched);

              void __export __stdcall IAdviseSink_OnDataChange_Proxy(
    IAdviseSink * This,
                       FORMATETC *pFormatetc,
                       STGMEDIUM *pStgmed);


                       void __export __stdcall IAdviseSink_OnDataChange_Stub(
    IAdviseSink * This,
                       FORMATETC *pFormatetc,
                       ASYNC_STGMEDIUM *pStgmed);

              void __export __stdcall IAdviseSink_OnViewChange_Proxy(
    IAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);


                       void __export __stdcall IAdviseSink_OnViewChange_Stub(
    IAdviseSink * This,
               DWORD dwAspect,
               LONG lindex);

              void __export __stdcall IAdviseSink_OnRename_Proxy(
    IAdviseSink * This,
               IMoniker *pmk);


                       void __export __stdcall IAdviseSink_OnRename_Stub(
    IAdviseSink * This,
               IMoniker *pmk);

              void __export __stdcall IAdviseSink_OnSave_Proxy(
    IAdviseSink * This);


                       void __export __stdcall IAdviseSink_OnSave_Stub(
    IAdviseSink * This);

              void __export __stdcall IAdviseSink_OnClose_Proxy(
    IAdviseSink * This);


                HRESULT __export __stdcall IAdviseSink_OnClose_Stub(
    IAdviseSink * This);

              void __export __stdcall IAdviseSink2_OnLinkSrcChange_Proxy(
    IAdviseSink2 * This,
                       IMoniker *pmk);


                       void __export __stdcall IAdviseSink2_OnLinkSrcChange_Stub(
    IAdviseSink2 * This,
                       IMoniker *pmk);

              HRESULT __export __stdcall IDataObject_GetData_Proxy(
    IDataObject * This,
                       FORMATETC *pformatetcIn,
                STGMEDIUM *pmedium);


                HRESULT __export __stdcall IDataObject_GetData_Stub(
    IDataObject * This,
                       FORMATETC *pformatetcIn,
                STGMEDIUM *pRemoteMedium);

              HRESULT __export __stdcall IDataObject_GetDataHere_Proxy(
    IDataObject * This,
                       FORMATETC *pformatetc,
                    STGMEDIUM *pmedium);


                HRESULT __export __stdcall IDataObject_GetDataHere_Stub(
    IDataObject * This,
                       FORMATETC *pformatetc,
                    STGMEDIUM *pRemoteMedium);

              HRESULT __export __stdcall IDataObject_SetData_Proxy(
    IDataObject * This,
                       FORMATETC *pformatetc,
                       STGMEDIUM *pmedium,
               BOOL fRelease);


                HRESULT __export __stdcall IDataObject_SetData_Stub(
    IDataObject * This,
                       FORMATETC *pformatetc,
                       FLAG_STGMEDIUM *pmedium,
               BOOL fRelease);

              HRESULT __export __stdcall IEnumSTATPROPSTG_Next_Proxy(
    IEnumSTATPROPSTG * This,
               ULONG celt,
                                    STATPROPSTG *rgelt,
                ULONG *pceltFetched);


                HRESULT __export __stdcall IEnumSTATPROPSTG_Next_Stub(
    IEnumSTATPROPSTG * This,
               ULONG celt,
                                    STATPROPSTG *rgelt,
                ULONG *pceltFetched);

              HRESULT __export __stdcall IEnumSTATPROPSETSTG_Next_Proxy(
    IEnumSTATPROPSETSTG * This,
               ULONG celt,
                                    STATPROPSETSTG *rgelt,
                ULONG *pceltFetched);


                HRESULT __export __stdcall IEnumSTATPROPSETSTG_Next_Stub(
    IEnumSTATPROPSETSTG * This,
               ULONG celt,
                                    STATPROPSETSTG *rgelt,
                ULONG *pceltFetched);

              HRESULT __export __stdcall IFillLockBytes_FillAppend_Proxy(
    IFillLockBytes * This,
                        const void *pv,
               ULONG cb,
                ULONG *pcbWritten);


                HRESULT __export __stdcall IFillLockBytes_FillAppend_Stub(
    IFillLockBytes * This,
                        const byte *pv,
               ULONG cb,
                ULONG *pcbWritten);

              HRESULT __export __stdcall IFillLockBytes_FillAt_Proxy(
    IFillLockBytes * This,
               ULARGE_INTEGER ulOffset,
                        const void *pv,
               ULONG cb,
                ULONG *pcbWritten);


                HRESULT __export __stdcall IFillLockBytes_FillAt_Stub(
    IFillLockBytes * This,
               ULARGE_INTEGER ulOffset,
                        const byte *pv,
               ULONG cb,
                ULONG *pcbWritten);
# 418 "/usr/local/arm-wince-pe/include/objbase.h" 2 3
# 520 "/usr/local/arm-wince-pe/include/objbase.h" 3
# 1 "/usr/local/arm-wince-pe/include/cguid.h" 1 3
# 17 "/usr/local/arm-wince-pe/include/cguid.h" 3
extern const IID GUID_NULL;
extern const IID IID_IRpcChannel;
extern const IID IID_IRpcStub;
extern const IID IID_IStubManager;
extern const IID IID_IRpcProxy;
extern const IID IID_IProxyManager;
extern const IID IID_IPSFactory;
extern const IID IID_IInternalMoniker;
extern const IID IID_IDfReserved1;
extern const IID IID_IDfReserved2;
extern const IID IID_IDfReserved3;
extern const CLSID CLSID_StdMarshal;
extern const IID IID_IStub;
extern const IID IID_IProxy;
extern const IID IID_IEnumGeneric;
extern const IID IID_IEnumHolder;
extern const IID IID_IEnumCallback;
extern const IID IID_IOleManager;
extern const IID IID_IOlePresObj;
extern const IID IID_IDebug;
extern const IID IID_IDebugStream;
extern const CLSID CLSID_PSGenObject;
extern const CLSID CLSID_PSClientSite;
extern const CLSID CLSID_PSClassObject;
extern const CLSID CLSID_PSInPlaceActive;
extern const CLSID CLSID_PSInPlaceFrame;
extern const CLSID CLSID_PSDragDrop;
extern const CLSID CLSID_PSBindCtx;
extern const CLSID CLSID_PSEnumerators;
extern const CLSID CLSID_StaticMetafile;
extern const CLSID CLSID_StaticDib;
extern const CLSID CID_CDfsVolume;
extern const CLSID CLSID_DCOMAccessControl;
extern const CLSID CLSID_StdGlobalInterfaceTable;
extern const CLSID CLSID_ComBinding;
# 62 "/usr/local/arm-wince-pe/include/cguid.h" 3
extern const CLSID CLSID_CCDFormKrnl;
extern const CLSID CLSID_CCDPropertyPage;
extern const CLSID CLSID_CCDFormDialog;




extern const CLSID CLSID_CCDCommandButton;
extern const CLSID CLSID_CCDComboBox;
extern const CLSID CLSID_CCDTextBox;
extern const CLSID CLSID_CCDCheckBox;
extern const CLSID CLSID_CCDLabel;
extern const CLSID CLSID_CCDOptionButton;
extern const CLSID CLSID_CCDListBox;
extern const CLSID CLSID_CCDScrollBar;
extern const CLSID CLSID_CCDGroupBox;




extern const CLSID CLSID_CCDGeneralPropertyPage;
extern const CLSID CLSID_CCDGenericPropertyPage;
extern const CLSID CLSID_CCDFontPropertyPage;
extern const CLSID CLSID_CCDColorPropertyPage;
extern const CLSID CLSID_CCDLabelPropertyPage;
extern const CLSID CLSID_CCDCheckBoxPropertyPage;
extern const CLSID CLSID_CCDTextBoxPropertyPage;
extern const CLSID CLSID_CCDOptionButtonPropertyPage;
extern const CLSID CLSID_CCDListBoxPropertyPage;
extern const CLSID CLSID_CCDCommandButtonPropertyPage;
extern const CLSID CLSID_CCDComboBoxPropertyPage;
extern const CLSID CLSID_CCDScrollBarPropertyPage;
extern const CLSID CLSID_CCDGroupBoxPropertyPage;
extern const CLSID CLSID_CCDXObjectPropertyPage;

extern const CLSID CLSID_CStdPropertyFrame;

extern const CLSID CLSID_CFormPropertyPage;
extern const CLSID CLSID_CGridPropertyPage;

extern const CLSID CLSID_CWSJArticlePage;
extern const CLSID CLSID_CSystemPage;

extern const CLSID CLSID_IdentityUnmarshal;
extern const CLSID CLSID_InProcFreeMarshaler;

extern const CLSID CLSID_Picture_Metafile;
extern const CLSID CLSID_Picture_EnhMetafile;
extern const CLSID CLSID_Picture_Dib;




extern const GUID GUID_TRISTATE;
# 521 "/usr/local/arm-wince-pe/include/objbase.h" 2 3



typedef enum tagCOINIT
{
  COINIT_APARTMENTTHREADED = 0x2,







} COINIT;







extern DWORD __export __stdcall CoBuildVersion( void );



extern HRESULT __export __stdcall CoInitialize(LPVOID pvReserved);
extern void __export __stdcall CoUninitialize(void);
extern HRESULT __export __stdcall CoGetMalloc(DWORD dwMemContext, LPMALLOC * ppMalloc);
extern DWORD __export __stdcall CoGetCurrentProcess(void);
extern HRESULT __export __stdcall CoRegisterMallocSpy(LPMALLOCSPY pMallocSpy);
extern HRESULT __export __stdcall CoRevokeMallocSpy(void);
extern HRESULT __export __stdcall CoCreateStandardMalloc(DWORD memctx, IMalloc * * ppMalloc);
# 565 "/usr/local/arm-wince-pe/include/objbase.h" 3
extern HRESULT __export __stdcall CoGetClassObject(const CLSID * const rclsid, DWORD dwClsContext, LPVOID pvReserved,
                    const IID * const riid, LPVOID * ppv);
extern HRESULT __export __stdcall CoRegisterClassObject(const CLSID * const rclsid, LPUNKNOWN pUnk,
                    DWORD dwClsContext, DWORD flags, LPDWORD lpdwRegister);
extern HRESULT __export __stdcall CoRevokeClassObject(DWORD dwRegister);
extern HRESULT __export __stdcall CoResumeClassObjects(void);
extern HRESULT __export __stdcall CoSuspendClassObjects(void);
extern ULONG __export __stdcall CoAddRefServerProcess(void);
extern ULONG __export __stdcall CoReleaseServerProcess(void);
extern HRESULT __export __stdcall CoGetPSClsid(const IID * const riid, CLSID *pClsid);
extern HRESULT __export __stdcall CoRegisterPSClsid(const IID * const riid, const CLSID * const rclsid);


extern HRESULT __export __stdcall CoRegisterSurrogate(LPSURROGATE pSurrogate);



extern HRESULT __export __stdcall CoGetMarshalSizeMax(ULONG *pulSize, const IID * const riid, LPUNKNOWN pUnk,
                    DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags);
extern HRESULT __export __stdcall CoMarshalInterface(LPSTREAM pStm, const IID * const riid, LPUNKNOWN pUnk,
                    DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags);
extern HRESULT __export __stdcall CoUnmarshalInterface(LPSTREAM pStm, const IID * const riid, LPVOID * ppv);
extern HRESULT __export __stdcall CoMarshalHresult(LPSTREAM pstm, HRESULT hresult);
extern HRESULT __export __stdcall CoUnmarshalHresult(LPSTREAM pstm, HRESULT * phresult);
extern HRESULT __export __stdcall CoReleaseMarshalData(LPSTREAM pStm);
extern HRESULT __export __stdcall CoDisconnectObject(LPUNKNOWN pUnk, DWORD dwReserved);
extern HRESULT __export __stdcall CoLockObjectExternal(LPUNKNOWN pUnk, BOOL fLock, BOOL fLastUnlockReleases);
extern HRESULT __export __stdcall CoGetStandardMarshal(const IID * const riid, LPUNKNOWN pUnk,
                    DWORD dwDestContext, LPVOID pvDestContext, DWORD mshlflags,
                    LPMARSHAL * ppMarshal);

extern BOOL __export __stdcall CoIsHandlerConnected(LPUNKNOWN pUnk);
extern BOOL __export __stdcall CoHasStrongExternalConnections(LPUNKNOWN pUnk);


extern HRESULT __export __stdcall CoMarshalInterThreadInterfaceInStream(const IID * const riid, LPUNKNOWN pUnk,
                    LPSTREAM *ppStm);

extern HRESULT __export __stdcall CoGetInterfaceAndReleaseStream(LPSTREAM pStm, const IID * const iid,
                    LPVOID * ppv);

extern HRESULT __export __stdcall CoCreateFreeThreadedMarshaler(LPUNKNOWN punkOuter,
                    LPUNKNOWN *ppunkMarshal);



extern HINSTANCE __export __stdcall CoLoadLibrary(LPOLESTR lpszLibName, BOOL bAutoFree);
extern void __export __stdcall CoFreeLibrary(HINSTANCE hInst);
extern void __export __stdcall CoFreeAllLibraries(void);
extern void __export __stdcall CoFreeUnusedLibraries(void);
# 674 "/usr/local/arm-wince-pe/include/objbase.h" 3
extern HRESULT __export __stdcall CoCreateInstance(const CLSID * const rclsid, LPUNKNOWN pUnkOuter,
                    DWORD dwClsContext, const IID * const riid, LPVOID * ppv);
# 712 "/usr/local/arm-wince-pe/include/objbase.h" 3
extern HRESULT __export __stdcall StringFromCLSID(const CLSID * const rclsid, LPOLESTR * lplpsz);
extern HRESULT __export __stdcall CLSIDFromString(LPOLESTR lpsz, LPCLSID pclsid);
extern HRESULT __export __stdcall StringFromIID(const IID * const rclsid, LPOLESTR * lplpsz);
extern HRESULT __export __stdcall IIDFromString(LPOLESTR lpsz, LPIID lpiid);
extern BOOL __export __stdcall CoIsOle1Class(const CLSID * const rclsid);
extern HRESULT __export __stdcall ProgIDFromCLSID (const CLSID * const clsid, LPOLESTR * lplpszProgID);
extern HRESULT __export __stdcall CLSIDFromProgID (LPCOLESTR lpszProgID, LPCLSID lpclsid);
extern int __export __stdcall StringFromGUID2(const GUID * const rguid, LPOLESTR lpsz, int cbMax);

extern HRESULT __export __stdcall CoCreateGuid(GUID *pguid);

extern BOOL __export __stdcall CoFileTimeToDosDateTime(
                 FILETIME * lpFileTime, LPWORD lpDosDate, LPWORD lpDosTime);
extern BOOL __export __stdcall CoDosDateTimeToFileTime(
                       WORD nDosDate, WORD nDosTime, FILETIME * lpFileTime);
extern HRESULT __export __stdcall CoFileTimeNow( FILETIME * lpFileTime );


extern HRESULT __export __stdcall CoRegisterMessageFilter( LPMESSAGEFILTER lpMessageFilter,
                                LPMESSAGEFILTER * lplpMessageFilter );
# 740 "/usr/local/arm-wince-pe/include/objbase.h" 3
extern HRESULT __export __stdcall CoGetTreatAsClass(const CLSID * const clsidOld, LPCLSID pClsidNew);
extern HRESULT __export __stdcall CoTreatAsClass(const CLSID * const clsidOld, const CLSID * const clsidNew);
# 752 "/usr/local/arm-wince-pe/include/objbase.h" 3
typedef HRESULT (__export __stdcall * LPFNGETCLASSOBJECT) (const CLSID * const, const IID * const, LPVOID *);





typedef HRESULT (__export __stdcall * LPFNCANUNLOADNOW)(void);


extern HRESULT __export __stdcall DllGetClassObject(const CLSID * const rclsid, const IID * const riid, LPVOID * ppv);

extern HRESULT __export __stdcall DllCanUnloadNow(void);



extern LPVOID __export __stdcall CoTaskMemAlloc(ULONG cb);
extern LPVOID __export __stdcall CoTaskMemRealloc(LPVOID pv, ULONG cb);
extern void __export __stdcall CoTaskMemFree(LPVOID pv);




extern HRESULT __export __stdcall CreateDataAdviseHolder(LPDATAADVISEHOLDER * ppDAHolder);

extern HRESULT __export __stdcall CreateDataCache(LPUNKNOWN pUnkOuter, const CLSID * const rclsid,
                                        const IID * const iid, LPVOID * ppv);






extern HRESULT __export __stdcall StgCreateDocfile(const OLECHAR * pwcsName,
            DWORD grfMode,
            DWORD reserved,
            IStorage * *ppstgOpen);

extern HRESULT __export __stdcall StgCreateDocfileOnILockBytes(ILockBytes *plkbyt,
                    DWORD grfMode,
                    DWORD reserved,
                    IStorage * *ppstgOpen);

extern HRESULT __export __stdcall StgOpenStorage(const OLECHAR * pwcsName,
              IStorage *pstgPriority,
              DWORD grfMode,
              SNB snbExclude,
              DWORD reserved,
              IStorage * *ppstgOpen);
extern HRESULT __export __stdcall StgOpenStorageOnILockBytes(ILockBytes *plkbyt,
                  IStorage *pstgPriority,
                  DWORD grfMode,
                  SNB snbExclude,
                  DWORD reserved,
                  IStorage * *ppstgOpen);

extern HRESULT __export __stdcall StgIsStorageFile(const OLECHAR * pwcsName);
extern HRESULT __export __stdcall StgIsStorageILockBytes(ILockBytes * plkbyt);

extern HRESULT __export __stdcall StgSetTimes(OLECHAR const * lpszName,
                   FILETIME const * pctime,
                   FILETIME const * patime,
                   FILETIME const * pmtime);

extern HRESULT __export __stdcall StgOpenAsyncDocfileOnIFillLockBytes( IFillLockBytes *pflb,
             DWORD grfMode,
             DWORD asyncFlags,
             IStorage **ppstgOpen);

extern HRESULT __export __stdcall StgGetIFillLockBytesOnILockBytes( ILockBytes *pilb,
             IFillLockBytes **ppflb);

extern HRESULT __export __stdcall StgGetIFillLockBytesOnFile(OLECHAR const *pwcsName,
             IFillLockBytes **ppflb);


extern HRESULT __export __stdcall StgOpenLayoutDocfile(OLECHAR const *pwcsDfName,
             DWORD grfMode,
             DWORD reserved,
             IStorage **ppstgOpen);







extern HRESULT __export __stdcall BindMoniker(LPMONIKER pmk, DWORD grfOpt, const IID * const iidResult, LPVOID * ppvResult);
extern HRESULT __export __stdcall CoGetObject(LPCWSTR pszName, BIND_OPTS *pBindOptions, const IID * const riid, void **ppv);
extern HRESULT __export __stdcall MkParseDisplayName(LPBC pbc, LPCOLESTR szUserName,
                ULONG * pchEaten, LPMONIKER * ppmk);
extern HRESULT __export __stdcall MonikerRelativePathTo(LPMONIKER pmkSrc, LPMONIKER pmkDest, LPMONIKER
                * ppmkRelPath, BOOL dwReserved);
extern HRESULT __export __stdcall MonikerCommonPrefixWith(LPMONIKER pmkThis, LPMONIKER pmkOther,
                LPMONIKER * ppmkCommon);
extern HRESULT __export __stdcall CreateBindCtx(DWORD reserved, LPBC * ppbc);
extern HRESULT __export __stdcall CreateGenericComposite(LPMONIKER pmkFirst, LPMONIKER pmkRest,
    LPMONIKER * ppmkComposite);
extern HRESULT __export __stdcall GetClassFile (LPCOLESTR szFilename, CLSID * pclsid);

extern HRESULT __export __stdcall CreateClassMoniker(const CLSID * const rclsid, LPMONIKER * ppmk);

extern HRESULT __export __stdcall CreateFileMoniker(LPCOLESTR lpszPathName, LPMONIKER * ppmk);

extern HRESULT __export __stdcall CreateItemMoniker(LPCOLESTR lpszDelim, LPCOLESTR lpszItem,
    LPMONIKER * ppmk);
extern HRESULT __export __stdcall CreateAntiMoniker(LPMONIKER * ppmk);
extern HRESULT __export __stdcall CreatePointerMoniker(LPUNKNOWN punk, LPMONIKER * ppmk);

extern HRESULT __export __stdcall GetRunningObjectTable( DWORD reserved, LPRUNNINGOBJECTTABLE * pprot);


# 1 "/usr/local/arm-wince-pe/include/poppack.h" 1 3
# 34 "/usr/local/arm-wince-pe/include/poppack.h" 3
#pragma pack()
# 864 "/usr/local/arm-wince-pe/include/objbase.h" 2 3
# 29 "/usr/local/arm-wince-pe/include/ole2.h" 2 3
# 1 "/usr/local/arm-wince-pe/include/oleauto.h" 1 3
# 17 "/usr/local/arm-wince-pe/include/oleauto.h" 3
# 1 "/usr/local/arm-wince-pe/include/pshpack8.h" 1 3
# 30 "/usr/local/arm-wince-pe/include/pshpack8.h" 3
#pragma pack(8)
# 18 "/usr/local/arm-wince-pe/include/oleauto.h" 2 3
# 30 "/usr/local/arm-wince-pe/include/oleauto.h" 3
extern const IID IID_StdOle;
# 53 "/usr/local/arm-wince-pe/include/oleauto.h" 3
# 1 "/usr/local/arm-wince-pe/include/oaidl.h" 1 3
# 12 "/usr/local/arm-wince-pe/include/oaidl.h" 3
# 1 "/usr/local/arm-wince-pe/include/rpc.h" 1 3
# 13 "/usr/local/arm-wince-pe/include/oaidl.h" 2 3
# 30 "/usr/local/arm-wince-pe/include/oaidl.h" 3
typedef struct ICreateTypeInfo ICreateTypeInfo;





typedef struct ICreateTypeInfo2 ICreateTypeInfo2;





typedef struct ICreateTypeLib ICreateTypeLib;





typedef struct ICreateTypeLib2 ICreateTypeLib2;





typedef struct IDispatch IDispatch;





typedef struct IEnumVARIANT IEnumVARIANT;





typedef struct ITypeComp ITypeComp;





typedef struct ITypeInfo ITypeInfo;





typedef struct ITypeInfo2 ITypeInfo2;





typedef struct ITypeLib ITypeLib;





typedef struct ITypeLib2 ITypeLib2;





typedef struct ITypeChangeEvents ITypeChangeEvents;





typedef struct IErrorInfo IErrorInfo;





typedef struct ICreateErrorInfo ICreateErrorInfo;





typedef struct ISupportErrorInfo ISupportErrorInfo;





typedef struct ITypeFactory ITypeFactory;





typedef struct ITypeMarshal ITypeMarshal;





typedef struct IRecordInfo IRecordInfo;




# 1 "/usr/local/arm-wince-pe/include/objidl.h" 1 3
# 12 "/usr/local/arm-wince-pe/include/objidl.h" 3
# 1 "/usr/local/arm-wince-pe/include/rpc.h" 1 3
# 13 "/usr/local/arm-wince-pe/include/objidl.h" 2 3
# 138 "/usr/local/arm-wince-pe/include/oaidl.h" 2 3

void * MIDL_user_allocate(size_t);
void MIDL_user_free( void * );
# 179 "/usr/local/arm-wince-pe/include/oaidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_v0_0_s_ifspec;
# 193 "/usr/local/arm-wince-pe/include/oaidl.h" 3
typedef CY CURRENCY;

typedef struct tagSAFEARRAYBOUND
    {
    ULONG cElements;
    LONG lLbound;
    } SAFEARRAYBOUND;

typedef struct tagSAFEARRAYBOUND *LPSAFEARRAYBOUND;


typedef struct _wireVARIANT *wireVARIANT;

typedef struct _wireBRECORD *wireBRECORD;

typedef struct _wireSAFEARR_BSTR
    {
    ULONG Size;
                         wireBSTR *aBstr;
    } SAFEARR_BSTR;

typedef struct _wireSAFEARR_UNKNOWN
    {
    ULONG Size;
                         IUnknown * *apUnknown;
    } SAFEARR_UNKNOWN;

typedef struct _wireSAFEARR_DISPATCH
    {
    ULONG Size;
                         IDispatch * *apDispatch;
    } SAFEARR_DISPATCH;

typedef struct _wireSAFEARR_VARIANT
    {
    ULONG Size;
                         wireVARIANT *aVariant;
    } SAFEARR_VARIANT;

typedef struct _wireSAFEARR_BRECORD
    {
    ULONG Size;
                         wireBRECORD *aRecord;
    } SAFEARR_BRECORD;

typedef struct _wireSAFEARR_HAVEIID
    {
    ULONG Size;
                         IUnknown * *apUnknown;
    IID iid;
    } SAFEARR_HAVEIID;

typedef
enum tagSF_TYPE
    { SF_ERROR = VT_ERROR,
        SF_I1 = VT_I1,
        SF_I2 = VT_I2,
        SF_I4 = VT_I4,
        SF_I8 = VT_I8,
        SF_BSTR = VT_BSTR,
        SF_UNKNOWN = VT_UNKNOWN,
        SF_DISPATCH = VT_DISPATCH,
        SF_VARIANT = VT_VARIANT,
        SF_RECORD = VT_RECORD,
        SF_HAVEIID = VT_UNKNOWN | VT_RESERVED
    } SF_TYPE;

typedef struct _wireSAFEARRAY_UNION
    {
    ULONG sfType;
                                          union __MIDL_IOleAutomationTypes_0001
        {
                       SAFEARR_BSTR BstrStr;
                       SAFEARR_UNKNOWN UnknownStr;
                       SAFEARR_DISPATCH DispatchStr;
                       SAFEARR_VARIANT VariantStr;
                       SAFEARR_BRECORD RecordStr;
                       SAFEARR_HAVEIID HaveIidStr;
                       BYTE_SIZEDARR ByteStr;
                       WORD_SIZEDARR WordStr;
                       DWORD_SIZEDARR LongStr;
                       HYPER_SIZEDARR HyperStr;
        } u;
    } SAFEARRAYUNION;

typedef struct _wireSAFEARRAY
    {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    SAFEARRAYUNION uArrayStructs;
                    SAFEARRAYBOUND rgsabound[ 1 ];
    } *wireSAFEARRAY;

typedef wireSAFEARRAY *wirePSAFEARRAY;

typedef struct tagSAFEARRAY
    {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    PVOID pvData;
    SAFEARRAYBOUND rgsabound[ 1 ];
    } SAFEARRAY;

typedef SAFEARRAY *LPSAFEARRAY;
# 387 "/usr/local/arm-wince-pe/include/oaidl.h" 3
typedef struct tagVARIANT VARIANT;

struct tagVARIANT
    {
    union
        {
        struct __tagVARIANT
            {
            VARTYPE vt;
            WORD wReserved1;
            WORD wReserved2;
            WORD wReserved3;
            union
                {
                LONG lVal;
                BYTE bVal;
                SHORT iVal;
                FLOAT fltVal;
                DOUBLE dblVal;
                VARIANT_BOOL boolVal;

                SCODE scode;
                CY cyVal;
                DATE date;
                BSTR bstrVal;
                IUnknown *punkVal;
                IDispatch *pdispVal;
                SAFEARRAY *parray;
                BYTE *pbVal;
                SHORT *piVal;
                LONG *plVal;
                FLOAT *pfltVal;
                DOUBLE *pdblVal;
                VARIANT_BOOL *pboolVal;
                _VARIANT_BOOL *pbool;
                SCODE *pscode;
                CY *pcyVal;
                DATE *pdate;
                BSTR *pbstrVal;
                IUnknown * *ppunkVal;
                IDispatch * *ppdispVal;
                SAFEARRAY * *pparray;
                VARIANT *pvarVal;
                PVOID byref;
                CHAR cVal;
                USHORT uiVal;
                ULONG ulVal;
                INT intVal;
                UINT uintVal;
                DECIMAL *pdecVal;
                CHAR *pcVal;
                USHORT *puiVal;
                ULONG *pulVal;
                INT *pintVal;
                UINT *puintVal;
                struct __tagBRECORD
                    {
                    PVOID pvRecord;
                    IRecordInfo *pRecInfo;
                    } brecVal;
                } n3;
            } n2;
        DECIMAL decVal;
        } n1;
    };
typedef VARIANT *LPVARIANT;

typedef VARIANT VARIANTARG;

typedef VARIANT *LPVARIANTARG;


struct _wireBRECORD
    {
    ULONG fFlags;
    ULONG clSize;
    IRecordInfo *pRecInfo;
                    byte *pRecord;
    };
struct _wireVARIANT
    {
    DWORD clSize;
    DWORD rpcReserved;
    USHORT vt;
    USHORT wReserved1;
    USHORT wReserved2;
    USHORT wReserved3;
                                   union
        {
                       LONG lVal;
                       BYTE bVal;
                       SHORT iVal;
                       FLOAT fltVal;
                       DOUBLE dblVal;
                       VARIANT_BOOL boolVal;
                       SCODE scode;
                       CY cyVal;
                       DATE date;
                       wireBSTR bstrVal;
                       IUnknown *punkVal;
                       IDispatch *pdispVal;
                       wireSAFEARRAY parray;
                       wireBRECORD brecVal;
                       BYTE *pbVal;
                       SHORT *piVal;
                       LONG *plVal;
                       FLOAT *pfltVal;
                       DOUBLE *pdblVal;
                       VARIANT_BOOL *pboolVal;
                       SCODE *pscode;
                       CY *pcyVal;
                       DATE *pdate;
                       wireBSTR *pbstrVal;
                       IUnknown * *ppunkVal;
                       IDispatch * *ppdispVal;
                       wireSAFEARRAY *pparray;
                       wireVARIANT *pvarVal;
                       CHAR cVal;
                       USHORT uiVal;
                       ULONG ulVal;
                       INT intVal;
                       UINT uintVal;
                       DECIMAL decVal;
                       DECIMAL *pdecVal;
                       CHAR *pcVal;
                       USHORT *puiVal;
                       ULONG *pulVal;
                       INT *pintVal;
                       UINT *puintVal;


        } ;
    };
typedef LONG DISPID;

typedef DISPID MEMBERID;

typedef DWORD HREFTYPE;

typedef
enum tagTYPEKIND
    { TKIND_ENUM = 0,
        TKIND_RECORD = TKIND_ENUM + 1,
        TKIND_MODULE = TKIND_RECORD + 1,
        TKIND_INTERFACE = TKIND_MODULE + 1,
        TKIND_DISPATCH = TKIND_INTERFACE + 1,
        TKIND_COCLASS = TKIND_DISPATCH + 1,
        TKIND_ALIAS = TKIND_COCLASS + 1,
        TKIND_UNION = TKIND_ALIAS + 1,
        TKIND_MAX = TKIND_UNION + 1
    } TYPEKIND;

typedef struct tagTYPEDESC
    {
                                   union
        {
                       struct tagTYPEDESC *lptdesc;
                       struct tagARRAYDESC *lpadesc;
                       HREFTYPE hreftype;

        } ;
    VARTYPE vt;
    } TYPEDESC;

typedef struct tagARRAYDESC
    {
    TYPEDESC tdescElem;
    USHORT cDims;
                    SAFEARRAYBOUND rgbounds[ 1 ];
    } ARRAYDESC;

typedef struct tagPARAMDESCEX
    {
    ULONG cBytes;
    VARIANTARG varDefaultValue;
    } PARAMDESCEX;

typedef struct tagPARAMDESCEX *LPPARAMDESCEX;

typedef struct tagPARAMDESC
    {
    LPPARAMDESCEX pparamdescex;
    USHORT wParamFlags;
    } PARAMDESC;

typedef struct tagPARAMDESC *LPPARAMDESC;
# 590 "/usr/local/arm-wince-pe/include/oaidl.h" 3
typedef struct tagIDLDESC
    {
    ULONG dwReserved;
    USHORT wIDLFlags;
    } IDLDESC;

typedef struct tagIDLDESC *LPIDLDESC;
# 608 "/usr/local/arm-wince-pe/include/oaidl.h" 3
typedef struct tagELEMDESC {
    TYPEDESC tdesc;
    union {
        IDLDESC idldesc;
        PARAMDESC paramdesc;
    };
} ELEMDESC, * LPELEMDESC;
typedef struct tagTYPEATTR
    {
    GUID guid;
    LCID lcid;
    DWORD dwReserved;
    MEMBERID memidConstructor;
    MEMBERID memidDestructor;
    LPOLESTR lpstrSchema;
    ULONG cbSizeInstance;
    TYPEKIND typekind;
    WORD cFuncs;
    WORD cVars;
    WORD cImplTypes;
    WORD cbSizeVft;
    WORD cbAlignment;
    WORD wTypeFlags;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    TYPEDESC tdescAlias;
    IDLDESC idldescType;
    } TYPEATTR;

typedef struct tagTYPEATTR *LPTYPEATTR;

typedef struct tagDISPPARAMS
    {
                    VARIANTARG *rgvarg;
                    DISPID *rgdispidNamedArgs;
    UINT cArgs;
    UINT cNamedArgs;
    } DISPPARAMS;

typedef struct tagEXCEPINFO {
    WORD wCode;
    WORD wReserved;
    BSTR bstrSource;
    BSTR bstrDescription;
    BSTR bstrHelpFile;
    DWORD dwHelpContext;
    PVOID pvReserved;
    HRESULT (__stdcall *pfnDeferredFillIn)(struct tagEXCEPINFO *);
    SCODE scode;
} EXCEPINFO, * LPEXCEPINFO;
typedef
enum tagCALLCONV
    { CC_FASTCALL = 0,
        CC_CDECL = 1,
        CC_MSCPASCAL = CC_CDECL + 1,
        CC_PASCAL = CC_MSCPASCAL,
        CC_MACPASCAL = CC_PASCAL + 1,
        CC_STDCALL = CC_MACPASCAL + 1,
        CC_FPFASTCALL = CC_STDCALL + 1,
        CC_SYSCALL = CC_FPFASTCALL + 1,
        CC_MPWCDECL = CC_SYSCALL + 1,
        CC_MPWPASCAL = CC_MPWCDECL + 1,
        CC_MAX = CC_MPWPASCAL + 1
    } CALLCONV;

typedef
enum tagFUNCKIND
    { FUNC_VIRTUAL = 0,
        FUNC_PUREVIRTUAL = FUNC_VIRTUAL + 1,
        FUNC_NONVIRTUAL = FUNC_PUREVIRTUAL + 1,
        FUNC_STATIC = FUNC_NONVIRTUAL + 1,
        FUNC_DISPATCH = FUNC_STATIC + 1
    } FUNCKIND;

typedef
enum tagINVOKEKIND
    { INVOKE_FUNC = 1,
        INVOKE_PROPERTYGET = 2,
        INVOKE_PROPERTYPUT = 4,
        INVOKE_PROPERTYPUTREF = 8
    } INVOKEKIND;

typedef struct tagFUNCDESC
    {
    MEMBERID memid;
                    SCODE *lprgscode;
                    ELEMDESC *lprgelemdescParam;
    FUNCKIND funckind;
    INVOKEKIND invkind;
    CALLCONV callconv;
    SHORT cParams;
    SHORT cParamsOpt;
    SHORT oVft;
    SHORT cScodes;
    ELEMDESC elemdescFunc;
    WORD wFuncFlags;
    } FUNCDESC;

typedef struct tagFUNCDESC *LPFUNCDESC;

typedef
enum tagVARKIND
    { VAR_PERINSTANCE = 0,
        VAR_STATIC = VAR_PERINSTANCE + 1,
        VAR_CONST = VAR_STATIC + 1,
        VAR_DISPATCH = VAR_CONST + 1
    } VARKIND;
# 724 "/usr/local/arm-wince-pe/include/oaidl.h" 3
typedef struct tagVARDESC
    {
    MEMBERID memid;
    LPOLESTR lpstrSchema;
                                   union
        {
                       ULONG oInst;
                       VARIANT *lpvarValue;
        } ;
    ELEMDESC elemdescVar;
    WORD wVarFlags;
    VARKIND varkind;
    } VARDESC;

typedef struct tagVARDESC *LPVARDESC;

typedef
enum tagTYPEFLAGS
    { TYPEFLAG_FAPPOBJECT = 0x1,
        TYPEFLAG_FCANCREATE = 0x2,
        TYPEFLAG_FLICENSED = 0x4,
        TYPEFLAG_FPREDECLID = 0x8,
        TYPEFLAG_FHIDDEN = 0x10,
        TYPEFLAG_FCONTROL = 0x20,
        TYPEFLAG_FDUAL = 0x40,
        TYPEFLAG_FNONEXTENSIBLE = 0x80,
        TYPEFLAG_FOLEAUTOMATION = 0x100,
        TYPEFLAG_FRESTRICTED = 0x200,
        TYPEFLAG_FAGGREGATABLE = 0x400,
        TYPEFLAG_FREPLACEABLE = 0x800,
        TYPEFLAG_FDISPATCHABLE = 0x1000,
        TYPEFLAG_FREVERSEBIND = 0x2000
    } TYPEFLAGS;

typedef
enum tagFUNCFLAGS
    { FUNCFLAG_FRESTRICTED = 0x1,
        FUNCFLAG_FSOURCE = 0x2,
        FUNCFLAG_FBINDABLE = 0x4,
        FUNCFLAG_FREQUESTEDIT = 0x8,
        FUNCFLAG_FDISPLAYBIND = 0x10,
        FUNCFLAG_FDEFAULTBIND = 0x20,
        FUNCFLAG_FHIDDEN = 0x40,
        FUNCFLAG_FUSESGETLASTERROR = 0x80,
        FUNCFLAG_FDEFAULTCOLLELEM = 0x100,
        FUNCFLAG_FUIDEFAULT = 0x200,
        FUNCFLAG_FNONBROWSABLE = 0x400,
        FUNCFLAG_FREPLACEABLE = 0x800,
        FUNCFLAG_FIMMEDIATEBIND = 0x1000
    } FUNCFLAGS;

typedef
enum tagVARFLAGS
    { VARFLAG_FREADONLY = 0x1,
        VARFLAG_FSOURCE = 0x2,
        VARFLAG_FBINDABLE = 0x4,
        VARFLAG_FREQUESTEDIT = 0x8,
        VARFLAG_FDISPLAYBIND = 0x10,
        VARFLAG_FDEFAULTBIND = 0x20,
        VARFLAG_FHIDDEN = 0x40,
        VARFLAG_FRESTRICTED = 0x80,
        VARFLAG_FDEFAULTCOLLELEM = 0x100,
        VARFLAG_FUIDEFAULT = 0x200,
        VARFLAG_FNONBROWSABLE = 0x400,
        VARFLAG_FREPLACEABLE = 0x800,
        VARFLAG_FIMMEDIATEBIND = 0x1000
    } VARFLAGS;

typedef struct tagCLEANLOCALSTORAGE
    {
    IUnknown *pInterface;
    PVOID pStorage;
    DWORD flags;
    } CLEANLOCALSTORAGE;

typedef struct tagCUSTDATAITEM
    {
    GUID guid;
    VARIANTARG varValue;
    } CUSTDATAITEM;

typedef struct tagCUSTDATAITEM *LPCUSTDATAITEM;

typedef struct tagCUSTDATA
    {
    DWORD cCustData;
                    LPCUSTDATAITEM prgCustData;
    } CUSTDATA;

typedef struct tagCUSTDATA *LPCUSTDATA;



extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec;
extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec;
# 832 "/usr/local/arm-wince-pe/include/oaidl.h" 3
typedef ICreateTypeInfo *LPCREATETYPEINFO;


extern const IID IID_ICreateTypeInfo;
# 931 "/usr/local/arm-wince-pe/include/oaidl.h" 3
    typedef struct ICreateTypeInfoVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            ICreateTypeInfo * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            ICreateTypeInfo * This);

        ULONG ( __export __stdcall *Release )(
            ICreateTypeInfo * This);

        HRESULT ( __export __stdcall *SetGuid )(
            ICreateTypeInfo * This,
                       const GUID * const guid);

        HRESULT ( __export __stdcall *SetTypeFlags )(
            ICreateTypeInfo * This,
                       UINT uTypeFlags);

        HRESULT ( __export __stdcall *SetDocString )(
            ICreateTypeInfo * This,
                       LPOLESTR pStrDoc);

        HRESULT ( __export __stdcall *SetHelpContext )(
            ICreateTypeInfo * This,
                       DWORD dwHelpContext);

        HRESULT ( __export __stdcall *SetVersion )(
            ICreateTypeInfo * This,
                       WORD wMajorVerNum,
                       WORD wMinorVerNum);

        HRESULT ( __export __stdcall *AddRefTypeInfo )(
            ICreateTypeInfo * This,
                       ITypeInfo *pTInfo,
                       HREFTYPE *phRefType);

        HRESULT ( __export __stdcall *AddFuncDesc )(
            ICreateTypeInfo * This,
                       UINT index,
                       FUNCDESC *pFuncDesc);

        HRESULT ( __export __stdcall *AddImplType )(
            ICreateTypeInfo * This,
                       UINT index,
                       HREFTYPE hRefType);

        HRESULT ( __export __stdcall *SetImplTypeFlags )(
            ICreateTypeInfo * This,
                       UINT index,
                       INT implTypeFlags);

        HRESULT ( __export __stdcall *SetAlignment )(
            ICreateTypeInfo * This,
                       WORD cbAlignment);

        HRESULT ( __export __stdcall *SetSchema )(
            ICreateTypeInfo * This,
                       LPOLESTR pStrSchema);

        HRESULT ( __export __stdcall *AddVarDesc )(
            ICreateTypeInfo * This,
                       UINT index,
                       VARDESC *pVarDesc);

        HRESULT ( __export __stdcall *SetFuncAndParamNames )(
            ICreateTypeInfo * This,
                       UINT index,
                                    LPOLESTR *rgszNames,
                       UINT cNames);

        HRESULT ( __export __stdcall *SetVarName )(
            ICreateTypeInfo * This,
                       UINT index,
                       LPOLESTR szName);

        HRESULT ( __export __stdcall *SetTypeDescAlias )(
            ICreateTypeInfo * This,
                       TYPEDESC *pTDescAlias);

        HRESULT ( __export __stdcall *DefineFuncAsDllEntry )(
            ICreateTypeInfo * This,
                       UINT index,
                       LPOLESTR szDllName,
                       LPOLESTR szProcName);

        HRESULT ( __export __stdcall *SetFuncDocString )(
            ICreateTypeInfo * This,
                       UINT index,
                       LPOLESTR szDocString);

        HRESULT ( __export __stdcall *SetVarDocString )(
            ICreateTypeInfo * This,
                       UINT index,
                       LPOLESTR szDocString);

        HRESULT ( __export __stdcall *SetFuncHelpContext )(
            ICreateTypeInfo * This,
                       UINT index,
                       DWORD dwHelpContext);

        HRESULT ( __export __stdcall *SetVarHelpContext )(
            ICreateTypeInfo * This,
                       UINT index,
                       DWORD dwHelpContext);

        HRESULT ( __export __stdcall *SetMops )(
            ICreateTypeInfo * This,
                       UINT index,
                       BSTR bstrMops);

        HRESULT ( __export __stdcall *SetTypeIdldesc )(
            ICreateTypeInfo * This,
                       IDLDESC *pIdlDesc);

        HRESULT ( __export __stdcall *LayOut )(
            ICreateTypeInfo * This);

       
    } ICreateTypeInfoVtbl;

    struct ICreateTypeInfo
    {
        struct ICreateTypeInfoVtbl *lpVtbl;
    };
# 1152 "/usr/local/arm-wince-pe/include/oaidl.h" 3
HRESULT __export __stdcall ICreateTypeInfo_SetGuid_Proxy(
    ICreateTypeInfo * This,
               const GUID * const guid);


void ICreateTypeInfo_SetGuid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo_SetTypeFlags_Proxy(
    ICreateTypeInfo * This,
               UINT uTypeFlags);


void ICreateTypeInfo_SetTypeFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo_SetDocString_Proxy(
    ICreateTypeInfo * This,
               LPOLESTR pStrDoc);


void ICreateTypeInfo_SetDocString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo_SetHelpContext_Proxy(
    ICreateTypeInfo * This,
               DWORD dwHelpContext);


void ICreateTypeInfo_SetHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo_SetVersion_Proxy(
    ICreateTypeInfo * This,
               WORD wMajorVerNum,
               WORD wMinorVerNum);


void ICreateTypeInfo_SetVersion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo_AddRefTypeInfo_Proxy(
    ICreateTypeInfo * This,
               ITypeInfo *pTInfo,
               HREFTYPE *phRefType);


void ICreateTypeInfo_AddRefTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo_AddFuncDesc_Proxy(
    ICreateTypeInfo * This,
               UINT index,
               FUNCDESC *pFuncDesc);


void ICreateTypeInfo_AddFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo_AddImplType_Proxy(
    ICreateTypeInfo * This,
               UINT index,
               HREFTYPE hRefType);


void ICreateTypeInfo_AddImplType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo_SetImplTypeFlags_Proxy(
    ICreateTypeInfo * This,
               UINT index,
               INT implTypeFlags);


void ICreateTypeInfo_SetImplTypeFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo_SetAlignment_Proxy(
    ICreateTypeInfo * This,
               WORD cbAlignment);


void ICreateTypeInfo_SetAlignment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo_SetSchema_Proxy(
    ICreateTypeInfo * This,
               LPOLESTR pStrSchema);


void ICreateTypeInfo_SetSchema_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo_AddVarDesc_Proxy(
    ICreateTypeInfo * This,
               UINT index,
               VARDESC *pVarDesc);


void ICreateTypeInfo_AddVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo_SetFuncAndParamNames_Proxy(
    ICreateTypeInfo * This,
               UINT index,
                            LPOLESTR *rgszNames,
               UINT cNames);


void ICreateTypeInfo_SetFuncAndParamNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo_SetVarName_Proxy(
    ICreateTypeInfo * This,
               UINT index,
               LPOLESTR szName);


void ICreateTypeInfo_SetVarName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo_SetTypeDescAlias_Proxy(
    ICreateTypeInfo * This,
               TYPEDESC *pTDescAlias);


void ICreateTypeInfo_SetTypeDescAlias_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo_DefineFuncAsDllEntry_Proxy(
    ICreateTypeInfo * This,
               UINT index,
               LPOLESTR szDllName,
               LPOLESTR szProcName);


void ICreateTypeInfo_DefineFuncAsDllEntry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo_SetFuncDocString_Proxy(
    ICreateTypeInfo * This,
               UINT index,
               LPOLESTR szDocString);


void ICreateTypeInfo_SetFuncDocString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo_SetVarDocString_Proxy(
    ICreateTypeInfo * This,
               UINT index,
               LPOLESTR szDocString);


void ICreateTypeInfo_SetVarDocString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo_SetFuncHelpContext_Proxy(
    ICreateTypeInfo * This,
               UINT index,
               DWORD dwHelpContext);


void ICreateTypeInfo_SetFuncHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo_SetVarHelpContext_Proxy(
    ICreateTypeInfo * This,
               UINT index,
               DWORD dwHelpContext);


void ICreateTypeInfo_SetVarHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo_SetMops_Proxy(
    ICreateTypeInfo * This,
               UINT index,
               BSTR bstrMops);


void ICreateTypeInfo_SetMops_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo_SetTypeIdldesc_Proxy(
    ICreateTypeInfo * This,
               IDLDESC *pIdlDesc);


void ICreateTypeInfo_SetTypeIdldesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo_LayOut_Proxy(
    ICreateTypeInfo * This);


void ICreateTypeInfo_LayOut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 1458 "/usr/local/arm-wince-pe/include/oaidl.h" 3
typedef ICreateTypeInfo2 *LPCREATETYPEINFO2;


extern const IID IID_ICreateTypeInfo2;
# 1530 "/usr/local/arm-wince-pe/include/oaidl.h" 3
    typedef struct ICreateTypeInfo2Vtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            ICreateTypeInfo2 * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            ICreateTypeInfo2 * This);

        ULONG ( __export __stdcall *Release )(
            ICreateTypeInfo2 * This);

        HRESULT ( __export __stdcall *SetGuid )(
            ICreateTypeInfo2 * This,
                       const GUID * const guid);

        HRESULT ( __export __stdcall *SetTypeFlags )(
            ICreateTypeInfo2 * This,
                       UINT uTypeFlags);

        HRESULT ( __export __stdcall *SetDocString )(
            ICreateTypeInfo2 * This,
                       LPOLESTR pStrDoc);

        HRESULT ( __export __stdcall *SetHelpContext )(
            ICreateTypeInfo2 * This,
                       DWORD dwHelpContext);

        HRESULT ( __export __stdcall *SetVersion )(
            ICreateTypeInfo2 * This,
                       WORD wMajorVerNum,
                       WORD wMinorVerNum);

        HRESULT ( __export __stdcall *AddRefTypeInfo )(
            ICreateTypeInfo2 * This,
                       ITypeInfo *pTInfo,
                       HREFTYPE *phRefType);

        HRESULT ( __export __stdcall *AddFuncDesc )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       FUNCDESC *pFuncDesc);

        HRESULT ( __export __stdcall *AddImplType )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       HREFTYPE hRefType);

        HRESULT ( __export __stdcall *SetImplTypeFlags )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       INT implTypeFlags);

        HRESULT ( __export __stdcall *SetAlignment )(
            ICreateTypeInfo2 * This,
                       WORD cbAlignment);

        HRESULT ( __export __stdcall *SetSchema )(
            ICreateTypeInfo2 * This,
                       LPOLESTR pStrSchema);

        HRESULT ( __export __stdcall *AddVarDesc )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       VARDESC *pVarDesc);

        HRESULT ( __export __stdcall *SetFuncAndParamNames )(
            ICreateTypeInfo2 * This,
                       UINT index,
                                    LPOLESTR *rgszNames,
                       UINT cNames);

        HRESULT ( __export __stdcall *SetVarName )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       LPOLESTR szName);

        HRESULT ( __export __stdcall *SetTypeDescAlias )(
            ICreateTypeInfo2 * This,
                       TYPEDESC *pTDescAlias);

        HRESULT ( __export __stdcall *DefineFuncAsDllEntry )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       LPOLESTR szDllName,
                       LPOLESTR szProcName);

        HRESULT ( __export __stdcall *SetFuncDocString )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       LPOLESTR szDocString);

        HRESULT ( __export __stdcall *SetVarDocString )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       LPOLESTR szDocString);

        HRESULT ( __export __stdcall *SetFuncHelpContext )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       DWORD dwHelpContext);

        HRESULT ( __export __stdcall *SetVarHelpContext )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       DWORD dwHelpContext);

        HRESULT ( __export __stdcall *SetMops )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       BSTR bstrMops);

        HRESULT ( __export __stdcall *SetTypeIdldesc )(
            ICreateTypeInfo2 * This,
                       IDLDESC *pIdlDesc);

        HRESULT ( __export __stdcall *LayOut )(
            ICreateTypeInfo2 * This);

        HRESULT ( __export __stdcall *DeleteFuncDesc )(
            ICreateTypeInfo2 * This,
                       UINT index);

        HRESULT ( __export __stdcall *DeleteFuncDescByMemId )(
            ICreateTypeInfo2 * This,
                       MEMBERID memid,
                       INVOKEKIND invKind);

        HRESULT ( __export __stdcall *DeleteVarDesc )(
            ICreateTypeInfo2 * This,
                       UINT index);

        HRESULT ( __export __stdcall *DeleteVarDescByMemId )(
            ICreateTypeInfo2 * This,
                       MEMBERID memid);

        HRESULT ( __export __stdcall *DeleteImplType )(
            ICreateTypeInfo2 * This,
                       UINT index);

        HRESULT ( __export __stdcall *SetCustData )(
            ICreateTypeInfo2 * This,
                       const GUID * const guid,
                       VARIANT *pVarVal);

        HRESULT ( __export __stdcall *SetFuncCustData )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       const GUID * const guid,
                       VARIANT *pVarVal);

        HRESULT ( __export __stdcall *SetParamCustData )(
            ICreateTypeInfo2 * This,
                       UINT indexFunc,
                       UINT indexParam,
                       const GUID * const guid,
                       VARIANT *pVarVal);

        HRESULT ( __export __stdcall *SetVarCustData )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       const GUID * const guid,
                       VARIANT *pVarVal);

        HRESULT ( __export __stdcall *SetImplTypeCustData )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       const GUID * const guid,
                       VARIANT *pVarVal);

        HRESULT ( __export __stdcall *SetHelpStringContext )(
            ICreateTypeInfo2 * This,
                       ULONG dwHelpStringContext);

        HRESULT ( __export __stdcall *SetFuncHelpStringContext )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       ULONG dwHelpStringContext);

        HRESULT ( __export __stdcall *SetVarHelpStringContext )(
            ICreateTypeInfo2 * This,
                       UINT index,
                       ULONG dwHelpStringContext);

        HRESULT ( __export __stdcall *Invalidate )(
            ICreateTypeInfo2 * This);

        HRESULT ( __export __stdcall *SetName )(
            ICreateTypeInfo2 * This,
                       LPOLESTR szName);

       
    } ICreateTypeInfo2Vtbl;

    struct ICreateTypeInfo2
    {
        struct ICreateTypeInfo2Vtbl *lpVtbl;
    };
# 1869 "/usr/local/arm-wince-pe/include/oaidl.h" 3
HRESULT __export __stdcall ICreateTypeInfo2_DeleteFuncDesc_Proxy(
    ICreateTypeInfo2 * This,
               UINT index);


void ICreateTypeInfo2_DeleteFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo2_DeleteFuncDescByMemId_Proxy(
    ICreateTypeInfo2 * This,
               MEMBERID memid,
               INVOKEKIND invKind);


void ICreateTypeInfo2_DeleteFuncDescByMemId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo2_DeleteVarDesc_Proxy(
    ICreateTypeInfo2 * This,
               UINT index);


void ICreateTypeInfo2_DeleteVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo2_DeleteVarDescByMemId_Proxy(
    ICreateTypeInfo2 * This,
               MEMBERID memid);


void ICreateTypeInfo2_DeleteVarDescByMemId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo2_DeleteImplType_Proxy(
    ICreateTypeInfo2 * This,
               UINT index);


void ICreateTypeInfo2_DeleteImplType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo2_SetCustData_Proxy(
    ICreateTypeInfo2 * This,
               const GUID * const guid,
               VARIANT *pVarVal);


void ICreateTypeInfo2_SetCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo2_SetFuncCustData_Proxy(
    ICreateTypeInfo2 * This,
               UINT index,
               const GUID * const guid,
               VARIANT *pVarVal);


void ICreateTypeInfo2_SetFuncCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo2_SetParamCustData_Proxy(
    ICreateTypeInfo2 * This,
               UINT indexFunc,
               UINT indexParam,
               const GUID * const guid,
               VARIANT *pVarVal);


void ICreateTypeInfo2_SetParamCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo2_SetVarCustData_Proxy(
    ICreateTypeInfo2 * This,
               UINT index,
               const GUID * const guid,
               VARIANT *pVarVal);


void ICreateTypeInfo2_SetVarCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo2_SetImplTypeCustData_Proxy(
    ICreateTypeInfo2 * This,
               UINT index,
               const GUID * const guid,
               VARIANT *pVarVal);


void ICreateTypeInfo2_SetImplTypeCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo2_SetHelpStringContext_Proxy(
    ICreateTypeInfo2 * This,
               ULONG dwHelpStringContext);


void ICreateTypeInfo2_SetHelpStringContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo2_SetFuncHelpStringContext_Proxy(
    ICreateTypeInfo2 * This,
               UINT index,
               ULONG dwHelpStringContext);


void ICreateTypeInfo2_SetFuncHelpStringContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo2_SetVarHelpStringContext_Proxy(
    ICreateTypeInfo2 * This,
               UINT index,
               ULONG dwHelpStringContext);


void ICreateTypeInfo2_SetVarHelpStringContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo2_Invalidate_Proxy(
    ICreateTypeInfo2 * This);


void ICreateTypeInfo2_Invalidate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeInfo2_SetName_Proxy(
    ICreateTypeInfo2 * This,
               LPOLESTR szName);


void ICreateTypeInfo2_SetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2076 "/usr/local/arm-wince-pe/include/oaidl.h" 3
typedef ICreateTypeLib *LPCREATETYPELIB;


extern const IID IID_ICreateTypeLib;
# 2123 "/usr/local/arm-wince-pe/include/oaidl.h" 3
    typedef struct ICreateTypeLibVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            ICreateTypeLib * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            ICreateTypeLib * This);

        ULONG ( __export __stdcall *Release )(
            ICreateTypeLib * This);

        HRESULT ( __export __stdcall *CreateTypeInfo )(
            ICreateTypeLib * This,
                       LPOLESTR szName,
                       TYPEKIND tkind,
                        ICreateTypeInfo * *ppCTInfo);

        HRESULT ( __export __stdcall *SetName )(
            ICreateTypeLib * This,
                       LPOLESTR szName);

        HRESULT ( __export __stdcall *SetVersion )(
            ICreateTypeLib * This,
                       WORD wMajorVerNum,
                       WORD wMinorVerNum);

        HRESULT ( __export __stdcall *SetGuid )(
            ICreateTypeLib * This,
                       const GUID * const guid);

        HRESULT ( __export __stdcall *SetDocString )(
            ICreateTypeLib * This,
                       LPOLESTR szDoc);

        HRESULT ( __export __stdcall *SetHelpFileName )(
            ICreateTypeLib * This,
                       LPOLESTR szHelpFileName);

        HRESULT ( __export __stdcall *SetHelpContext )(
            ICreateTypeLib * This,
                       DWORD dwHelpContext);

        HRESULT ( __export __stdcall *SetLcid )(
            ICreateTypeLib * This,
                       LCID lcid);

        HRESULT ( __export __stdcall *SetLibFlags )(
            ICreateTypeLib * This,
                       UINT uLibFlags);

        HRESULT ( __export __stdcall *SaveAllChanges )(
            ICreateTypeLib * This);

       
    } ICreateTypeLibVtbl;

    struct ICreateTypeLib
    {
        struct ICreateTypeLibVtbl *lpVtbl;
    };
# 2240 "/usr/local/arm-wince-pe/include/oaidl.h" 3
HRESULT __export __stdcall ICreateTypeLib_CreateTypeInfo_Proxy(
    ICreateTypeLib * This,
               LPOLESTR szName,
               TYPEKIND tkind,
                ICreateTypeInfo * *ppCTInfo);


void ICreateTypeLib_CreateTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeLib_SetName_Proxy(
    ICreateTypeLib * This,
               LPOLESTR szName);


void ICreateTypeLib_SetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeLib_SetVersion_Proxy(
    ICreateTypeLib * This,
               WORD wMajorVerNum,
               WORD wMinorVerNum);


void ICreateTypeLib_SetVersion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeLib_SetGuid_Proxy(
    ICreateTypeLib * This,
               const GUID * const guid);


void ICreateTypeLib_SetGuid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeLib_SetDocString_Proxy(
    ICreateTypeLib * This,
               LPOLESTR szDoc);


void ICreateTypeLib_SetDocString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeLib_SetHelpFileName_Proxy(
    ICreateTypeLib * This,
               LPOLESTR szHelpFileName);


void ICreateTypeLib_SetHelpFileName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeLib_SetHelpContext_Proxy(
    ICreateTypeLib * This,
               DWORD dwHelpContext);


void ICreateTypeLib_SetHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeLib_SetLcid_Proxy(
    ICreateTypeLib * This,
               LCID lcid);


void ICreateTypeLib_SetLcid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeLib_SetLibFlags_Proxy(
    ICreateTypeLib * This,
               UINT uLibFlags);


void ICreateTypeLib_SetLibFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeLib_SaveAllChanges_Proxy(
    ICreateTypeLib * This);


void ICreateTypeLib_SaveAllChanges_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2377 "/usr/local/arm-wince-pe/include/oaidl.h" 3
typedef ICreateTypeLib2 *LPCREATETYPELIB2;


extern const IID IID_ICreateTypeLib2;
# 2405 "/usr/local/arm-wince-pe/include/oaidl.h" 3
    typedef struct ICreateTypeLib2Vtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            ICreateTypeLib2 * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            ICreateTypeLib2 * This);

        ULONG ( __export __stdcall *Release )(
            ICreateTypeLib2 * This);

        HRESULT ( __export __stdcall *CreateTypeInfo )(
            ICreateTypeLib2 * This,
                       LPOLESTR szName,
                       TYPEKIND tkind,
                        ICreateTypeInfo * *ppCTInfo);

        HRESULT ( __export __stdcall *SetName )(
            ICreateTypeLib2 * This,
                       LPOLESTR szName);

        HRESULT ( __export __stdcall *SetVersion )(
            ICreateTypeLib2 * This,
                       WORD wMajorVerNum,
                       WORD wMinorVerNum);

        HRESULT ( __export __stdcall *SetGuid )(
            ICreateTypeLib2 * This,
                       const GUID * const guid);

        HRESULT ( __export __stdcall *SetDocString )(
            ICreateTypeLib2 * This,
                       LPOLESTR szDoc);

        HRESULT ( __export __stdcall *SetHelpFileName )(
            ICreateTypeLib2 * This,
                       LPOLESTR szHelpFileName);

        HRESULT ( __export __stdcall *SetHelpContext )(
            ICreateTypeLib2 * This,
                       DWORD dwHelpContext);

        HRESULT ( __export __stdcall *SetLcid )(
            ICreateTypeLib2 * This,
                       LCID lcid);

        HRESULT ( __export __stdcall *SetLibFlags )(
            ICreateTypeLib2 * This,
                       UINT uLibFlags);

        HRESULT ( __export __stdcall *SaveAllChanges )(
            ICreateTypeLib2 * This);

        HRESULT ( __export __stdcall *DeleteTypeInfo )(
            ICreateTypeLib2 * This,
                       LPOLESTR szName);

        HRESULT ( __export __stdcall *SetCustData )(
            ICreateTypeLib2 * This,
                       const GUID * const guid,
                       VARIANT *pVarVal);

        HRESULT ( __export __stdcall *SetHelpStringContext )(
            ICreateTypeLib2 * This,
                       ULONG dwHelpStringContext);

        HRESULT ( __export __stdcall *SetHelpStringDll )(
            ICreateTypeLib2 * This,
                       LPOLESTR szFileName);

       
    } ICreateTypeLib2Vtbl;

    struct ICreateTypeLib2
    {
        struct ICreateTypeLib2Vtbl *lpVtbl;
    };
# 2552 "/usr/local/arm-wince-pe/include/oaidl.h" 3
HRESULT __export __stdcall ICreateTypeLib2_DeleteTypeInfo_Proxy(
    ICreateTypeLib2 * This,
               LPOLESTR szName);


void ICreateTypeLib2_DeleteTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeLib2_SetCustData_Proxy(
    ICreateTypeLib2 * This,
               const GUID * const guid,
               VARIANT *pVarVal);


void ICreateTypeLib2_SetCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeLib2_SetHelpStringContext_Proxy(
    ICreateTypeLib2 * This,
               ULONG dwHelpStringContext);


void ICreateTypeLib2_SetHelpStringContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateTypeLib2_SetHelpStringDll_Proxy(
    ICreateTypeLib2 * This,
               LPOLESTR szFileName);


void ICreateTypeLib2_SetHelpStringDll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2616 "/usr/local/arm-wince-pe/include/oaidl.h" 3
typedef IDispatch *LPDISPATCH;
# 2650 "/usr/local/arm-wince-pe/include/oaidl.h" 3
extern const IID IID_IDispatch;
# 2687 "/usr/local/arm-wince-pe/include/oaidl.h" 3
    typedef struct IDispatchVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IDispatch * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IDispatch * This);

        ULONG ( __export __stdcall *Release )(
            IDispatch * This);

        HRESULT ( __export __stdcall *GetTypeInfoCount )(
            IDispatch * This,
                        UINT *pctinfo);

        HRESULT ( __export __stdcall *GetTypeInfo )(
            IDispatch * This,
                       UINT iTInfo,
                       LCID lcid,
                        ITypeInfo * *ppTInfo);

        HRESULT ( __export __stdcall *GetIDsOfNames )(
            IDispatch * This,
                       const IID * const riid,
                                LPOLESTR *rgszNames,
                       UINT cNames,
                       LCID lcid,
                                 DISPID *rgDispId);

                      HRESULT ( __export __stdcall *Invoke )(
            IDispatch * This,
                       DISPID dispIdMember,
                       const IID * const riid,
                       LCID lcid,
                       WORD wFlags,
                            DISPPARAMS *pDispParams,
                        VARIANT *pVarResult,
                        EXCEPINFO *pExcepInfo,
                        UINT *puArgErr);

       
    } IDispatchVtbl;

    struct IDispatch
    {
        struct IDispatchVtbl *lpVtbl;
    };
# 2773 "/usr/local/arm-wince-pe/include/oaidl.h" 3
HRESULT __export __stdcall IDispatch_GetTypeInfoCount_Proxy(
    IDispatch * This,
                UINT *pctinfo);


void IDispatch_GetTypeInfoCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IDispatch_GetTypeInfo_Proxy(
    IDispatch * This,
               UINT iTInfo,
               LCID lcid,
                ITypeInfo * *ppTInfo);


void IDispatch_GetTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IDispatch_GetIDsOfNames_Proxy(
    IDispatch * This,
               const IID * const riid,
                        LPOLESTR *rgszNames,
               UINT cNames,
               LCID lcid,
                         DISPID *rgDispId);


void IDispatch_GetIDsOfNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall IDispatch_RemoteInvoke_Proxy(
    IDispatch * This,
               DISPID dispIdMember,
               const IID * const riid,
               LCID lcid,
               DWORD dwFlags,
               DISPPARAMS *pDispParams,
                VARIANT *pVarResult,
                EXCEPINFO *pExcepInfo,
                UINT *pArgErr,
               UINT cVarRef,
                        UINT *rgVarRefIdx,
                             VARIANTARG *rgVarRef);


void IDispatch_RemoteInvoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2852 "/usr/local/arm-wince-pe/include/oaidl.h" 3
typedef IEnumVARIANT *LPENUMVARIANT;


extern const IID IID_IEnumVARIANT;
# 2880 "/usr/local/arm-wince-pe/include/oaidl.h" 3
    typedef struct IEnumVARIANTVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IEnumVARIANT * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IEnumVARIANT * This);

        ULONG ( __export __stdcall *Release )(
            IEnumVARIANT * This);

                      HRESULT ( __export __stdcall *Next )(
            IEnumVARIANT * This,
                       ULONG celt,
                                            VARIANT *rgVar,
                        ULONG *pCeltFetched);

        HRESULT ( __export __stdcall *Skip )(
            IEnumVARIANT * This,
                       ULONG celt);

        HRESULT ( __export __stdcall *Reset )(
            IEnumVARIANT * This);

        HRESULT ( __export __stdcall *Clone )(
            IEnumVARIANT * This,
                        IEnumVARIANT * *ppEnum);

       
    } IEnumVARIANTVtbl;

    struct IEnumVARIANT
    {
        struct IEnumVARIANTVtbl *lpVtbl;
    };
# 2954 "/usr/local/arm-wince-pe/include/oaidl.h" 3
                HRESULT __export __stdcall IEnumVARIANT_RemoteNext_Proxy(
    IEnumVARIANT * This,
               ULONG celt,
                                    VARIANT *rgVar,
                ULONG *pCeltFetched);


void IEnumVARIANT_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumVARIANT_Skip_Proxy(
    IEnumVARIANT * This,
               ULONG celt);


void IEnumVARIANT_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumVARIANT_Reset_Proxy(
    IEnumVARIANT * This);


void IEnumVARIANT_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumVARIANT_Clone_Proxy(
    IEnumVARIANT * This,
                IEnumVARIANT * *ppEnum);


void IEnumVARIANT_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 3018 "/usr/local/arm-wince-pe/include/oaidl.h" 3
typedef ITypeComp *LPTYPECOMP;

typedef
enum tagDESCKIND
    { DESCKIND_NONE = 0,
        DESCKIND_FUNCDESC = DESCKIND_NONE + 1,
        DESCKIND_VARDESC = DESCKIND_FUNCDESC + 1,
        DESCKIND_TYPECOMP = DESCKIND_VARDESC + 1,
        DESCKIND_IMPLICITAPPOBJ = DESCKIND_TYPECOMP + 1,
        DESCKIND_MAX = DESCKIND_IMPLICITAPPOBJ + 1
    } DESCKIND;

typedef union tagBINDPTR
    {
    FUNCDESC *lpfuncdesc;
    VARDESC *lpvardesc;
    ITypeComp *lptcomp;
    } BINDPTR;

typedef union tagBINDPTR *LPBINDPTR;


extern const IID IID_ITypeComp;
# 3066 "/usr/local/arm-wince-pe/include/oaidl.h" 3
    typedef struct ITypeCompVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            ITypeComp * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            ITypeComp * This);

        ULONG ( __export __stdcall *Release )(
            ITypeComp * This);

                      HRESULT ( __export __stdcall *Bind )(
            ITypeComp * This,
                       LPOLESTR szName,
                       ULONG lHashVal,
                       WORD wFlags,
                        ITypeInfo * *ppTInfo,
                        DESCKIND *pDescKind,
                        BINDPTR *pBindPtr);

                      HRESULT ( __export __stdcall *BindType )(
            ITypeComp * This,
                       LPOLESTR szName,
                       ULONG lHashVal,
                        ITypeInfo * *ppTInfo,
                        ITypeComp * *ppTComp);

       
    } ITypeCompVtbl;

    struct ITypeComp
    {
        struct ITypeCompVtbl *lpVtbl;
    };
# 3133 "/usr/local/arm-wince-pe/include/oaidl.h" 3
                HRESULT __export __stdcall ITypeComp_RemoteBind_Proxy(
    ITypeComp * This,
               LPOLESTR szName,
               ULONG lHashVal,
               WORD wFlags,
                ITypeInfo * *ppTInfo,
                DESCKIND *pDescKind,
                LPFUNCDESC *ppFuncDesc,
                LPVARDESC *ppVarDesc,
                ITypeComp * *ppTypeComp,
                CLEANLOCALSTORAGE *pDummy);


void ITypeComp_RemoteBind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall ITypeComp_RemoteBindType_Proxy(
    ITypeComp * This,
               LPOLESTR szName,
               ULONG lHashVal,
                ITypeInfo * *ppTInfo);


void ITypeComp_RemoteBindType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 3182 "/usr/local/arm-wince-pe/include/oaidl.h" 3
typedef ITypeInfo *LPTYPEINFO;


extern const IID IID_ITypeInfo;
# 3284 "/usr/local/arm-wince-pe/include/oaidl.h" 3
    typedef struct ITypeInfoVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            ITypeInfo * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            ITypeInfo * This);

        ULONG ( __export __stdcall *Release )(
            ITypeInfo * This);

                      HRESULT ( __export __stdcall *GetTypeAttr )(
            ITypeInfo * This,
                        TYPEATTR * *ppTypeAttr);

        HRESULT ( __export __stdcall *GetTypeComp )(
            ITypeInfo * This,
                        ITypeComp * *ppTComp);

                      HRESULT ( __export __stdcall *GetFuncDesc )(
            ITypeInfo * This,
                       UINT index,
                        FUNCDESC * *ppFuncDesc);

                      HRESULT ( __export __stdcall *GetVarDesc )(
            ITypeInfo * This,
                       UINT index,
                        VARDESC * *ppVarDesc);

                      HRESULT ( __export __stdcall *GetNames )(
            ITypeInfo * This,
                       MEMBERID memid,
                                            BSTR *rgBstrNames,
                       UINT cMaxNames,
                        UINT *pcNames);

        HRESULT ( __export __stdcall *GetRefTypeOfImplType )(
            ITypeInfo * This,
                       UINT index,
                        HREFTYPE *pRefType);

        HRESULT ( __export __stdcall *GetImplTypeFlags )(
            ITypeInfo * This,
                       UINT index,
                        INT *pImplTypeFlags);

                      HRESULT ( __export __stdcall *GetIDsOfNames )(
            ITypeInfo * This,
                                LPOLESTR *rgszNames,
                       UINT cNames,
                                 MEMBERID *pMemId);

                      HRESULT ( __export __stdcall *Invoke )(
            ITypeInfo * This,
                       PVOID pvInstance,
                       MEMBERID memid,
                       WORD wFlags,
                            DISPPARAMS *pDispParams,
                        VARIANT *pVarResult,
                        EXCEPINFO *pExcepInfo,
                        UINT *puArgErr);

                      HRESULT ( __export __stdcall *GetDocumentation )(
            ITypeInfo * This,
                       MEMBERID memid,
                        BSTR *pBstrName,
                        BSTR *pBstrDocString,
                        DWORD *pdwHelpContext,
                        BSTR *pBstrHelpFile);

                      HRESULT ( __export __stdcall *GetDllEntry )(
            ITypeInfo * This,
                       MEMBERID memid,
                       INVOKEKIND invKind,
                        BSTR *pBstrDllName,
                        BSTR *pBstrName,
                        WORD *pwOrdinal);

        HRESULT ( __export __stdcall *GetRefTypeInfo )(
            ITypeInfo * This,
                       HREFTYPE hRefType,
                        ITypeInfo * *ppTInfo);

                      HRESULT ( __export __stdcall *AddressOfMember )(
            ITypeInfo * This,
                       MEMBERID memid,
                       INVOKEKIND invKind,
                        PVOID *ppv);

                      HRESULT ( __export __stdcall *CreateInstance )(
            ITypeInfo * This,
                       IUnknown *pUnkOuter,
                       const IID * const riid,
                                PVOID *ppvObj);

        HRESULT ( __export __stdcall *GetMops )(
            ITypeInfo * This,
                       MEMBERID memid,
                        BSTR *pBstrMops);

                      HRESULT ( __export __stdcall *GetContainingTypeLib )(
            ITypeInfo * This,
                        ITypeLib * *ppTLib,
                        UINT *pIndex);

                      void ( __export __stdcall *ReleaseTypeAttr )(
            ITypeInfo * This,
                       TYPEATTR *pTypeAttr);

                      void ( __export __stdcall *ReleaseFuncDesc )(
            ITypeInfo * This,
                       FUNCDESC *pFuncDesc);

                      void ( __export __stdcall *ReleaseVarDesc )(
            ITypeInfo * This,
                       VARDESC *pVarDesc);

       
    } ITypeInfoVtbl;

    struct ITypeInfo
    {
        struct ITypeInfoVtbl *lpVtbl;
    };
# 3492 "/usr/local/arm-wince-pe/include/oaidl.h" 3
                HRESULT __export __stdcall ITypeInfo_RemoteGetTypeAttr_Proxy(
    ITypeInfo * This,
                LPTYPEATTR *ppTypeAttr,
                CLEANLOCALSTORAGE *pDummy);


void ITypeInfo_RemoteGetTypeAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeInfo_GetTypeComp_Proxy(
    ITypeInfo * This,
                ITypeComp * *ppTComp);


void ITypeInfo_GetTypeComp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall ITypeInfo_RemoteGetFuncDesc_Proxy(
    ITypeInfo * This,
               UINT index,
                LPFUNCDESC *ppFuncDesc,
                CLEANLOCALSTORAGE *pDummy);


void ITypeInfo_RemoteGetFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall ITypeInfo_RemoteGetVarDesc_Proxy(
    ITypeInfo * This,
               UINT index,
                LPVARDESC *ppVarDesc,
                CLEANLOCALSTORAGE *pDummy);


void ITypeInfo_RemoteGetVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall ITypeInfo_RemoteGetNames_Proxy(
    ITypeInfo * This,
               MEMBERID memid,
                                    BSTR *rgBstrNames,
               UINT cMaxNames,
                UINT *pcNames);


void ITypeInfo_RemoteGetNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeInfo_GetRefTypeOfImplType_Proxy(
    ITypeInfo * This,
               UINT index,
                HREFTYPE *pRefType);


void ITypeInfo_GetRefTypeOfImplType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeInfo_GetImplTypeFlags_Proxy(
    ITypeInfo * This,
               UINT index,
                INT *pImplTypeFlags);


void ITypeInfo_GetImplTypeFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall ITypeInfo_LocalGetIDsOfNames_Proxy(
    ITypeInfo * This);


void ITypeInfo_LocalGetIDsOfNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall ITypeInfo_LocalInvoke_Proxy(
    ITypeInfo * This);


void ITypeInfo_LocalInvoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall ITypeInfo_RemoteGetDocumentation_Proxy(
    ITypeInfo * This,
               MEMBERID memid,
               DWORD refPtrFlags,
                BSTR *pBstrName,
                BSTR *pBstrDocString,
                DWORD *pdwHelpContext,
                BSTR *pBstrHelpFile);


void ITypeInfo_RemoteGetDocumentation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall ITypeInfo_RemoteGetDllEntry_Proxy(
    ITypeInfo * This,
               MEMBERID memid,
               INVOKEKIND invKind,
               DWORD refPtrFlags,
                BSTR *pBstrDllName,
                BSTR *pBstrName,
                WORD *pwOrdinal);


void ITypeInfo_RemoteGetDllEntry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeInfo_GetRefTypeInfo_Proxy(
    ITypeInfo * This,
               HREFTYPE hRefType,
                ITypeInfo * *ppTInfo);


void ITypeInfo_GetRefTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall ITypeInfo_LocalAddressOfMember_Proxy(
    ITypeInfo * This);


void ITypeInfo_LocalAddressOfMember_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall ITypeInfo_RemoteCreateInstance_Proxy(
    ITypeInfo * This,
               const IID * const riid,
                        IUnknown * *ppvObj);


void ITypeInfo_RemoteCreateInstance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeInfo_GetMops_Proxy(
    ITypeInfo * This,
               MEMBERID memid,
                BSTR *pBstrMops);


void ITypeInfo_GetMops_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall ITypeInfo_RemoteGetContainingTypeLib_Proxy(
    ITypeInfo * This,
                ITypeLib * *ppTLib,
                UINT *pIndex);


void ITypeInfo_RemoteGetContainingTypeLib_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall ITypeInfo_LocalReleaseTypeAttr_Proxy(
    ITypeInfo * This);


void ITypeInfo_LocalReleaseTypeAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall ITypeInfo_LocalReleaseFuncDesc_Proxy(
    ITypeInfo * This);


void ITypeInfo_LocalReleaseFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall ITypeInfo_LocalReleaseVarDesc_Proxy(
    ITypeInfo * This);


void ITypeInfo_LocalReleaseVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 3753 "/usr/local/arm-wince-pe/include/oaidl.h" 3
typedef ITypeInfo2 *LPTYPEINFO2;


extern const IID IID_ITypeInfo2;
# 3835 "/usr/local/arm-wince-pe/include/oaidl.h" 3
    typedef struct ITypeInfo2Vtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            ITypeInfo2 * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            ITypeInfo2 * This);

        ULONG ( __export __stdcall *Release )(
            ITypeInfo2 * This);

                      HRESULT ( __export __stdcall *GetTypeAttr )(
            ITypeInfo2 * This,
                        TYPEATTR * *ppTypeAttr);

        HRESULT ( __export __stdcall *GetTypeComp )(
            ITypeInfo2 * This,
                        ITypeComp * *ppTComp);

                      HRESULT ( __export __stdcall *GetFuncDesc )(
            ITypeInfo2 * This,
                       UINT index,
                        FUNCDESC * *ppFuncDesc);

                      HRESULT ( __export __stdcall *GetVarDesc )(
            ITypeInfo2 * This,
                       UINT index,
                        VARDESC * *ppVarDesc);

                      HRESULT ( __export __stdcall *GetNames )(
            ITypeInfo2 * This,
                       MEMBERID memid,
                                            BSTR *rgBstrNames,
                       UINT cMaxNames,
                        UINT *pcNames);

        HRESULT ( __export __stdcall *GetRefTypeOfImplType )(
            ITypeInfo2 * This,
                       UINT index,
                        HREFTYPE *pRefType);

        HRESULT ( __export __stdcall *GetImplTypeFlags )(
            ITypeInfo2 * This,
                       UINT index,
                        INT *pImplTypeFlags);

                      HRESULT ( __export __stdcall *GetIDsOfNames )(
            ITypeInfo2 * This,
                                LPOLESTR *rgszNames,
                       UINT cNames,
                                 MEMBERID *pMemId);

                      HRESULT ( __export __stdcall *Invoke )(
            ITypeInfo2 * This,
                       PVOID pvInstance,
                       MEMBERID memid,
                       WORD wFlags,
                            DISPPARAMS *pDispParams,
                        VARIANT *pVarResult,
                        EXCEPINFO *pExcepInfo,
                        UINT *puArgErr);

                      HRESULT ( __export __stdcall *GetDocumentation )(
            ITypeInfo2 * This,
                       MEMBERID memid,
                        BSTR *pBstrName,
                        BSTR *pBstrDocString,
                        DWORD *pdwHelpContext,
                        BSTR *pBstrHelpFile);

                      HRESULT ( __export __stdcall *GetDllEntry )(
            ITypeInfo2 * This,
                       MEMBERID memid,
                       INVOKEKIND invKind,
                        BSTR *pBstrDllName,
                        BSTR *pBstrName,
                        WORD *pwOrdinal);

        HRESULT ( __export __stdcall *GetRefTypeInfo )(
            ITypeInfo2 * This,
                       HREFTYPE hRefType,
                        ITypeInfo * *ppTInfo);

                      HRESULT ( __export __stdcall *AddressOfMember )(
            ITypeInfo2 * This,
                       MEMBERID memid,
                       INVOKEKIND invKind,
                        PVOID *ppv);

                      HRESULT ( __export __stdcall *CreateInstance )(
            ITypeInfo2 * This,
                       IUnknown *pUnkOuter,
                       const IID * const riid,
                                PVOID *ppvObj);

        HRESULT ( __export __stdcall *GetMops )(
            ITypeInfo2 * This,
                       MEMBERID memid,
                        BSTR *pBstrMops);

                      HRESULT ( __export __stdcall *GetContainingTypeLib )(
            ITypeInfo2 * This,
                        ITypeLib * *ppTLib,
                        UINT *pIndex);

                      void ( __export __stdcall *ReleaseTypeAttr )(
            ITypeInfo2 * This,
                       TYPEATTR *pTypeAttr);

                      void ( __export __stdcall *ReleaseFuncDesc )(
            ITypeInfo2 * This,
                       FUNCDESC *pFuncDesc);

                      void ( __export __stdcall *ReleaseVarDesc )(
            ITypeInfo2 * This,
                       VARDESC *pVarDesc);

        HRESULT ( __export __stdcall *GetTypeKind )(
            ITypeInfo2 * This,
                        TYPEKIND *pTypeKind);

        HRESULT ( __export __stdcall *GetTypeFlags )(
            ITypeInfo2 * This,
                        ULONG *pTypeFlags);

        HRESULT ( __export __stdcall *GetFuncIndexOfMemId )(
            ITypeInfo2 * This,
                       MEMBERID memid,
                       INVOKEKIND invKind,
                        UINT *pFuncIndex);

        HRESULT ( __export __stdcall *GetVarIndexOfMemId )(
            ITypeInfo2 * This,
                       MEMBERID memid,
                        UINT *pVarIndex);

        HRESULT ( __export __stdcall *GetCustData )(
            ITypeInfo2 * This,
                       const GUID * const guid,
                        VARIANT *pVarVal);

        HRESULT ( __export __stdcall *GetFuncCustData )(
            ITypeInfo2 * This,
                       UINT index,
                       const GUID * const guid,
                        VARIANT *pVarVal);

        HRESULT ( __export __stdcall *GetParamCustData )(
            ITypeInfo2 * This,
                       UINT indexFunc,
                       UINT indexParam,
                       const GUID * const guid,
                        VARIANT *pVarVal);

        HRESULT ( __export __stdcall *GetVarCustData )(
            ITypeInfo2 * This,
                       UINT index,
                       const GUID * const guid,
                        VARIANT *pVarVal);

        HRESULT ( __export __stdcall *GetImplTypeCustData )(
            ITypeInfo2 * This,
                       UINT index,
                       const GUID * const guid,
                        VARIANT *pVarVal);

                      HRESULT ( __export __stdcall *GetDocumentation2 )(
            ITypeInfo2 * This,
                       MEMBERID memid,
                       LCID lcid,
                        BSTR *pbstrHelpString,
                        DWORD *pdwHelpStringContext,
                        BSTR *pbstrHelpStringDll);

        HRESULT ( __export __stdcall *GetAllCustData )(
            ITypeInfo2 * This,
                        CUSTDATA *pCustData);

        HRESULT ( __export __stdcall *GetAllFuncCustData )(
            ITypeInfo2 * This,
                       UINT index,
                        CUSTDATA *pCustData);

        HRESULT ( __export __stdcall *GetAllParamCustData )(
            ITypeInfo2 * This,
                       UINT indexFunc,
                       UINT indexParam,
                        CUSTDATA *pCustData);

        HRESULT ( __export __stdcall *GetAllVarCustData )(
            ITypeInfo2 * This,
                       UINT index,
                        CUSTDATA *pCustData);

        HRESULT ( __export __stdcall *GetAllImplTypeCustData )(
            ITypeInfo2 * This,
                       UINT index,
                        CUSTDATA *pCustData);

       
    } ITypeInfo2Vtbl;

    struct ITypeInfo2
    {
        struct ITypeInfo2Vtbl *lpVtbl;
    };
# 4171 "/usr/local/arm-wince-pe/include/oaidl.h" 3
HRESULT __export __stdcall ITypeInfo2_GetTypeKind_Proxy(
    ITypeInfo2 * This,
                TYPEKIND *pTypeKind);


void ITypeInfo2_GetTypeKind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeInfo2_GetTypeFlags_Proxy(
    ITypeInfo2 * This,
                ULONG *pTypeFlags);


void ITypeInfo2_GetTypeFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeInfo2_GetFuncIndexOfMemId_Proxy(
    ITypeInfo2 * This,
               MEMBERID memid,
               INVOKEKIND invKind,
                UINT *pFuncIndex);


void ITypeInfo2_GetFuncIndexOfMemId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeInfo2_GetVarIndexOfMemId_Proxy(
    ITypeInfo2 * This,
               MEMBERID memid,
                UINT *pVarIndex);


void ITypeInfo2_GetVarIndexOfMemId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeInfo2_GetCustData_Proxy(
    ITypeInfo2 * This,
               const GUID * const guid,
                VARIANT *pVarVal);


void ITypeInfo2_GetCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeInfo2_GetFuncCustData_Proxy(
    ITypeInfo2 * This,
               UINT index,
               const GUID * const guid,
                VARIANT *pVarVal);


void ITypeInfo2_GetFuncCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeInfo2_GetParamCustData_Proxy(
    ITypeInfo2 * This,
               UINT indexFunc,
               UINT indexParam,
               const GUID * const guid,
                VARIANT *pVarVal);


void ITypeInfo2_GetParamCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeInfo2_GetVarCustData_Proxy(
    ITypeInfo2 * This,
               UINT index,
               const GUID * const guid,
                VARIANT *pVarVal);


void ITypeInfo2_GetVarCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeInfo2_GetImplTypeCustData_Proxy(
    ITypeInfo2 * This,
               UINT index,
               const GUID * const guid,
                VARIANT *pVarVal);


void ITypeInfo2_GetImplTypeCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall ITypeInfo2_RemoteGetDocumentation2_Proxy(
    ITypeInfo2 * This,
               MEMBERID memid,
               LCID lcid,
               DWORD refPtrFlags,
                BSTR *pbstrHelpString,
                DWORD *pdwHelpStringContext,
                BSTR *pbstrHelpStringDll);


void ITypeInfo2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeInfo2_GetAllCustData_Proxy(
    ITypeInfo2 * This,
                CUSTDATA *pCustData);


void ITypeInfo2_GetAllCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeInfo2_GetAllFuncCustData_Proxy(
    ITypeInfo2 * This,
               UINT index,
                CUSTDATA *pCustData);


void ITypeInfo2_GetAllFuncCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeInfo2_GetAllParamCustData_Proxy(
    ITypeInfo2 * This,
               UINT indexFunc,
               UINT indexParam,
                CUSTDATA *pCustData);


void ITypeInfo2_GetAllParamCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeInfo2_GetAllVarCustData_Proxy(
    ITypeInfo2 * This,
               UINT index,
                CUSTDATA *pCustData);


void ITypeInfo2_GetAllVarCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeInfo2_GetAllImplTypeCustData_Proxy(
    ITypeInfo2 * This,
               UINT index,
                CUSTDATA *pCustData);


void ITypeInfo2_GetAllImplTypeCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 4389 "/usr/local/arm-wince-pe/include/oaidl.h" 3
typedef
enum tagSYSKIND
    { SYS_WIN16 = 0,
        SYS_WIN32 = SYS_WIN16 + 1,
        SYS_MAC = SYS_WIN32 + 1
    } SYSKIND;

typedef
enum tagLIBFLAGS
    { LIBFLAG_FRESTRICTED = 0x1,
        LIBFLAG_FCONTROL = 0x2,
        LIBFLAG_FHIDDEN = 0x4,
        LIBFLAG_FHASDISKIMAGE = 0x8
    } LIBFLAGS;

typedef ITypeLib *LPTYPELIB;

typedef struct tagTLIBATTR
    {
    GUID guid;
    LCID lcid;
    SYSKIND syskind;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    WORD wLibFlags;
    } TLIBATTR;

typedef struct tagTLIBATTR *LPTLIBATTR;


extern const IID IID_ITypeLib;
# 4473 "/usr/local/arm-wince-pe/include/oaidl.h" 3
    typedef struct ITypeLibVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            ITypeLib * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            ITypeLib * This);

        ULONG ( __export __stdcall *Release )(
            ITypeLib * This);

                      UINT ( __export __stdcall *GetTypeInfoCount )(
            ITypeLib * This);

        HRESULT ( __export __stdcall *GetTypeInfo )(
            ITypeLib * This,
                       UINT index,
                        ITypeInfo * *ppTInfo);

        HRESULT ( __export __stdcall *GetTypeInfoType )(
            ITypeLib * This,
                       UINT index,
                        TYPEKIND *pTKind);

        HRESULT ( __export __stdcall *GetTypeInfoOfGuid )(
            ITypeLib * This,
                       const GUID * const guid,
                        ITypeInfo * *ppTinfo);

                      HRESULT ( __export __stdcall *GetLibAttr )(
            ITypeLib * This,
                        TLIBATTR * *ppTLibAttr);

        HRESULT ( __export __stdcall *GetTypeComp )(
            ITypeLib * This,
                        ITypeComp * *ppTComp);

                      HRESULT ( __export __stdcall *GetDocumentation )(
            ITypeLib * This,
                       INT index,
                        BSTR *pBstrName,
                        BSTR *pBstrDocString,
                        DWORD *pdwHelpContext,
                        BSTR *pBstrHelpFile);

                      HRESULT ( __export __stdcall *IsName )(
            ITypeLib * This,
                            LPOLESTR szNameBuf,
                       ULONG lHashVal,
                        BOOL *pfName);

                      HRESULT ( __export __stdcall *FindName )(
            ITypeLib * This,
                            LPOLESTR szNameBuf,
                       ULONG lHashVal,
                                            ITypeInfo * *ppTInfo,
                                            MEMBERID *rgMemId,
                            USHORT *pcFound);

                      void ( __export __stdcall *ReleaseTLibAttr )(
            ITypeLib * This,
                       TLIBATTR *pTLibAttr);

       
    } ITypeLibVtbl;

    struct ITypeLib
    {
        struct ITypeLibVtbl *lpVtbl;
    };
# 4600 "/usr/local/arm-wince-pe/include/oaidl.h" 3
                HRESULT __export __stdcall ITypeLib_RemoteGetTypeInfoCount_Proxy(
    ITypeLib * This,
                UINT *pcTInfo);


void ITypeLib_RemoteGetTypeInfoCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeLib_GetTypeInfo_Proxy(
    ITypeLib * This,
               UINT index,
                ITypeInfo * *ppTInfo);


void ITypeLib_GetTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeLib_GetTypeInfoType_Proxy(
    ITypeLib * This,
               UINT index,
                TYPEKIND *pTKind);


void ITypeLib_GetTypeInfoType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeLib_GetTypeInfoOfGuid_Proxy(
    ITypeLib * This,
               const GUID * const guid,
                ITypeInfo * *ppTinfo);


void ITypeLib_GetTypeInfoOfGuid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall ITypeLib_RemoteGetLibAttr_Proxy(
    ITypeLib * This,
                LPTLIBATTR *ppTLibAttr,
                CLEANLOCALSTORAGE *pDummy);


void ITypeLib_RemoteGetLibAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeLib_GetTypeComp_Proxy(
    ITypeLib * This,
                ITypeComp * *ppTComp);


void ITypeLib_GetTypeComp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall ITypeLib_RemoteGetDocumentation_Proxy(
    ITypeLib * This,
               INT index,
               DWORD refPtrFlags,
                BSTR *pBstrName,
                BSTR *pBstrDocString,
                DWORD *pdwHelpContext,
                BSTR *pBstrHelpFile);


void ITypeLib_RemoteGetDocumentation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall ITypeLib_RemoteIsName_Proxy(
    ITypeLib * This,
               LPOLESTR szNameBuf,
               ULONG lHashVal,
                BOOL *pfName,
                BSTR *pBstrLibName);


void ITypeLib_RemoteIsName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall ITypeLib_RemoteFindName_Proxy(
    ITypeLib * This,
               LPOLESTR szNameBuf,
               ULONG lHashVal,
                                    ITypeInfo * *ppTInfo,
                                    MEMBERID *rgMemId,
                    USHORT *pcFound,
                BSTR *pBstrLibName);


void ITypeLib_RemoteFindName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall ITypeLib_LocalReleaseTLibAttr_Proxy(
    ITypeLib * This);


void ITypeLib_LocalReleaseTLibAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 4751 "/usr/local/arm-wince-pe/include/oaidl.h" 3
typedef ITypeLib2 *LPTYPELIB2;


extern const IID IID_ITypeLib2;
# 4784 "/usr/local/arm-wince-pe/include/oaidl.h" 3
    typedef struct ITypeLib2Vtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            ITypeLib2 * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            ITypeLib2 * This);

        ULONG ( __export __stdcall *Release )(
            ITypeLib2 * This);

                      UINT ( __export __stdcall *GetTypeInfoCount )(
            ITypeLib2 * This);

        HRESULT ( __export __stdcall *GetTypeInfo )(
            ITypeLib2 * This,
                       UINT index,
                        ITypeInfo * *ppTInfo);

        HRESULT ( __export __stdcall *GetTypeInfoType )(
            ITypeLib2 * This,
                       UINT index,
                        TYPEKIND *pTKind);

        HRESULT ( __export __stdcall *GetTypeInfoOfGuid )(
            ITypeLib2 * This,
                       const GUID * const guid,
                        ITypeInfo * *ppTinfo);

                      HRESULT ( __export __stdcall *GetLibAttr )(
            ITypeLib2 * This,
                        TLIBATTR * *ppTLibAttr);

        HRESULT ( __export __stdcall *GetTypeComp )(
            ITypeLib2 * This,
                        ITypeComp * *ppTComp);

                      HRESULT ( __export __stdcall *GetDocumentation )(
            ITypeLib2 * This,
                       INT index,
                        BSTR *pBstrName,
                        BSTR *pBstrDocString,
                        DWORD *pdwHelpContext,
                        BSTR *pBstrHelpFile);

                      HRESULT ( __export __stdcall *IsName )(
            ITypeLib2 * This,
                            LPOLESTR szNameBuf,
                       ULONG lHashVal,
                        BOOL *pfName);

                      HRESULT ( __export __stdcall *FindName )(
            ITypeLib2 * This,
                            LPOLESTR szNameBuf,
                       ULONG lHashVal,
                                            ITypeInfo * *ppTInfo,
                                            MEMBERID *rgMemId,
                            USHORT *pcFound);

                      void ( __export __stdcall *ReleaseTLibAttr )(
            ITypeLib2 * This,
                       TLIBATTR *pTLibAttr);

        HRESULT ( __export __stdcall *GetCustData )(
            ITypeLib2 * This,
                       const GUID * const guid,
                        VARIANT *pVarVal);

                      HRESULT ( __export __stdcall *GetLibStatistics )(
            ITypeLib2 * This,
                        ULONG *pcUniqueNames,
                        ULONG *pcchUniqueNames);

                      HRESULT ( __export __stdcall *GetDocumentation2 )(
            ITypeLib2 * This,
                       INT index,
                       LCID lcid,
                        BSTR *pbstrHelpString,
                        DWORD *pdwHelpStringContext,
                        BSTR *pbstrHelpStringDll);

        HRESULT ( __export __stdcall *GetAllCustData )(
            ITypeLib2 * This,
                        CUSTDATA *pCustData);

       
    } ITypeLib2Vtbl;

    struct ITypeLib2
    {
        struct ITypeLib2Vtbl *lpVtbl;
    };
# 4946 "/usr/local/arm-wince-pe/include/oaidl.h" 3
HRESULT __export __stdcall ITypeLib2_GetCustData_Proxy(
    ITypeLib2 * This,
               const GUID * const guid,
                VARIANT *pVarVal);


void ITypeLib2_GetCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall ITypeLib2_RemoteGetLibStatistics_Proxy(
    ITypeLib2 * This,
                ULONG *pcUniqueNames,
                ULONG *pcchUniqueNames);


void ITypeLib2_RemoteGetLibStatistics_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall ITypeLib2_RemoteGetDocumentation2_Proxy(
    ITypeLib2 * This,
               INT index,
               LCID lcid,
               DWORD refPtrFlags,
                BSTR *pbstrHelpString,
                DWORD *pdwHelpStringContext,
                BSTR *pbstrHelpStringDll);


void ITypeLib2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeLib2_GetAllCustData_Proxy(
    ITypeLib2 * This,
                CUSTDATA *pCustData);


void ITypeLib2_GetAllCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 5016 "/usr/local/arm-wince-pe/include/oaidl.h" 3
typedef ITypeChangeEvents *LPTYPECHANGEEVENTS;

typedef
enum tagCHANGEKIND
    { CHANGEKIND_ADDMEMBER = 0,
        CHANGEKIND_DELETEMEMBER = CHANGEKIND_ADDMEMBER + 1,
        CHANGEKIND_SETNAMES = CHANGEKIND_DELETEMEMBER + 1,
        CHANGEKIND_SETDOCUMENTATION = CHANGEKIND_SETNAMES + 1,
        CHANGEKIND_GENERAL = CHANGEKIND_SETDOCUMENTATION + 1,
        CHANGEKIND_INVALIDATE = CHANGEKIND_GENERAL + 1,
        CHANGEKIND_CHANGEFAILED = CHANGEKIND_INVALIDATE + 1,
        CHANGEKIND_MAX = CHANGEKIND_CHANGEFAILED + 1
    } CHANGEKIND;


extern const IID IID_ITypeChangeEvents;
# 5054 "/usr/local/arm-wince-pe/include/oaidl.h" 3
    typedef struct ITypeChangeEventsVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            ITypeChangeEvents * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            ITypeChangeEvents * This);

        ULONG ( __export __stdcall *Release )(
            ITypeChangeEvents * This);

        HRESULT ( __export __stdcall *RequestTypeChange )(
            ITypeChangeEvents * This,
                       CHANGEKIND changeKind,
                       ITypeInfo *pTInfoBefore,
                       LPOLESTR pStrName,
                        INT *pfCancel);

        HRESULT ( __export __stdcall *AfterTypeChange )(
            ITypeChangeEvents * This,
                       CHANGEKIND changeKind,
                       ITypeInfo *pTInfoAfter,
                       LPOLESTR pStrName);

       
    } ITypeChangeEventsVtbl;

    struct ITypeChangeEvents
    {
        struct ITypeChangeEventsVtbl *lpVtbl;
    };
# 5118 "/usr/local/arm-wince-pe/include/oaidl.h" 3
HRESULT __export __stdcall ITypeChangeEvents_RequestTypeChange_Proxy(
    ITypeChangeEvents * This,
               CHANGEKIND changeKind,
               ITypeInfo *pTInfoBefore,
               LPOLESTR pStrName,
                INT *pfCancel);


void ITypeChangeEvents_RequestTypeChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeChangeEvents_AfterTypeChange_Proxy(
    ITypeChangeEvents * This,
               CHANGEKIND changeKind,
               ITypeInfo *pTInfoAfter,
               LPOLESTR pStrName);


void ITypeChangeEvents_AfterTypeChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 5162 "/usr/local/arm-wince-pe/include/oaidl.h" 3
typedef IErrorInfo *LPERRORINFO;


extern const IID IID_IErrorInfo;
# 5192 "/usr/local/arm-wince-pe/include/oaidl.h" 3
    typedef struct IErrorInfoVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IErrorInfo * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IErrorInfo * This);

        ULONG ( __export __stdcall *Release )(
            IErrorInfo * This);

        HRESULT ( __export __stdcall *GetGUID )(
            IErrorInfo * This,
                        GUID *pGUID);

        HRESULT ( __export __stdcall *GetSource )(
            IErrorInfo * This,
                        BSTR *pBstrSource);

        HRESULT ( __export __stdcall *GetDescription )(
            IErrorInfo * This,
                        BSTR *pBstrDescription);

        HRESULT ( __export __stdcall *GetHelpFile )(
            IErrorInfo * This,
                        BSTR *pBstrHelpFile);

        HRESULT ( __export __stdcall *GetHelpContext )(
            IErrorInfo * This,
                        DWORD *pdwHelpContext);

       
    } IErrorInfoVtbl;

    struct IErrorInfo
    {
        struct IErrorInfoVtbl *lpVtbl;
    };
# 5272 "/usr/local/arm-wince-pe/include/oaidl.h" 3
HRESULT __export __stdcall IErrorInfo_GetGUID_Proxy(
    IErrorInfo * This,
                GUID *pGUID);


void IErrorInfo_GetGUID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IErrorInfo_GetSource_Proxy(
    IErrorInfo * This,
                BSTR *pBstrSource);


void IErrorInfo_GetSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IErrorInfo_GetDescription_Proxy(
    IErrorInfo * This,
                BSTR *pBstrDescription);


void IErrorInfo_GetDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IErrorInfo_GetHelpFile_Proxy(
    IErrorInfo * This,
                BSTR *pBstrHelpFile);


void IErrorInfo_GetHelpFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IErrorInfo_GetHelpContext_Proxy(
    IErrorInfo * This,
                DWORD *pdwHelpContext);


void IErrorInfo_GetHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 5347 "/usr/local/arm-wince-pe/include/oaidl.h" 3
typedef ICreateErrorInfo *LPCREATEERRORINFO;


extern const IID IID_ICreateErrorInfo;
# 5377 "/usr/local/arm-wince-pe/include/oaidl.h" 3
    typedef struct ICreateErrorInfoVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            ICreateErrorInfo * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            ICreateErrorInfo * This);

        ULONG ( __export __stdcall *Release )(
            ICreateErrorInfo * This);

        HRESULT ( __export __stdcall *SetGUID )(
            ICreateErrorInfo * This,
                       const GUID * const rguid);

        HRESULT ( __export __stdcall *SetSource )(
            ICreateErrorInfo * This,
                       LPOLESTR szSource);

        HRESULT ( __export __stdcall *SetDescription )(
            ICreateErrorInfo * This,
                       LPOLESTR szDescription);

        HRESULT ( __export __stdcall *SetHelpFile )(
            ICreateErrorInfo * This,
                       LPOLESTR szHelpFile);

        HRESULT ( __export __stdcall *SetHelpContext )(
            ICreateErrorInfo * This,
                       DWORD dwHelpContext);

       
    } ICreateErrorInfoVtbl;

    struct ICreateErrorInfo
    {
        struct ICreateErrorInfoVtbl *lpVtbl;
    };
# 5457 "/usr/local/arm-wince-pe/include/oaidl.h" 3
HRESULT __export __stdcall ICreateErrorInfo_SetGUID_Proxy(
    ICreateErrorInfo * This,
               const GUID * const rguid);


void ICreateErrorInfo_SetGUID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateErrorInfo_SetSource_Proxy(
    ICreateErrorInfo * This,
               LPOLESTR szSource);


void ICreateErrorInfo_SetSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateErrorInfo_SetDescription_Proxy(
    ICreateErrorInfo * This,
               LPOLESTR szDescription);


void ICreateErrorInfo_SetDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateErrorInfo_SetHelpFile_Proxy(
    ICreateErrorInfo * This,
               LPOLESTR szHelpFile);


void ICreateErrorInfo_SetHelpFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ICreateErrorInfo_SetHelpContext_Proxy(
    ICreateErrorInfo * This,
               DWORD dwHelpContext);


void ICreateErrorInfo_SetHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 5532 "/usr/local/arm-wince-pe/include/oaidl.h" 3
typedef ISupportErrorInfo *LPSUPPORTERRORINFO;


extern const IID IID_ISupportErrorInfo;
# 5550 "/usr/local/arm-wince-pe/include/oaidl.h" 3
    typedef struct ISupportErrorInfoVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            ISupportErrorInfo * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            ISupportErrorInfo * This);

        ULONG ( __export __stdcall *Release )(
            ISupportErrorInfo * This);

        HRESULT ( __export __stdcall *InterfaceSupportsErrorInfo )(
            ISupportErrorInfo * This,
                       const IID * const riid);

       
    } ISupportErrorInfoVtbl;

    struct ISupportErrorInfo
    {
        struct ISupportErrorInfoVtbl *lpVtbl;
    };
# 5602 "/usr/local/arm-wince-pe/include/oaidl.h" 3
HRESULT __export __stdcall ISupportErrorInfo_InterfaceSupportsErrorInfo_Proxy(
    ISupportErrorInfo * This,
               const IID * const riid);


void ISupportErrorInfo_InterfaceSupportsErrorInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 5630 "/usr/local/arm-wince-pe/include/oaidl.h" 3
extern const IID IID_ITypeFactory;
# 5647 "/usr/local/arm-wince-pe/include/oaidl.h" 3
    typedef struct ITypeFactoryVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            ITypeFactory * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            ITypeFactory * This);

        ULONG ( __export __stdcall *Release )(
            ITypeFactory * This);

        HRESULT ( __export __stdcall *CreateFromTypeInfo )(
            ITypeFactory * This,
                       ITypeInfo *pTypeInfo,
                       const IID * const riid,
                                IUnknown * *ppv);

       
    } ITypeFactoryVtbl;

    struct ITypeFactory
    {
        struct ITypeFactoryVtbl *lpVtbl;
    };
# 5701 "/usr/local/arm-wince-pe/include/oaidl.h" 3
HRESULT __export __stdcall ITypeFactory_CreateFromTypeInfo_Proxy(
    ITypeFactory * This,
               ITypeInfo *pTypeInfo,
               const IID * const riid,
                        IUnknown * *ppv);


void ITypeFactory_CreateFromTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 5731 "/usr/local/arm-wince-pe/include/oaidl.h" 3
extern const IID IID_ITypeMarshal;
# 5767 "/usr/local/arm-wince-pe/include/oaidl.h" 3
    typedef struct ITypeMarshalVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            ITypeMarshal * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            ITypeMarshal * This);

        ULONG ( __export __stdcall *Release )(
            ITypeMarshal * This);

        HRESULT ( __export __stdcall *Size )(
            ITypeMarshal * This,
                       PVOID pvType,
                       DWORD dwDestContext,
                       PVOID pvDestContext,
                        ULONG *pSize);

        HRESULT ( __export __stdcall *Marshal )(
            ITypeMarshal * This,
                       PVOID pvType,
                       DWORD dwDestContext,
                       PVOID pvDestContext,
                       ULONG cbBufferLength,
                        BYTE *pBuffer,
                        ULONG *pcbWritten);

        HRESULT ( __export __stdcall *Unmarshal )(
            ITypeMarshal * This,
                        PVOID pvType,
                       DWORD dwFlags,
                       ULONG cbBufferLength,
                       BYTE *pBuffer,
                        ULONG *pcbRead);

        HRESULT ( __export __stdcall *Free )(
            ITypeMarshal * This,
                       PVOID pvType);

       
    } ITypeMarshalVtbl;

    struct ITypeMarshal
    {
        struct ITypeMarshalVtbl *lpVtbl;
    };
# 5852 "/usr/local/arm-wince-pe/include/oaidl.h" 3
HRESULT __export __stdcall ITypeMarshal_Size_Proxy(
    ITypeMarshal * This,
               PVOID pvType,
               DWORD dwDestContext,
               PVOID pvDestContext,
                ULONG *pSize);


void ITypeMarshal_Size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeMarshal_Marshal_Proxy(
    ITypeMarshal * This,
               PVOID pvType,
               DWORD dwDestContext,
               PVOID pvDestContext,
               ULONG cbBufferLength,
                BYTE *pBuffer,
                ULONG *pcbWritten);


void ITypeMarshal_Marshal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeMarshal_Unmarshal_Proxy(
    ITypeMarshal * This,
                PVOID pvType,
               DWORD dwFlags,
               ULONG cbBufferLength,
               BYTE *pBuffer,
                ULONG *pcbRead);


void ITypeMarshal_Unmarshal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall ITypeMarshal_Free_Proxy(
    ITypeMarshal * This,
               PVOID pvType);


void ITypeMarshal_Free_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 5927 "/usr/local/arm-wince-pe/include/oaidl.h" 3
typedef IRecordInfo *LPRECORDINFO;


extern const IID IID_IRecordInfo;
# 6003 "/usr/local/arm-wince-pe/include/oaidl.h" 3
    typedef struct IRecordInfoVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IRecordInfo * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IRecordInfo * This);

        ULONG ( __export __stdcall *Release )(
            IRecordInfo * This);

        HRESULT ( __export __stdcall *RecordInit )(
            IRecordInfo * This,
                        PVOID pvNew);

        HRESULT ( __export __stdcall *RecordClear )(
            IRecordInfo * This,
                       PVOID pvExisting);

        HRESULT ( __export __stdcall *RecordCopy )(
            IRecordInfo * This,
                       PVOID pvExisting,
                        PVOID pvNew);

        HRESULT ( __export __stdcall *GetGuid )(
            IRecordInfo * This,
                        GUID *pguid);

        HRESULT ( __export __stdcall *GetName )(
            IRecordInfo * This,
                        BSTR *pbstrName);

        HRESULT ( __export __stdcall *GetSize )(
            IRecordInfo * This,
                        ULONG *pcbSize);

        HRESULT ( __export __stdcall *GetTypeInfo )(
            IRecordInfo * This,
                        ITypeInfo * *ppTypeInfo);

        HRESULT ( __export __stdcall *GetField )(
            IRecordInfo * This,
                       PVOID pvData,
                       LPCOLESTR szFieldName,
                        VARIANT *pvarField);

        HRESULT ( __export __stdcall *GetFieldNoCopy )(
            IRecordInfo * This,
                       PVOID pvData,
                       LPCOLESTR szFieldName,
                        VARIANT *pvarField,
                        PVOID *ppvDataCArray);

        HRESULT ( __export __stdcall *PutField )(
            IRecordInfo * This,
                       ULONG wFlags,
                            PVOID pvData,
                       LPCOLESTR szFieldName,
                       VARIANT *pvarField);

        HRESULT ( __export __stdcall *PutFieldNoCopy )(
            IRecordInfo * This,
                       ULONG wFlags,
                            PVOID pvData,
                       LPCOLESTR szFieldName,
                       VARIANT *pvarField);

        HRESULT ( __export __stdcall *GetFieldNames )(
            IRecordInfo * This,
                            ULONG *pcNames,
                                            BSTR *rgBstrNames);

        BOOL ( __export __stdcall *IsMatchingType )(
            IRecordInfo * This,
                       IRecordInfo *pRecordInfo);

        PVOID ( __export __stdcall *RecordCreate )(
            IRecordInfo * This);

        HRESULT ( __export __stdcall *RecordCreateCopy )(
            IRecordInfo * This,
                       PVOID pvSource,
                        PVOID *ppvDest);

        HRESULT ( __export __stdcall *RecordDestroy )(
            IRecordInfo * This,
                       PVOID pvRecord);

       
    } IRecordInfoVtbl;

    struct IRecordInfo
    {
        struct IRecordInfoVtbl *lpVtbl;
    };
# 6173 "/usr/local/arm-wince-pe/include/oaidl.h" 3
HRESULT __export __stdcall IRecordInfo_RecordInit_Proxy(
    IRecordInfo * This,
                PVOID pvNew);


void IRecordInfo_RecordInit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRecordInfo_RecordClear_Proxy(
    IRecordInfo * This,
               PVOID pvExisting);


void IRecordInfo_RecordClear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRecordInfo_RecordCopy_Proxy(
    IRecordInfo * This,
               PVOID pvExisting,
                PVOID pvNew);


void IRecordInfo_RecordCopy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRecordInfo_GetGuid_Proxy(
    IRecordInfo * This,
                GUID *pguid);


void IRecordInfo_GetGuid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRecordInfo_GetName_Proxy(
    IRecordInfo * This,
                BSTR *pbstrName);


void IRecordInfo_GetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRecordInfo_GetSize_Proxy(
    IRecordInfo * This,
                ULONG *pcbSize);


void IRecordInfo_GetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRecordInfo_GetTypeInfo_Proxy(
    IRecordInfo * This,
                ITypeInfo * *ppTypeInfo);


void IRecordInfo_GetTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRecordInfo_GetField_Proxy(
    IRecordInfo * This,
               PVOID pvData,
               LPCOLESTR szFieldName,
                VARIANT *pvarField);


void IRecordInfo_GetField_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRecordInfo_GetFieldNoCopy_Proxy(
    IRecordInfo * This,
               PVOID pvData,
               LPCOLESTR szFieldName,
                VARIANT *pvarField,
                PVOID *ppvDataCArray);


void IRecordInfo_GetFieldNoCopy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRecordInfo_PutField_Proxy(
    IRecordInfo * This,
               ULONG wFlags,
                    PVOID pvData,
               LPCOLESTR szFieldName,
               VARIANT *pvarField);


void IRecordInfo_PutField_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRecordInfo_PutFieldNoCopy_Proxy(
    IRecordInfo * This,
               ULONG wFlags,
                    PVOID pvData,
               LPCOLESTR szFieldName,
               VARIANT *pvarField);


void IRecordInfo_PutFieldNoCopy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRecordInfo_GetFieldNames_Proxy(
    IRecordInfo * This,
                    ULONG *pcNames,
                                    BSTR *rgBstrNames);


void IRecordInfo_GetFieldNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


BOOL __export __stdcall IRecordInfo_IsMatchingType_Proxy(
    IRecordInfo * This,
               IRecordInfo *pRecordInfo);


void IRecordInfo_IsMatchingType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


PVOID __export __stdcall IRecordInfo_RecordCreate_Proxy(
    IRecordInfo * This);


void IRecordInfo_RecordCreate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRecordInfo_RecordCreateCopy_Proxy(
    IRecordInfo * This,
               PVOID pvSource,
                PVOID *ppvDest);


void IRecordInfo_RecordCreateCopy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IRecordInfo_RecordDestroy_Proxy(
    IRecordInfo * This,
               PVOID pvRecord);


void IRecordInfo_RecordDestroy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 6395 "/usr/local/arm-wince-pe/include/oaidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0077_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0077_v0_0_s_ifspec;



unsigned long BSTR_UserSize( unsigned long *, unsigned long , BSTR * );
unsigned char * BSTR_UserMarshal( unsigned long *, unsigned char *, BSTR * );
unsigned char * BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * );
void BSTR_UserFree( unsigned long *, BSTR * );

unsigned long CLEANLOCALSTORAGE_UserSize( unsigned long *, unsigned long , CLEANLOCALSTORAGE * );
unsigned char * CLEANLOCALSTORAGE_UserMarshal( unsigned long *, unsigned char *, CLEANLOCALSTORAGE * );
unsigned char * CLEANLOCALSTORAGE_UserUnmarshal(unsigned long *, unsigned char *, CLEANLOCALSTORAGE * );
void CLEANLOCALSTORAGE_UserFree( unsigned long *, CLEANLOCALSTORAGE * );

unsigned long VARIANT_UserSize( unsigned long *, unsigned long , VARIANT * );
unsigned char * VARIANT_UserMarshal( unsigned long *, unsigned char *, VARIANT * );
unsigned char * VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * );
void VARIANT_UserFree( unsigned long *, VARIANT * );

              HRESULT __export __stdcall IDispatch_Invoke_Proxy(
    IDispatch * This,
               DISPID dispIdMember,
               const IID * const riid,
               LCID lcid,
               WORD wFlags,
                    DISPPARAMS *pDispParams,
                VARIANT *pVarResult,
                EXCEPINFO *pExcepInfo,
                UINT *puArgErr);


                HRESULT __export __stdcall IDispatch_Invoke_Stub(
    IDispatch * This,
               DISPID dispIdMember,
               const IID * const riid,
               LCID lcid,
               DWORD dwFlags,
               DISPPARAMS *pDispParams,
                VARIANT *pVarResult,
                EXCEPINFO *pExcepInfo,
                UINT *pArgErr,
               UINT cVarRef,
                        UINT *rgVarRefIdx,
                             VARIANTARG *rgVarRef);

              HRESULT __export __stdcall IEnumVARIANT_Next_Proxy(
    IEnumVARIANT * This,
               ULONG celt,
                                    VARIANT *rgVar,
                ULONG *pCeltFetched);


                HRESULT __export __stdcall IEnumVARIANT_Next_Stub(
    IEnumVARIANT * This,
               ULONG celt,
                                    VARIANT *rgVar,
                ULONG *pCeltFetched);

              HRESULT __export __stdcall ITypeComp_Bind_Proxy(
    ITypeComp * This,
               LPOLESTR szName,
               ULONG lHashVal,
               WORD wFlags,
                ITypeInfo * *ppTInfo,
                DESCKIND *pDescKind,
                BINDPTR *pBindPtr);


                HRESULT __export __stdcall ITypeComp_Bind_Stub(
    ITypeComp * This,
               LPOLESTR szName,
               ULONG lHashVal,
               WORD wFlags,
                ITypeInfo * *ppTInfo,
                DESCKIND *pDescKind,
                LPFUNCDESC *ppFuncDesc,
                LPVARDESC *ppVarDesc,
                ITypeComp * *ppTypeComp,
                CLEANLOCALSTORAGE *pDummy);

              HRESULT __export __stdcall ITypeComp_BindType_Proxy(
    ITypeComp * This,
               LPOLESTR szName,
               ULONG lHashVal,
                ITypeInfo * *ppTInfo,
                ITypeComp * *ppTComp);


                HRESULT __export __stdcall ITypeComp_BindType_Stub(
    ITypeComp * This,
               LPOLESTR szName,
               ULONG lHashVal,
                ITypeInfo * *ppTInfo);

              HRESULT __export __stdcall ITypeInfo_GetTypeAttr_Proxy(
    ITypeInfo * This,
                TYPEATTR * *ppTypeAttr);


                HRESULT __export __stdcall ITypeInfo_GetTypeAttr_Stub(
    ITypeInfo * This,
                LPTYPEATTR *ppTypeAttr,
                CLEANLOCALSTORAGE *pDummy);

              HRESULT __export __stdcall ITypeInfo_GetFuncDesc_Proxy(
    ITypeInfo * This,
               UINT index,
                FUNCDESC * *ppFuncDesc);


                HRESULT __export __stdcall ITypeInfo_GetFuncDesc_Stub(
    ITypeInfo * This,
               UINT index,
                LPFUNCDESC *ppFuncDesc,
                CLEANLOCALSTORAGE *pDummy);

              HRESULT __export __stdcall ITypeInfo_GetVarDesc_Proxy(
    ITypeInfo * This,
               UINT index,
                VARDESC * *ppVarDesc);


                HRESULT __export __stdcall ITypeInfo_GetVarDesc_Stub(
    ITypeInfo * This,
               UINT index,
                LPVARDESC *ppVarDesc,
                CLEANLOCALSTORAGE *pDummy);

              HRESULT __export __stdcall ITypeInfo_GetNames_Proxy(
    ITypeInfo * This,
               MEMBERID memid,
                                    BSTR *rgBstrNames,
               UINT cMaxNames,
                UINT *pcNames);


                HRESULT __export __stdcall ITypeInfo_GetNames_Stub(
    ITypeInfo * This,
               MEMBERID memid,
                                    BSTR *rgBstrNames,
               UINT cMaxNames,
                UINT *pcNames);

              HRESULT __export __stdcall ITypeInfo_GetIDsOfNames_Proxy(
    ITypeInfo * This,
                        LPOLESTR *rgszNames,
               UINT cNames,
                         MEMBERID *pMemId);


                HRESULT __export __stdcall ITypeInfo_GetIDsOfNames_Stub(
    ITypeInfo * This);

              HRESULT __export __stdcall ITypeInfo_Invoke_Proxy(
    ITypeInfo * This,
               PVOID pvInstance,
               MEMBERID memid,
               WORD wFlags,
                    DISPPARAMS *pDispParams,
                VARIANT *pVarResult,
                EXCEPINFO *pExcepInfo,
                UINT *puArgErr);


                HRESULT __export __stdcall ITypeInfo_Invoke_Stub(
    ITypeInfo * This);

              HRESULT __export __stdcall ITypeInfo_GetDocumentation_Proxy(
    ITypeInfo * This,
               MEMBERID memid,
                BSTR *pBstrName,
                BSTR *pBstrDocString,
                DWORD *pdwHelpContext,
                BSTR *pBstrHelpFile);


                HRESULT __export __stdcall ITypeInfo_GetDocumentation_Stub(
    ITypeInfo * This,
               MEMBERID memid,
               DWORD refPtrFlags,
                BSTR *pBstrName,
                BSTR *pBstrDocString,
                DWORD *pdwHelpContext,
                BSTR *pBstrHelpFile);

              HRESULT __export __stdcall ITypeInfo_GetDllEntry_Proxy(
    ITypeInfo * This,
               MEMBERID memid,
               INVOKEKIND invKind,
                BSTR *pBstrDllName,
                BSTR *pBstrName,
                WORD *pwOrdinal);


                HRESULT __export __stdcall ITypeInfo_GetDllEntry_Stub(
    ITypeInfo * This,
               MEMBERID memid,
               INVOKEKIND invKind,
               DWORD refPtrFlags,
                BSTR *pBstrDllName,
                BSTR *pBstrName,
                WORD *pwOrdinal);

              HRESULT __export __stdcall ITypeInfo_AddressOfMember_Proxy(
    ITypeInfo * This,
               MEMBERID memid,
               INVOKEKIND invKind,
                PVOID *ppv);


                HRESULT __export __stdcall ITypeInfo_AddressOfMember_Stub(
    ITypeInfo * This);

              HRESULT __export __stdcall ITypeInfo_CreateInstance_Proxy(
    ITypeInfo * This,
               IUnknown *pUnkOuter,
               const IID * const riid,
                        PVOID *ppvObj);


                HRESULT __export __stdcall ITypeInfo_CreateInstance_Stub(
    ITypeInfo * This,
               const IID * const riid,
                        IUnknown * *ppvObj);

              HRESULT __export __stdcall ITypeInfo_GetContainingTypeLib_Proxy(
    ITypeInfo * This,
                ITypeLib * *ppTLib,
                UINT *pIndex);


                HRESULT __export __stdcall ITypeInfo_GetContainingTypeLib_Stub(
    ITypeInfo * This,
                ITypeLib * *ppTLib,
                UINT *pIndex);

              void __export __stdcall ITypeInfo_ReleaseTypeAttr_Proxy(
    ITypeInfo * This,
               TYPEATTR *pTypeAttr);


                HRESULT __export __stdcall ITypeInfo_ReleaseTypeAttr_Stub(
    ITypeInfo * This);

              void __export __stdcall ITypeInfo_ReleaseFuncDesc_Proxy(
    ITypeInfo * This,
               FUNCDESC *pFuncDesc);


                HRESULT __export __stdcall ITypeInfo_ReleaseFuncDesc_Stub(
    ITypeInfo * This);

              void __export __stdcall ITypeInfo_ReleaseVarDesc_Proxy(
    ITypeInfo * This,
               VARDESC *pVarDesc);


                HRESULT __export __stdcall ITypeInfo_ReleaseVarDesc_Stub(
    ITypeInfo * This);

              HRESULT __export __stdcall ITypeInfo2_GetDocumentation2_Proxy(
    ITypeInfo2 * This,
               MEMBERID memid,
               LCID lcid,
                BSTR *pbstrHelpString,
                DWORD *pdwHelpStringContext,
                BSTR *pbstrHelpStringDll);


                HRESULT __export __stdcall ITypeInfo2_GetDocumentation2_Stub(
    ITypeInfo2 * This,
               MEMBERID memid,
               LCID lcid,
               DWORD refPtrFlags,
                BSTR *pbstrHelpString,
                DWORD *pdwHelpStringContext,
                BSTR *pbstrHelpStringDll);

              UINT __export __stdcall ITypeLib_GetTypeInfoCount_Proxy(
    ITypeLib * This);


                HRESULT __export __stdcall ITypeLib_GetTypeInfoCount_Stub(
    ITypeLib * This,
                UINT *pcTInfo);

              HRESULT __export __stdcall ITypeLib_GetLibAttr_Proxy(
    ITypeLib * This,
                TLIBATTR * *ppTLibAttr);


                HRESULT __export __stdcall ITypeLib_GetLibAttr_Stub(
    ITypeLib * This,
                LPTLIBATTR *ppTLibAttr,
                CLEANLOCALSTORAGE *pDummy);

              HRESULT __export __stdcall ITypeLib_GetDocumentation_Proxy(
    ITypeLib * This,
               INT index,
                BSTR *pBstrName,
                BSTR *pBstrDocString,
                DWORD *pdwHelpContext,
                BSTR *pBstrHelpFile);


                HRESULT __export __stdcall ITypeLib_GetDocumentation_Stub(
    ITypeLib * This,
               INT index,
               DWORD refPtrFlags,
                BSTR *pBstrName,
                BSTR *pBstrDocString,
                DWORD *pdwHelpContext,
                BSTR *pBstrHelpFile);

              HRESULT __export __stdcall ITypeLib_IsName_Proxy(
    ITypeLib * This,
                    LPOLESTR szNameBuf,
               ULONG lHashVal,
                BOOL *pfName);


                HRESULT __export __stdcall ITypeLib_IsName_Stub(
    ITypeLib * This,
               LPOLESTR szNameBuf,
               ULONG lHashVal,
                BOOL *pfName,
                BSTR *pBstrLibName);

              HRESULT __export __stdcall ITypeLib_FindName_Proxy(
    ITypeLib * This,
                    LPOLESTR szNameBuf,
               ULONG lHashVal,
                                    ITypeInfo * *ppTInfo,
                                    MEMBERID *rgMemId,
                    USHORT *pcFound);


                HRESULT __export __stdcall ITypeLib_FindName_Stub(
    ITypeLib * This,
               LPOLESTR szNameBuf,
               ULONG lHashVal,
                                    ITypeInfo * *ppTInfo,
                                    MEMBERID *rgMemId,
                    USHORT *pcFound,
                BSTR *pBstrLibName);

              void __export __stdcall ITypeLib_ReleaseTLibAttr_Proxy(
    ITypeLib * This,
               TLIBATTR *pTLibAttr);


                HRESULT __export __stdcall ITypeLib_ReleaseTLibAttr_Stub(
    ITypeLib * This);

              HRESULT __export __stdcall ITypeLib2_GetLibStatistics_Proxy(
    ITypeLib2 * This,
                ULONG *pcUniqueNames,
                ULONG *pcchUniqueNames);


                HRESULT __export __stdcall ITypeLib2_GetLibStatistics_Stub(
    ITypeLib2 * This,
                ULONG *pcUniqueNames,
                ULONG *pcchUniqueNames);

              HRESULT __export __stdcall ITypeLib2_GetDocumentation2_Proxy(
    ITypeLib2 * This,
               INT index,
               LCID lcid,
                BSTR *pbstrHelpString,
                DWORD *pdwHelpStringContext,
                BSTR *pbstrHelpStringDll);


                HRESULT __export __stdcall ITypeLib2_GetDocumentation2_Stub(
    ITypeLib2 * This,
               INT index,
               LCID lcid,
               DWORD refPtrFlags,
                BSTR *pbstrHelpString,
                DWORD *pdwHelpStringContext,
                BSTR *pbstrHelpStringDll);
# 54 "/usr/local/arm-wince-pe/include/oleauto.h" 2 3






extern BSTR __export __stdcall SysAllocString(const OLECHAR *);
extern INT __export __stdcall SysReAllocString(BSTR *, const OLECHAR *);
extern BSTR __export __stdcall SysAllocStringLen(const OLECHAR *, UINT);
extern INT __export __stdcall SysReAllocStringLen(BSTR *, const OLECHAR *, UINT);
extern void __export __stdcall SysFreeString(BSTR);
extern UINT __export __stdcall SysStringLen(BSTR);
# 76 "/usr/local/arm-wince-pe/include/oleauto.h" 3
extern INT __export __stdcall DosDateTimeToVariantTime(USHORT wDosDate, USHORT wDosTime, DOUBLE * pvtime);

extern INT __export __stdcall VariantTimeToDosDateTime(DOUBLE vtime, USHORT * pwDosDate, USHORT * pwDosTime);
# 90 "/usr/local/arm-wince-pe/include/oleauto.h" 3
extern HRESULT __export __stdcall SafeArrayAllocDescriptor(UINT cDims, SAFEARRAY ** ppsaOut);
extern HRESULT __export __stdcall SafeArrayAllocData(SAFEARRAY * psa);
extern SAFEARRAY * __export __stdcall SafeArrayCreate(VARTYPE vt, UINT cDims, SAFEARRAYBOUND * rgsabound);
extern SAFEARRAY * __export __stdcall SafeArrayCreateVector(VARTYPE vt, LONG lLbound, ULONG cElements);
extern HRESULT __export __stdcall SafeArrayCopyData(SAFEARRAY *psaSource, SAFEARRAY *psaTarget);
extern HRESULT __export __stdcall SafeArrayDestroyDescriptor(SAFEARRAY * psa);
extern HRESULT __export __stdcall SafeArrayDestroyData(SAFEARRAY * psa);
extern HRESULT __export __stdcall SafeArrayDestroy(SAFEARRAY * psa);
extern HRESULT __export __stdcall SafeArrayRedim(SAFEARRAY * psa, SAFEARRAYBOUND * psaboundNew);
extern UINT __export __stdcall SafeArrayGetDim(SAFEARRAY * psa);
extern UINT __export __stdcall SafeArrayGetElemsize(SAFEARRAY * psa);
extern HRESULT __export __stdcall SafeArrayGetUBound(SAFEARRAY * psa, UINT nDim, LONG * plUbound);
extern HRESULT __export __stdcall SafeArrayGetLBound(SAFEARRAY * psa, UINT nDim, LONG * plLbound);
extern HRESULT __export __stdcall SafeArrayLock(SAFEARRAY * psa);
extern HRESULT __export __stdcall SafeArrayUnlock(SAFEARRAY * psa);
extern HRESULT __export __stdcall SafeArrayAccessData(SAFEARRAY * psa, void __huge** ppvData);
extern HRESULT __export __stdcall SafeArrayUnaccessData(SAFEARRAY * psa);
extern HRESULT __export __stdcall SafeArrayGetElement(SAFEARRAY * psa, LONG * rgIndices, void * pv);
extern HRESULT __export __stdcall SafeArrayPutElement(SAFEARRAY * psa, LONG * rgIndices, void * pv);
extern HRESULT __export __stdcall SafeArrayCopy(SAFEARRAY * psa, SAFEARRAY ** ppsaOut);
extern HRESULT __export __stdcall SafeArrayPtrOfIndex(SAFEARRAY * psa, LONG * rgIndices, void ** ppvData);






extern void __export __stdcall VariantInit(VARIANTARG * pvarg);
extern HRESULT __export __stdcall VariantClear(VARIANTARG * pvarg);
extern HRESULT __export __stdcall VariantCopy(VARIANTARG * pvargDest, VARIANTARG * pvargSrc);
extern HRESULT __export __stdcall VariantCopyInd(VARIANT * pvarDest, VARIANTARG * pvargSrc);
extern HRESULT __export __stdcall VariantChangeType(VARIANTARG * pvargDest,
                VARIANTARG * pvarSrc, USHORT wFlags, VARTYPE vt);
extern HRESULT __export __stdcall VariantChangeTypeEx(VARIANTARG * pvargDest,
                VARIANTARG * pvarSrc, LCID lcid, USHORT wFlags, VARTYPE vt);
# 140 "/usr/local/arm-wince-pe/include/oleauto.h" 3
extern HRESULT __export __stdcall VectorFromBstr (BSTR bstr, SAFEARRAY ** ppsa);
extern HRESULT __export __stdcall BstrFromVector (SAFEARRAY *psa, BSTR *pbstr);
# 166 "/usr/local/arm-wince-pe/include/oleauto.h" 3
extern HRESULT __export __stdcall VarUI1FromI2(SHORT sIn, BYTE * pbOut);
extern HRESULT __export __stdcall VarUI1FromI4(LONG lIn, BYTE * pbOut);
extern HRESULT __export __stdcall VarUI1FromR4(FLOAT fltIn, BYTE * pbOut);
extern HRESULT __export __stdcall VarUI1FromR8(DOUBLE dblIn, BYTE * pbOut);
extern HRESULT __export __stdcall VarUI1FromCy(CY cyIn, BYTE * pbOut);
extern HRESULT __export __stdcall VarUI1FromDate(DATE dateIn, BYTE * pbOut);
extern HRESULT __export __stdcall VarUI1FromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, BYTE * pbOut);
extern HRESULT __export __stdcall VarUI1FromDisp(IDispatch * pdispIn, LCID lcid, BYTE * pbOut);
extern HRESULT __export __stdcall VarUI1FromBool(VARIANT_BOOL boolIn, BYTE * pbOut);
extern HRESULT __export __stdcall VarUI1FromI1(CHAR cIn, BYTE *pbOut);
extern HRESULT __export __stdcall VarUI1FromUI2(USHORT uiIn, BYTE *pbOut);
extern HRESULT __export __stdcall VarUI1FromUI4(ULONG ulIn, BYTE *pbOut);
extern HRESULT __export __stdcall VarUI1FromDec(DECIMAL *pdecIn, BYTE *pbOut);

extern HRESULT __export __stdcall VarI2FromUI1(BYTE bIn, SHORT * psOut);
extern HRESULT __export __stdcall VarI2FromI4(LONG lIn, SHORT * psOut);
extern HRESULT __export __stdcall VarI2FromR4(FLOAT fltIn, SHORT * psOut);
extern HRESULT __export __stdcall VarI2FromR8(DOUBLE dblIn, SHORT * psOut);
extern HRESULT __export __stdcall VarI2FromCy(CY cyIn, SHORT * psOut);
extern HRESULT __export __stdcall VarI2FromDate(DATE dateIn, SHORT * psOut);
extern HRESULT __export __stdcall VarI2FromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, SHORT * psOut);
extern HRESULT __export __stdcall VarI2FromDisp(IDispatch * pdispIn, LCID lcid, SHORT * psOut);
extern HRESULT __export __stdcall VarI2FromBool(VARIANT_BOOL boolIn, SHORT * psOut);
extern HRESULT __export __stdcall VarI2FromI1(CHAR cIn, SHORT *psOut);
extern HRESULT __export __stdcall VarI2FromUI2(USHORT uiIn, SHORT *psOut);
extern HRESULT __export __stdcall VarI2FromUI4(ULONG ulIn, SHORT *psOut);
extern HRESULT __export __stdcall VarI2FromDec(DECIMAL *pdecIn, SHORT *psOut);

extern HRESULT __export __stdcall VarI4FromUI1(BYTE bIn, LONG * plOut);
extern HRESULT __export __stdcall VarI4FromI2(SHORT sIn, LONG * plOut);
extern HRESULT __export __stdcall VarI4FromR4(FLOAT fltIn, LONG * plOut);
extern HRESULT __export __stdcall VarI4FromR8(DOUBLE dblIn, LONG * plOut);
extern HRESULT __export __stdcall VarI4FromCy(CY cyIn, LONG * plOut);
extern HRESULT __export __stdcall VarI4FromDate(DATE dateIn, LONG * plOut);
extern HRESULT __export __stdcall VarI4FromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, LONG * plOut);
extern HRESULT __export __stdcall VarI4FromDisp(IDispatch * pdispIn, LCID lcid, LONG * plOut);
extern HRESULT __export __stdcall VarI4FromBool(VARIANT_BOOL boolIn, LONG * plOut);
extern HRESULT __export __stdcall VarI4FromI1(CHAR cIn, LONG *plOut);
extern HRESULT __export __stdcall VarI4FromUI2(USHORT uiIn, LONG *plOut);
extern HRESULT __export __stdcall VarI4FromUI4(ULONG ulIn, LONG *plOut);
extern HRESULT __export __stdcall VarI4FromDec(DECIMAL *pdecIn, LONG *plOut);
extern HRESULT __export __stdcall VarI4FromInt(INT intIn, LONG *plOut);

extern HRESULT __export __stdcall VarR4FromUI1(BYTE bIn, FLOAT * pfltOut);
extern HRESULT __export __stdcall VarR4FromI2(SHORT sIn, FLOAT * pfltOut);
extern HRESULT __export __stdcall VarR4FromI4(LONG lIn, FLOAT * pfltOut);
extern HRESULT __export __stdcall VarR4FromR8(DOUBLE dblIn, FLOAT * pfltOut);
extern HRESULT __export __stdcall VarR4FromCy(CY cyIn, FLOAT * pfltOut);
extern HRESULT __export __stdcall VarR4FromDate(DATE dateIn, FLOAT * pfltOut);
extern HRESULT __export __stdcall VarR4FromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, FLOAT *pfltOut);
extern HRESULT __export __stdcall VarR4FromDisp(IDispatch * pdispIn, LCID lcid, FLOAT * pfltOut);
extern HRESULT __export __stdcall VarR4FromBool(VARIANT_BOOL boolIn, FLOAT * pfltOut);
extern HRESULT __export __stdcall VarR4FromI1(CHAR cIn, FLOAT *pfltOut);
extern HRESULT __export __stdcall VarR4FromUI2(USHORT uiIn, FLOAT *pfltOut);
extern HRESULT __export __stdcall VarR4FromUI4(ULONG ulIn, FLOAT *pfltOut);
extern HRESULT __export __stdcall VarR4FromDec(DECIMAL *pdecIn, FLOAT *pfltOut);

extern HRESULT __export __stdcall VarR8FromUI1(BYTE bIn, DOUBLE * pdblOut);
extern HRESULT __export __stdcall VarR8FromI2(SHORT sIn, DOUBLE * pdblOut);
extern HRESULT __export __stdcall VarR8FromI4(LONG lIn, DOUBLE * pdblOut);
extern HRESULT __export __stdcall VarR8FromR4(FLOAT fltIn, DOUBLE * pdblOut);
extern HRESULT __export __stdcall VarR8FromCy(CY cyIn, DOUBLE * pdblOut);
extern HRESULT __export __stdcall VarR8FromDate(DATE dateIn, DOUBLE * pdblOut);
extern HRESULT __export __stdcall VarR8FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, DOUBLE *pdblOut);
extern HRESULT __export __stdcall VarR8FromDisp(IDispatch * pdispIn, LCID lcid, DOUBLE * pdblOut);
extern HRESULT __export __stdcall VarR8FromBool(VARIANT_BOOL boolIn, DOUBLE * pdblOut);
extern HRESULT __export __stdcall VarR8FromI1(CHAR cIn, DOUBLE *pdblOut);
extern HRESULT __export __stdcall VarR8FromUI2(USHORT uiIn, DOUBLE *pdblOut);
extern HRESULT __export __stdcall VarR8FromUI4(ULONG ulIn, DOUBLE *pdblOut);
extern HRESULT __export __stdcall VarR8FromDec(DECIMAL *pdecIn, DOUBLE *pdblOut);

extern HRESULT __export __stdcall VarDateFromUI1(BYTE bIn, DATE * pdateOut);
extern HRESULT __export __stdcall VarDateFromI2(SHORT sIn, DATE * pdateOut);
extern HRESULT __export __stdcall VarDateFromI4(LONG lIn, DATE * pdateOut);
extern HRESULT __export __stdcall VarDateFromR4(FLOAT fltIn, DATE * pdateOut);
extern HRESULT __export __stdcall VarDateFromR8(DOUBLE dblIn, DATE * pdateOut);
extern HRESULT __export __stdcall VarDateFromCy(CY cyIn, DATE * pdateOut);
extern HRESULT __export __stdcall VarDateFromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, DATE *pdateOut);
extern HRESULT __export __stdcall VarDateFromDisp(IDispatch * pdispIn, LCID lcid, DATE * pdateOut);
extern HRESULT __export __stdcall VarDateFromBool(VARIANT_BOOL boolIn, DATE * pdateOut);
extern HRESULT __export __stdcall VarDateFromI1(CHAR cIn, DATE *pdateOut);
extern HRESULT __export __stdcall VarDateFromUI2(USHORT uiIn, DATE *pdateOut);
extern HRESULT __export __stdcall VarDateFromUI4(ULONG ulIn, DATE *pdateOut);
extern HRESULT __export __stdcall VarDateFromDec(DECIMAL *pdecIn, DATE *pdateOut);

extern HRESULT __export __stdcall VarCyFromUI1(BYTE bIn, CY * pcyOut);
extern HRESULT __export __stdcall VarCyFromI2(SHORT sIn, CY * pcyOut);
extern HRESULT __export __stdcall VarCyFromI4(LONG lIn, CY * pcyOut);
extern HRESULT __export __stdcall VarCyFromR4(FLOAT fltIn, CY * pcyOut);
extern HRESULT __export __stdcall VarCyFromR8(DOUBLE dblIn, CY * pcyOut);
extern HRESULT __export __stdcall VarCyFromDate(DATE dateIn, CY * pcyOut);
extern HRESULT __export __stdcall VarCyFromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, CY * pcyOut);
extern HRESULT __export __stdcall VarCyFromDisp(IDispatch * pdispIn, LCID lcid, CY * pcyOut);
extern HRESULT __export __stdcall VarCyFromBool(VARIANT_BOOL boolIn, CY * pcyOut);
extern HRESULT __export __stdcall VarCyFromI1(CHAR cIn, CY *pcyOut);
extern HRESULT __export __stdcall VarCyFromUI2(USHORT uiIn, CY *pcyOut);
extern HRESULT __export __stdcall VarCyFromUI4(ULONG ulIn, CY *pcyOut);
extern HRESULT __export __stdcall VarCyFromDec(DECIMAL *pdecIn, CY *pcyOut);

extern HRESULT __export __stdcall VarBstrFromUI1(BYTE bVal, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern HRESULT __export __stdcall VarBstrFromI2(SHORT iVal, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern HRESULT __export __stdcall VarBstrFromI4(LONG lIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern HRESULT __export __stdcall VarBstrFromR4(FLOAT fltIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern HRESULT __export __stdcall VarBstrFromR8(DOUBLE dblIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern HRESULT __export __stdcall VarBstrFromCy(CY cyIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern HRESULT __export __stdcall VarBstrFromDate(DATE dateIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern HRESULT __export __stdcall VarBstrFromDisp(IDispatch * pdispIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern HRESULT __export __stdcall VarBstrFromBool(VARIANT_BOOL boolIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern HRESULT __export __stdcall VarBstrFromI1(CHAR cIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern HRESULT __export __stdcall VarBstrFromUI2(USHORT uiIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern HRESULT __export __stdcall VarBstrFromUI4(ULONG ulIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern HRESULT __export __stdcall VarBstrFromDec(DECIMAL *pdecIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);

extern HRESULT __export __stdcall VarBoolFromUI1(BYTE bIn, VARIANT_BOOL * pboolOut);
extern HRESULT __export __stdcall VarBoolFromI2(SHORT sIn, VARIANT_BOOL * pboolOut);
extern HRESULT __export __stdcall VarBoolFromI4(LONG lIn, VARIANT_BOOL * pboolOut);
extern HRESULT __export __stdcall VarBoolFromR4(FLOAT fltIn, VARIANT_BOOL * pboolOut);
extern HRESULT __export __stdcall VarBoolFromR8(DOUBLE dblIn, VARIANT_BOOL * pboolOut);
extern HRESULT __export __stdcall VarBoolFromDate(DATE dateIn, VARIANT_BOOL * pboolOut);
extern HRESULT __export __stdcall VarBoolFromCy(CY cyIn, VARIANT_BOOL * pboolOut);
extern HRESULT __export __stdcall VarBoolFromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, VARIANT_BOOL * pboolOut);
extern HRESULT __export __stdcall VarBoolFromDisp(IDispatch * pdispIn, LCID lcid, VARIANT_BOOL * pboolOut);
extern HRESULT __export __stdcall VarBoolFromI1(CHAR cIn, VARIANT_BOOL *pboolOut);
extern HRESULT __export __stdcall VarBoolFromUI2(USHORT uiIn, VARIANT_BOOL *pboolOut);
extern HRESULT __export __stdcall VarBoolFromUI4(ULONG ulIn, VARIANT_BOOL *pboolOut);
extern HRESULT __export __stdcall VarBoolFromDec(DECIMAL *pdecIn, VARIANT_BOOL *pboolOut);

extern HRESULT __export __stdcall VarI1FromUI1(BYTE bIn, CHAR *pcOut);
extern HRESULT __export __stdcall VarI1FromI2(SHORT uiIn, CHAR *pcOut);
extern HRESULT __export __stdcall VarI1FromI4(LONG lIn, CHAR *pcOut);
extern HRESULT __export __stdcall VarI1FromR4(FLOAT fltIn, CHAR *pcOut);
extern HRESULT __export __stdcall VarI1FromR8(DOUBLE dblIn, CHAR *pcOut);
extern HRESULT __export __stdcall VarI1FromDate(DATE dateIn, CHAR *pcOut);
extern HRESULT __export __stdcall VarI1FromCy(CY cyIn, CHAR *pcOut);
extern HRESULT __export __stdcall VarI1FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, CHAR *pcOut);
extern HRESULT __export __stdcall VarI1FromDisp(IDispatch *pdispIn, LCID lcid, CHAR *pcOut);
extern HRESULT __export __stdcall VarI1FromBool(VARIANT_BOOL boolIn, CHAR *pcOut);
extern HRESULT __export __stdcall VarI1FromUI2(USHORT uiIn, CHAR *pcOut);
extern HRESULT __export __stdcall VarI1FromUI4(ULONG ulIn, CHAR *pcOut);
extern HRESULT __export __stdcall VarI1FromDec(DECIMAL *pdecIn, CHAR *pcOut);

extern HRESULT __export __stdcall VarUI2FromUI1(BYTE bIn, USHORT *puiOut);
extern HRESULT __export __stdcall VarUI2FromI2(SHORT uiIn, USHORT *puiOut);
extern HRESULT __export __stdcall VarUI2FromI4(LONG lIn, USHORT *puiOut);
extern HRESULT __export __stdcall VarUI2FromR4(FLOAT fltIn, USHORT *puiOut);
extern HRESULT __export __stdcall VarUI2FromR8(DOUBLE dblIn, USHORT *puiOut);
extern HRESULT __export __stdcall VarUI2FromDate(DATE dateIn, USHORT *puiOut);
extern HRESULT __export __stdcall VarUI2FromCy(CY cyIn, USHORT *puiOut);
extern HRESULT __export __stdcall VarUI2FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, USHORT *puiOut);
extern HRESULT __export __stdcall VarUI2FromDisp(IDispatch *pdispIn, LCID lcid, USHORT *puiOut);
extern HRESULT __export __stdcall VarUI2FromBool(VARIANT_BOOL boolIn, USHORT *puiOut);
extern HRESULT __export __stdcall VarUI2FromI1(CHAR cIn, USHORT *puiOut);
extern HRESULT __export __stdcall VarUI2FromUI4(ULONG ulIn, USHORT *puiOut);
extern HRESULT __export __stdcall VarUI2FromDec(DECIMAL *pdecIn, USHORT *puiOut);

extern HRESULT __export __stdcall VarUI4FromUI1(BYTE bIn, ULONG *pulOut);
extern HRESULT __export __stdcall VarUI4FromI2(SHORT uiIn, ULONG *pulOut);
extern HRESULT __export __stdcall VarUI4FromI4(LONG lIn, ULONG *pulOut);
extern HRESULT __export __stdcall VarUI4FromR4(FLOAT fltIn, ULONG *pulOut);
extern HRESULT __export __stdcall VarUI4FromR8(DOUBLE dblIn, ULONG *pulOut);
extern HRESULT __export __stdcall VarUI4FromDate(DATE dateIn, ULONG *pulOut);
extern HRESULT __export __stdcall VarUI4FromCy(CY cyIn, ULONG *pulOut);
extern HRESULT __export __stdcall VarUI4FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, ULONG *pulOut);
extern HRESULT __export __stdcall VarUI4FromDisp(IDispatch *pdispIn, LCID lcid, ULONG *pulOut);
extern HRESULT __export __stdcall VarUI4FromBool(VARIANT_BOOL boolIn, ULONG *pulOut);
extern HRESULT __export __stdcall VarUI4FromI1(CHAR cIn, ULONG *pulOut);
extern HRESULT __export __stdcall VarUI4FromUI2(USHORT uiIn, ULONG *pulOut);
extern HRESULT __export __stdcall VarUI4FromDec(DECIMAL *pdecIn, ULONG *pulOut);

extern HRESULT __export __stdcall VarDecFromUI1(BYTE bIn, DECIMAL *pdecOut);
extern HRESULT __export __stdcall VarDecFromI2(SHORT uiIn, DECIMAL *pdecOut);
extern HRESULT __export __stdcall VarDecFromI4(LONG lIn, DECIMAL *pdecOut);
extern HRESULT __export __stdcall VarDecFromR4(FLOAT fltIn, DECIMAL *pdecOut);
extern HRESULT __export __stdcall VarDecFromR8(DOUBLE dblIn, DECIMAL *pdecOut);
extern HRESULT __export __stdcall VarDecFromDate(DATE dateIn, DECIMAL *pdecOut);
extern HRESULT __export __stdcall VarDecFromCy(CY cyIn, DECIMAL *pdecOut);
extern HRESULT __export __stdcall VarDecFromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, DECIMAL *pdecOut);
extern HRESULT __export __stdcall VarDecFromDisp(IDispatch *pdispIn, LCID lcid, DECIMAL *pdecOut);
extern HRESULT __export __stdcall VarDecFromBool(VARIANT_BOOL boolIn, DECIMAL *pdecOut);
extern HRESULT __export __stdcall VarDecFromI1(CHAR cIn, DECIMAL *pdecOut);
extern HRESULT __export __stdcall VarDecFromUI2(USHORT uiIn, DECIMAL *pdecOut);
extern HRESULT __export __stdcall VarDecFromUI4(ULONG ulIn, DECIMAL *pdecOut);
# 420 "/usr/local/arm-wince-pe/include/oleauto.h" 3
typedef struct {
    INT cDig;
    ULONG dwInFlags;
    ULONG dwOutFlags;
    INT cchUsed;
    INT nBaseShift;
    INT nPwr10;
} NUMPARSE;
# 465 "/usr/local/arm-wince-pe/include/oleauto.h" 3
extern HRESULT __export __stdcall VarParseNumFromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags,
            NUMPARSE * pnumprs, BYTE * rgbDig);

extern HRESULT __export __stdcall VarNumFromParseNum(NUMPARSE * pnumprs, BYTE * rgbDig,
            ULONG dwVtBits, VARIANT * pvar);
# 483 "/usr/local/arm-wince-pe/include/oleauto.h" 3
typedef struct {
    SYSTEMTIME st;
    USHORT wDayOfYear;
} UDATE;



extern HRESULT __export __stdcall VarDateFromUdate(UDATE *pudateIn, ULONG dwFlags, DATE *pdateOut);

extern HRESULT __export __stdcall VarUdateFromDate(DATE dateIn, ULONG dwFlags, UDATE *pudateOut);




extern HRESULT __export __stdcall GetAltMonthNames(LCID lcid, LPOLESTR * * prgp);







typedef ITypeLib * LPTYPELIB;







typedef LONG DISPID;
typedef DISPID MEMBERID;
# 526 "/usr/local/arm-wince-pe/include/oleauto.h" 3
typedef ITypeInfo * LPTYPEINFO;






typedef ITypeComp * LPTYPECOMP;






typedef ICreateTypeLib * LPCREATETYPELIB;

typedef ICreateTypeInfo * LPCREATETYPEINFO;
# 555 "/usr/local/arm-wince-pe/include/oleauto.h" 3
extern ULONG __export __stdcall
LHashValOfNameSys(SYSKIND syskind, LCID lcid, const OLECHAR * szName);
# 569 "/usr/local/arm-wince-pe/include/oleauto.h" 3
extern HRESULT __export __stdcall LoadTypeLib(const OLECHAR *szFile, ITypeLib ** pptlib);



typedef enum tagREGKIND
{
    REGKIND_DEFAULT,
    REGKIND_REGISTER,
    REGKIND_NONE
} REGKIND;

extern HRESULT __export __stdcall LoadTypeLibEx(LPCOLESTR szFile, REGKIND regkind,
            ITypeLib ** pptlib);



extern HRESULT __export __stdcall LoadRegTypeLib(const GUID * const rguid, WORD wVerMajor, WORD wVerMinor,
            LCID lcid, ITypeLib ** pptlib);



extern HRESULT __export __stdcall QueryPathOfRegTypeLib(const GUID * const guid, USHORT wMaj, USHORT wMin,
            LCID lcid, LPBSTR lpbstrPathName);



extern HRESULT __export __stdcall RegisterTypeLib(ITypeLib * ptlib, OLECHAR *szFullPath,
            OLECHAR *szHelpDir);




extern HRESULT __export __stdcall UnRegisterTypeLib(const GUID * const libID, WORD wVerMajor,
            WORD wVerMinor, LCID lcid, SYSKIND syskind);

extern HRESULT __export __stdcall CreateTypeLib(SYSKIND syskind, const OLECHAR *szFile,
            ICreateTypeLib ** ppctlib);

extern HRESULT __export __stdcall CreateTypeLib2(SYSKIND syskind, LPCOLESTR szFile,
            ICreateTypeLib2 **ppctlib);






typedef IDispatch * LPDISPATCH;

typedef struct tagPARAMDATA {
    OLECHAR * szName;
    VARTYPE vt;
} PARAMDATA, * LPPARAMDATA;

typedef struct tagMETHODDATA {
    OLECHAR * szName;
    PARAMDATA * ppdata;
    DISPID dispid;
    UINT iMeth;
    CALLCONV cc;
    UINT cArgs;
    WORD wFlags;
    VARTYPE vtReturn;
} METHODDATA, * LPMETHODDATA;

typedef struct tagINTERFACEDATA {
    METHODDATA * pmethdata;
    UINT cMembers;
} INTERFACEDATA, * LPINTERFACEDATA;






extern HRESULT __export __stdcall DispGetParam(DISPPARAMS * pdispparams, UINT position,
            VARTYPE vtTarg, VARIANT * pvarResult, UINT * puArgErr);



extern HRESULT __export __stdcall DispGetIDsOfNames(ITypeInfo * ptinfo, OLECHAR ** rgszNames,
            UINT cNames, DISPID * rgdispid);



extern HRESULT __export __stdcall DispInvoke(void * _this, ITypeInfo * ptinfo, DISPID dispidMember,
            WORD wFlags, DISPPARAMS * pparams, VARIANT * pvarResult,
            EXCEPINFO * pexcepinfo, UINT * puArgErr);



extern HRESULT __export __stdcall CreateDispTypeInfo(INTERFACEDATA * pidata, LCID lcid,
            ITypeInfo ** pptinfo);




extern HRESULT __export __stdcall CreateStdDispatch(IUnknown * punkOuter, void * pvThis,
            ITypeInfo * ptinfo, IUnknown ** ppunkStdDisp);




extern HRESULT __export __stdcall DispCallFunc(void * pvInstance, ULONG oVft, CALLCONV cc,
            VARTYPE vtReturn, UINT cActuals, VARTYPE * prgvt,
            VARIANTARG ** prgpvarg, VARIANT * pvargResult);
# 684 "/usr/local/arm-wince-pe/include/oleauto.h" 3
extern HRESULT __export __stdcall RegisterActiveObject(IUnknown * punk, const CLSID * const rclsid,
            DWORD dwFlags, DWORD * pdwRegister);

extern HRESULT __export __stdcall RevokeActiveObject(DWORD dwRegister, void * pvReserved);

extern HRESULT __export __stdcall GetActiveObject(const CLSID * const rclsid, void * pvReserved,
            IUnknown ** ppunk);





extern HRESULT __export __stdcall SetErrorInfo(ULONG dwReserved, IErrorInfo * perrinfo);
extern HRESULT __export __stdcall GetErrorInfo(ULONG dwReserved, IErrorInfo ** pperrinfo);
extern HRESULT __export __stdcall CreateErrorInfo(ICreateErrorInfo ** pperrinfo);





extern ULONG __export __stdcall OaBuildVersion(void);

extern void __export __stdcall ClearCustData(LPCUSTDATA pCustData);
# 768 "/usr/local/arm-wince-pe/include/oleauto.h" 3
# 1 "/usr/local/arm-wince-pe/include/poppack.h" 1 3
# 34 "/usr/local/arm-wince-pe/include/poppack.h" 3
#pragma pack()
# 769 "/usr/local/arm-wince-pe/include/oleauto.h" 2 3
# 30 "/usr/local/arm-wince-pe/include/ole2.h" 2 3
# 64 "/usr/local/arm-wince-pe/include/ole2.h" 3
# 1 "/usr/local/arm-wince-pe/include/oleidl.h" 1 3
# 12 "/usr/local/arm-wince-pe/include/oleidl.h" 3
# 1 "/usr/local/arm-wince-pe/include/rpc.h" 1 3
# 13 "/usr/local/arm-wince-pe/include/oleidl.h" 2 3
# 30 "/usr/local/arm-wince-pe/include/oleidl.h" 3
typedef struct IOleAdviseHolder IOleAdviseHolder;





typedef struct IOleCache IOleCache;





typedef struct IOleCache2 IOleCache2;





typedef struct IOleCacheControl IOleCacheControl;





typedef struct IParseDisplayName IParseDisplayName;





typedef struct IOleContainer IOleContainer;





typedef struct IOleClientSite IOleClientSite;





typedef struct IOleObject IOleObject;





typedef struct IOleWindow IOleWindow;





typedef struct IOleLink IOleLink;





typedef struct IOleItemContainer IOleItemContainer;





typedef struct IOleInPlaceUIWindow IOleInPlaceUIWindow;





typedef struct IOleInPlaceActiveObject IOleInPlaceActiveObject;





typedef struct IOleInPlaceFrame IOleInPlaceFrame;





typedef struct IOleInPlaceObject IOleInPlaceObject;





typedef struct IOleInPlaceSite IOleInPlaceSite;





typedef struct IContinue IContinue;





typedef struct IViewObject IViewObject;





typedef struct IViewObject2 IViewObject2;





typedef struct IDropSource IDropSource;





typedef struct IDropTarget IDropTarget;





typedef struct IEnumOLEVERB IEnumOLEVERB;




# 1 "/usr/local/arm-wince-pe/include/objidl.h" 1 3
# 12 "/usr/local/arm-wince-pe/include/objidl.h" 3
# 1 "/usr/local/arm-wince-pe/include/rpc.h" 1 3
# 13 "/usr/local/arm-wince-pe/include/objidl.h" 2 3
# 162 "/usr/local/arm-wince-pe/include/oleidl.h" 2 3

void * MIDL_user_allocate(size_t);
void MIDL_user_free( void * );
# 184 "/usr/local/arm-wince-pe/include/oleidl.h" 3
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_v0_0_s_ifspec;
# 198 "/usr/local/arm-wince-pe/include/oleidl.h" 3
typedef IOleAdviseHolder *LPOLEADVISEHOLDER;


extern const IID IID_IOleAdviseHolder;
# 230 "/usr/local/arm-wince-pe/include/oleidl.h" 3
    typedef struct IOleAdviseHolderVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IOleAdviseHolder * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IOleAdviseHolder * This);

        ULONG ( __export __stdcall *Release )(
            IOleAdviseHolder * This);

        HRESULT ( __export __stdcall *Advise )(
            IOleAdviseHolder * This,
                               IAdviseSink *pAdvise,
                        DWORD *pdwConnection);

        HRESULT ( __export __stdcall *Unadvise )(
            IOleAdviseHolder * This,
                       DWORD dwConnection);

        HRESULT ( __export __stdcall *EnumAdvise )(
            IOleAdviseHolder * This,
                        IEnumSTATDATA * *ppenumAdvise);

        HRESULT ( __export __stdcall *SendOnRename )(
            IOleAdviseHolder * This,
                               IMoniker *pmk);

        HRESULT ( __export __stdcall *SendOnSave )(
            IOleAdviseHolder * This);

        HRESULT ( __export __stdcall *SendOnClose )(
            IOleAdviseHolder * This);

       
    } IOleAdviseHolderVtbl;

    struct IOleAdviseHolder
    {
        struct IOleAdviseHolderVtbl *lpVtbl;
    };
# 316 "/usr/local/arm-wince-pe/include/oleidl.h" 3
HRESULT __export __stdcall IOleAdviseHolder_Advise_Proxy(
    IOleAdviseHolder * This,
                       IAdviseSink *pAdvise,
                DWORD *pdwConnection);


void IOleAdviseHolder_Advise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleAdviseHolder_Unadvise_Proxy(
    IOleAdviseHolder * This,
               DWORD dwConnection);


void IOleAdviseHolder_Unadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleAdviseHolder_EnumAdvise_Proxy(
    IOleAdviseHolder * This,
                IEnumSTATDATA * *ppenumAdvise);


void IOleAdviseHolder_EnumAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleAdviseHolder_SendOnRename_Proxy(
    IOleAdviseHolder * This,
                       IMoniker *pmk);


void IOleAdviseHolder_SendOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleAdviseHolder_SendOnSave_Proxy(
    IOleAdviseHolder * This);


void IOleAdviseHolder_SendOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleAdviseHolder_SendOnClose_Proxy(
    IOleAdviseHolder * This);


void IOleAdviseHolder_SendOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 402 "/usr/local/arm-wince-pe/include/oleidl.h" 3
typedef IOleCache *LPOLECACHE;


extern const IID IID_IOleCache;
# 436 "/usr/local/arm-wince-pe/include/oleidl.h" 3
    typedef struct IOleCacheVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IOleCache * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IOleCache * This);

        ULONG ( __export __stdcall *Release )(
            IOleCache * This);

        HRESULT ( __export __stdcall *Cache )(
            IOleCache * This,
                               FORMATETC *pformatetc,
                       DWORD advf,
                        DWORD *pdwConnection);

        HRESULT ( __export __stdcall *Uncache )(
            IOleCache * This,
                       DWORD dwConnection);

        HRESULT ( __export __stdcall *EnumCache )(
            IOleCache * This,
                        IEnumSTATDATA * *ppenumSTATDATA);

        HRESULT ( __export __stdcall *InitCache )(
            IOleCache * This,
                               IDataObject *pDataObject);

        HRESULT ( __export __stdcall *SetData )(
            IOleCache * This,
                               FORMATETC *pformatetc,
                               STGMEDIUM *pmedium,
                       BOOL fRelease);

       
    } IOleCacheVtbl;

    struct IOleCache
    {
        struct IOleCacheVtbl *lpVtbl;
    };
# 520 "/usr/local/arm-wince-pe/include/oleidl.h" 3
HRESULT __export __stdcall IOleCache_Cache_Proxy(
    IOleCache * This,
                       FORMATETC *pformatetc,
               DWORD advf,
                DWORD *pdwConnection);


void IOleCache_Cache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleCache_Uncache_Proxy(
    IOleCache * This,
               DWORD dwConnection);


void IOleCache_Uncache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleCache_EnumCache_Proxy(
    IOleCache * This,
                IEnumSTATDATA * *ppenumSTATDATA);


void IOleCache_EnumCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleCache_InitCache_Proxy(
    IOleCache * This,
                       IDataObject *pDataObject);


void IOleCache_InitCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleCache_SetData_Proxy(
    IOleCache * This,
                       FORMATETC *pformatetc,
                       STGMEDIUM *pmedium,
               BOOL fRelease);


void IOleCache_SetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 599 "/usr/local/arm-wince-pe/include/oleidl.h" 3
typedef IOleCache2 *LPOLECACHE2;
# 619 "/usr/local/arm-wince-pe/include/oleidl.h" 3
typedef
enum tagDISCARDCACHE
    { DISCARDCACHE_SAVEIFDIRTY = 0,
        DISCARDCACHE_NOSAVE = 1
    } DISCARDCACHE;


extern const IID IID_IOleCache2;
# 646 "/usr/local/arm-wince-pe/include/oleidl.h" 3
    typedef struct IOleCache2Vtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IOleCache2 * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IOleCache2 * This);

        ULONG ( __export __stdcall *Release )(
            IOleCache2 * This);

        HRESULT ( __export __stdcall *Cache )(
            IOleCache2 * This,
                               FORMATETC *pformatetc,
                       DWORD advf,
                        DWORD *pdwConnection);

        HRESULT ( __export __stdcall *Uncache )(
            IOleCache2 * This,
                       DWORD dwConnection);

        HRESULT ( __export __stdcall *EnumCache )(
            IOleCache2 * This,
                        IEnumSTATDATA * *ppenumSTATDATA);

        HRESULT ( __export __stdcall *InitCache )(
            IOleCache2 * This,
                               IDataObject *pDataObject);

        HRESULT ( __export __stdcall *SetData )(
            IOleCache2 * This,
                               FORMATETC *pformatetc,
                               STGMEDIUM *pmedium,
                       BOOL fRelease);

                      HRESULT ( __export __stdcall *UpdateCache )(
            IOleCache2 * This,
                       LPDATAOBJECT pDataObject,
                       DWORD grfUpdf,
                       LPVOID pReserved);

        HRESULT ( __export __stdcall *DiscardCache )(
            IOleCache2 * This,
                       DWORD dwDiscardOptions);

       
    } IOleCache2Vtbl;

    struct IOleCache2
    {
        struct IOleCache2Vtbl *lpVtbl;
    };
# 747 "/usr/local/arm-wince-pe/include/oleidl.h" 3
                HRESULT __export __stdcall IOleCache2_RemoteUpdateCache_Proxy(
    IOleCache2 * This,
               LPDATAOBJECT pDataObject,
               DWORD grfUpdf,
               DWORD pReserved);


void IOleCache2_RemoteUpdateCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleCache2_DiscardCache_Proxy(
    IOleCache2 * This,
               DWORD dwDiscardOptions);


void IOleCache2_DiscardCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 788 "/usr/local/arm-wince-pe/include/oleidl.h" 3
typedef IOleCacheControl *LPOLECACHECONTROL;


extern const IID IID_IOleCacheControl;
# 808 "/usr/local/arm-wince-pe/include/oleidl.h" 3
    typedef struct IOleCacheControlVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IOleCacheControl * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IOleCacheControl * This);

        ULONG ( __export __stdcall *Release )(
            IOleCacheControl * This);

        HRESULT ( __export __stdcall *OnRun )(
            IOleCacheControl * This,
            LPDATAOBJECT pDataObject);

        HRESULT ( __export __stdcall *OnStop )(
            IOleCacheControl * This);

       
    } IOleCacheControlVtbl;

    struct IOleCacheControl
    {
        struct IOleCacheControlVtbl *lpVtbl;
    };
# 866 "/usr/local/arm-wince-pe/include/oleidl.h" 3
HRESULT __export __stdcall IOleCacheControl_OnRun_Proxy(
    IOleCacheControl * This,
    LPDATAOBJECT pDataObject);


void IOleCacheControl_OnRun_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleCacheControl_OnStop_Proxy(
    IOleCacheControl * This);


void IOleCacheControl_OnStop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 904 "/usr/local/arm-wince-pe/include/oleidl.h" 3
typedef IParseDisplayName *LPPARSEDISPLAYNAME;


extern const IID IID_IParseDisplayName;
# 925 "/usr/local/arm-wince-pe/include/oleidl.h" 3
    typedef struct IParseDisplayNameVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IParseDisplayName * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IParseDisplayName * This);

        ULONG ( __export __stdcall *Release )(
            IParseDisplayName * This);

        HRESULT ( __export __stdcall *ParseDisplayName )(
            IParseDisplayName * This,
                               IBindCtx *pbc,
                       LPOLESTR pszDisplayName,
                        ULONG *pchEaten,
                        IMoniker * *ppmkOut);

       
    } IParseDisplayNameVtbl;

    struct IParseDisplayName
    {
        struct IParseDisplayNameVtbl *lpVtbl;
    };
# 980 "/usr/local/arm-wince-pe/include/oleidl.h" 3
HRESULT __export __stdcall IParseDisplayName_ParseDisplayName_Proxy(
    IParseDisplayName * This,
                       IBindCtx *pbc,
               LPOLESTR pszDisplayName,
                ULONG *pchEaten,
                IMoniker * *ppmkOut);


void IParseDisplayName_ParseDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 1010 "/usr/local/arm-wince-pe/include/oleidl.h" 3
typedef IOleContainer *LPOLECONTAINER;


extern const IID IID_IOleContainer;
# 1032 "/usr/local/arm-wince-pe/include/oleidl.h" 3
    typedef struct IOleContainerVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IOleContainer * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IOleContainer * This);

        ULONG ( __export __stdcall *Release )(
            IOleContainer * This);

        HRESULT ( __export __stdcall *ParseDisplayName )(
            IOleContainer * This,
                               IBindCtx *pbc,
                       LPOLESTR pszDisplayName,
                        ULONG *pchEaten,
                        IMoniker * *ppmkOut);

        HRESULT ( __export __stdcall *EnumObjects )(
            IOleContainer * This,
                       DWORD grfFlags,
                        IEnumUnknown * *ppenum);

        HRESULT ( __export __stdcall *LockContainer )(
            IOleContainer * This,
                       BOOL fLock);

       
    } IOleContainerVtbl;

    struct IOleContainer
    {
        struct IOleContainerVtbl *lpVtbl;
    };
# 1103 "/usr/local/arm-wince-pe/include/oleidl.h" 3
HRESULT __export __stdcall IOleContainer_EnumObjects_Proxy(
    IOleContainer * This,
               DWORD grfFlags,
                IEnumUnknown * *ppenum);


void IOleContainer_EnumObjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleContainer_LockContainer_Proxy(
    IOleContainer * This,
               BOOL fLock);


void IOleContainer_LockContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 1143 "/usr/local/arm-wince-pe/include/oleidl.h" 3
typedef IOleClientSite *LPOLECLIENTSITE;


extern const IID IID_IOleClientSite;
# 1175 "/usr/local/arm-wince-pe/include/oleidl.h" 3
    typedef struct IOleClientSiteVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IOleClientSite * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IOleClientSite * This);

        ULONG ( __export __stdcall *Release )(
            IOleClientSite * This);

        HRESULT ( __export __stdcall *SaveObject )(
            IOleClientSite * This);

        HRESULT ( __export __stdcall *GetMoniker )(
            IOleClientSite * This,
                       DWORD dwAssign,
                       DWORD dwWhichMoniker,
                        IMoniker * *ppmk);

        HRESULT ( __export __stdcall *GetContainer )(
            IOleClientSite * This,
                        IOleContainer * *ppContainer);

        HRESULT ( __export __stdcall *ShowObject )(
            IOleClientSite * This);

        HRESULT ( __export __stdcall *OnShowWindow )(
            IOleClientSite * This,
                       BOOL fShow);

        HRESULT ( __export __stdcall *RequestNewObjectLayout )(
            IOleClientSite * This);

       
    } IOleClientSiteVtbl;

    struct IOleClientSite
    {
        struct IOleClientSiteVtbl *lpVtbl;
    };
# 1261 "/usr/local/arm-wince-pe/include/oleidl.h" 3
HRESULT __export __stdcall IOleClientSite_SaveObject_Proxy(
    IOleClientSite * This);


void IOleClientSite_SaveObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleClientSite_GetMoniker_Proxy(
    IOleClientSite * This,
               DWORD dwAssign,
               DWORD dwWhichMoniker,
                IMoniker * *ppmk);


void IOleClientSite_GetMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleClientSite_GetContainer_Proxy(
    IOleClientSite * This,
                IOleContainer * *ppContainer);


void IOleClientSite_GetContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleClientSite_ShowObject_Proxy(
    IOleClientSite * This);


void IOleClientSite_ShowObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleClientSite_OnShowWindow_Proxy(
    IOleClientSite * This,
               BOOL fShow);


void IOleClientSite_OnShowWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleClientSite_RequestNewObjectLayout_Proxy(
    IOleClientSite * This);


void IOleClientSite_RequestNewObjectLayout_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 1347 "/usr/local/arm-wince-pe/include/oleidl.h" 3
typedef IOleObject *LPOLEOBJECT;

typedef
enum tagOLEGETMONIKER
    { OLEGETMONIKER_ONLYIFTHERE = 1,
        OLEGETMONIKER_FORCEASSIGN = 2,
        OLEGETMONIKER_UNASSIGN = 3,
        OLEGETMONIKER_TEMPFORUSER = 4
    } OLEGETMONIKER;

typedef
enum tagOLEWHICHMK
    { OLEWHICHMK_CONTAINER = 1,
        OLEWHICHMK_OBJREL = 2,
        OLEWHICHMK_OBJFULL = 3
    } OLEWHICHMK;

typedef
enum tagUSERCLASSTYPE
    { USERCLASSTYPE_FULL = 1,
        USERCLASSTYPE_SHORT = 2,
        USERCLASSTYPE_APPNAME = 3
    } USERCLASSTYPE;

typedef
enum tagOLEMISC
    { OLEMISC_RECOMPOSEONRESIZE = 0x1,
        OLEMISC_ONLYICONIC = 0x2,
        OLEMISC_INSERTNOTREPLACE = 0x4,
        OLEMISC_STATIC = 0x8,
        OLEMISC_CANTLINKINSIDE = 0x10,
        OLEMISC_CANLINKBYOLE1 = 0x20,
        OLEMISC_ISLINKOBJECT = 0x40,
        OLEMISC_INSIDEOUT = 0x80,
        OLEMISC_ACTIVATEWHENVISIBLE = 0x100,
        OLEMISC_RENDERINGISDEVICEINDEPENDENT = 0x200,
        OLEMISC_INVISIBLEATRUNTIME = 0x400,
        OLEMISC_ALWAYSRUN = 0x800,
        OLEMISC_ACTSLIKEBUTTON = 0x1000,
        OLEMISC_ACTSLIKELABEL = 0x2000,
        OLEMISC_NOUIACTIVATE = 0x4000,
        OLEMISC_ALIGNABLE = 0x8000,
        OLEMISC_SIMPLEFRAME = 0x10000,
        OLEMISC_SETCLIENTSITEFIRST = 0x20000,
        OLEMISC_IMEMODE = 0x40000,
        OLEMISC_IGNOREACTIVATEWHENVISIBLE = 0x80000,
        OLEMISC_WANTSTOMENUMERGE = 0x100000,
        OLEMISC_SUPPORTSMULTILEVELUNDO = 0x200000
    } OLEMISC;

typedef
enum tagOLECLOSE
    { OLECLOSE_SAVEIFDIRTY = 0,
        OLECLOSE_NOSAVE = 1,
        OLECLOSE_PROMPTSAVE = 2
    } OLECLOSE;


extern const IID IID_IOleObject;
# 1495 "/usr/local/arm-wince-pe/include/oleidl.h" 3
    typedef struct IOleObjectVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IOleObject * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IOleObject * This);

        ULONG ( __export __stdcall *Release )(
            IOleObject * This);

        HRESULT ( __export __stdcall *SetClientSite )(
            IOleObject * This,
                               IOleClientSite *pClientSite);

        HRESULT ( __export __stdcall *GetClientSite )(
            IOleObject * This,
                        IOleClientSite * *ppClientSite);

        HRESULT ( __export __stdcall *SetHostNames )(
            IOleObject * This,
                       LPCOLESTR szContainerApp,
                               LPCOLESTR szContainerObj);

        HRESULT ( __export __stdcall *Close )(
            IOleObject * This,
                       DWORD dwSaveOption);

        HRESULT ( __export __stdcall *SetMoniker )(
            IOleObject * This,
                       DWORD dwWhichMoniker,
                               IMoniker *pmk);

        HRESULT ( __export __stdcall *GetMoniker )(
            IOleObject * This,
                       DWORD dwAssign,
                       DWORD dwWhichMoniker,
                        IMoniker * *ppmk);

        HRESULT ( __export __stdcall *InitFromData )(
            IOleObject * This,
                               IDataObject *pDataObject,
                       BOOL fCreation,
                       DWORD dwReserved);

        HRESULT ( __export __stdcall *GetClipboardData )(
            IOleObject * This,
                       DWORD dwReserved,
                        IDataObject * *ppDataObject);

        HRESULT ( __export __stdcall *DoVerb )(
            IOleObject * This,
                       LONG iVerb,
                               LPMSG lpmsg,
                               IOleClientSite *pActiveSite,
                       LONG lindex,
                       HWND hwndParent,
                               LPCRECT lprcPosRect);

        HRESULT ( __export __stdcall *EnumVerbs )(
            IOleObject * This,
                        IEnumOLEVERB * *ppEnumOleVerb);

        HRESULT ( __export __stdcall *Update )(
            IOleObject * This);

        HRESULT ( __export __stdcall *IsUpToDate )(
            IOleObject * This);

        HRESULT ( __export __stdcall *GetUserClassID )(
            IOleObject * This,
                        CLSID *pClsid);

        HRESULT ( __export __stdcall *GetUserType )(
            IOleObject * This,
                       DWORD dwFormOfType,
                        LPOLESTR *pszUserType);

        HRESULT ( __export __stdcall *SetExtent )(
            IOleObject * This,
                       DWORD dwDrawAspect,
                       SIZEL *psizel);

        HRESULT ( __export __stdcall *GetExtent )(
            IOleObject * This,
                       DWORD dwDrawAspect,
                        SIZEL *psizel);

        HRESULT ( __export __stdcall *Advise )(
            IOleObject * This,
                               IAdviseSink *pAdvSink,
                        DWORD *pdwConnection);

        HRESULT ( __export __stdcall *Unadvise )(
            IOleObject * This,
                       DWORD dwConnection);

        HRESULT ( __export __stdcall *EnumAdvise )(
            IOleObject * This,
                        IEnumSTATDATA * *ppenumAdvise);

        HRESULT ( __export __stdcall *GetMiscStatus )(
            IOleObject * This,
                       DWORD dwAspect,
                        DWORD *pdwStatus);

        HRESULT ( __export __stdcall *SetColorScheme )(
            IOleObject * This,
                       LOGPALETTE *pLogpal);

       
    } IOleObjectVtbl;

    struct IOleObject
    {
        struct IOleObjectVtbl *lpVtbl;
    };
# 1702 "/usr/local/arm-wince-pe/include/oleidl.h" 3
HRESULT __export __stdcall IOleObject_SetClientSite_Proxy(
    IOleObject * This,
                       IOleClientSite *pClientSite);


void IOleObject_SetClientSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleObject_GetClientSite_Proxy(
    IOleObject * This,
                IOleClientSite * *ppClientSite);


void IOleObject_GetClientSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleObject_SetHostNames_Proxy(
    IOleObject * This,
               LPCOLESTR szContainerApp,
                       LPCOLESTR szContainerObj);


void IOleObject_SetHostNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleObject_Close_Proxy(
    IOleObject * This,
               DWORD dwSaveOption);


void IOleObject_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleObject_SetMoniker_Proxy(
    IOleObject * This,
               DWORD dwWhichMoniker,
                       IMoniker *pmk);


void IOleObject_SetMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleObject_GetMoniker_Proxy(
    IOleObject * This,
               DWORD dwAssign,
               DWORD dwWhichMoniker,
                IMoniker * *ppmk);


void IOleObject_GetMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleObject_InitFromData_Proxy(
    IOleObject * This,
                       IDataObject *pDataObject,
               BOOL fCreation,
               DWORD dwReserved);


void IOleObject_InitFromData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleObject_GetClipboardData_Proxy(
    IOleObject * This,
               DWORD dwReserved,
                IDataObject * *ppDataObject);


void IOleObject_GetClipboardData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleObject_DoVerb_Proxy(
    IOleObject * This,
               LONG iVerb,
                       LPMSG lpmsg,
                       IOleClientSite *pActiveSite,
               LONG lindex,
               HWND hwndParent,
                       LPCRECT lprcPosRect);


void IOleObject_DoVerb_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleObject_EnumVerbs_Proxy(
    IOleObject * This,
                IEnumOLEVERB * *ppEnumOleVerb);


void IOleObject_EnumVerbs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleObject_Update_Proxy(
    IOleObject * This);


void IOleObject_Update_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleObject_IsUpToDate_Proxy(
    IOleObject * This);


void IOleObject_IsUpToDate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleObject_GetUserClassID_Proxy(
    IOleObject * This,
                CLSID *pClsid);


void IOleObject_GetUserClassID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleObject_GetUserType_Proxy(
    IOleObject * This,
               DWORD dwFormOfType,
                LPOLESTR *pszUserType);


void IOleObject_GetUserType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleObject_SetExtent_Proxy(
    IOleObject * This,
               DWORD dwDrawAspect,
               SIZEL *psizel);


void IOleObject_SetExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleObject_GetExtent_Proxy(
    IOleObject * This,
               DWORD dwDrawAspect,
                SIZEL *psizel);


void IOleObject_GetExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleObject_Advise_Proxy(
    IOleObject * This,
                       IAdviseSink *pAdvSink,
                DWORD *pdwConnection);


void IOleObject_Advise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleObject_Unadvise_Proxy(
    IOleObject * This,
               DWORD dwConnection);


void IOleObject_Unadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleObject_EnumAdvise_Proxy(
    IOleObject * This,
                IEnumSTATDATA * *ppenumAdvise);


void IOleObject_EnumAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleObject_GetMiscStatus_Proxy(
    IOleObject * This,
               DWORD dwAspect,
                DWORD *pdwStatus);


void IOleObject_GetMiscStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleObject_SetColorScheme_Proxy(
    IOleObject * This,
               LOGPALETTE *pLogpal);


void IOleObject_SetColorScheme_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 1984 "/usr/local/arm-wince-pe/include/oleidl.h" 3
typedef
enum tagOLERENDER
    { OLERENDER_NONE = 0,
        OLERENDER_DRAW = 1,
        OLERENDER_FORMAT = 2,
        OLERENDER_ASIS = 3
    } OLERENDER;

typedef OLERENDER *LPOLERENDER;

typedef struct tagOBJECTDESCRIPTOR
    {
    ULONG cbSize;
    CLSID clsid;
    DWORD dwDrawAspect;
    SIZEL sizel;
    POINTL pointl;
    DWORD dwStatus;
    DWORD dwFullUserTypeName;
    DWORD dwSrcOfCopy;
    } OBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *POBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *LPOBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *PLINKSRCDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *LPLINKSRCDESCRIPTOR;



extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec;
extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec;
# 2033 "/usr/local/arm-wince-pe/include/oleidl.h" 3
typedef IOleWindow *LPOLEWINDOW;


extern const IID IID_IOleWindow;
# 2054 "/usr/local/arm-wince-pe/include/oleidl.h" 3
    typedef struct IOleWindowVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IOleWindow * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IOleWindow * This);

        ULONG ( __export __stdcall *Release )(
            IOleWindow * This);

                           HRESULT ( __export __stdcall *GetWindow )(
            IOleWindow * This,
                        HWND *phwnd);

        HRESULT ( __export __stdcall *ContextSensitiveHelp )(
            IOleWindow * This,
                       BOOL fEnterMode);

       
    } IOleWindowVtbl;

    struct IOleWindow
    {
        struct IOleWindowVtbl *lpVtbl;
    };
# 2113 "/usr/local/arm-wince-pe/include/oleidl.h" 3
                   HRESULT __export __stdcall IOleWindow_GetWindow_Proxy(
    IOleWindow * This,
                HWND *phwnd);


void IOleWindow_GetWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleWindow_ContextSensitiveHelp_Proxy(
    IOleWindow * This,
               BOOL fEnterMode);


void IOleWindow_ContextSensitiveHelp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2152 "/usr/local/arm-wince-pe/include/oleidl.h" 3
typedef IOleLink *LPOLELINK;

typedef
enum tagOLEUPDATE
    { OLEUPDATE_ALWAYS = 1,
        OLEUPDATE_ONCALL = 3
    } OLEUPDATE;

typedef OLEUPDATE *LPOLEUPDATE;

typedef OLEUPDATE *POLEUPDATE;

typedef
enum tagOLELINKBIND
    { OLELINKBIND_EVENIFCLASSDIFF = 1
    } OLELINKBIND;


extern const IID IID_IOleLink;
# 2215 "/usr/local/arm-wince-pe/include/oleidl.h" 3
    typedef struct IOleLinkVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IOleLink * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IOleLink * This);

        ULONG ( __export __stdcall *Release )(
            IOleLink * This);

        HRESULT ( __export __stdcall *SetUpdateOptions )(
            IOleLink * This,
                       DWORD dwUpdateOpt);

        HRESULT ( __export __stdcall *GetUpdateOptions )(
            IOleLink * This,
                        DWORD *pdwUpdateOpt);

        HRESULT ( __export __stdcall *SetSourceMoniker )(
            IOleLink * This,
                               IMoniker *pmk,
                       const CLSID * const rclsid);

        HRESULT ( __export __stdcall *GetSourceMoniker )(
            IOleLink * This,
                        IMoniker * *ppmk);

        HRESULT ( __export __stdcall *SetSourceDisplayName )(
            IOleLink * This,
                       LPCOLESTR pszStatusText);

        HRESULT ( __export __stdcall *GetSourceDisplayName )(
            IOleLink * This,
                        LPOLESTR *ppszDisplayName);

        HRESULT ( __export __stdcall *BindToSource )(
            IOleLink * This,
                       DWORD bindflags,
                               IBindCtx *pbc);

        HRESULT ( __export __stdcall *BindIfRunning )(
            IOleLink * This);

        HRESULT ( __export __stdcall *GetBoundSource )(
            IOleLink * This,
                        IUnknown * *ppunk);

        HRESULT ( __export __stdcall *UnbindSource )(
            IOleLink * This);

        HRESULT ( __export __stdcall *Update )(
            IOleLink * This,
                               IBindCtx *pbc);

       
    } IOleLinkVtbl;

    struct IOleLink
    {
        struct IOleLinkVtbl *lpVtbl;
    };
# 2337 "/usr/local/arm-wince-pe/include/oleidl.h" 3
HRESULT __export __stdcall IOleLink_SetUpdateOptions_Proxy(
    IOleLink * This,
               DWORD dwUpdateOpt);


void IOleLink_SetUpdateOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleLink_GetUpdateOptions_Proxy(
    IOleLink * This,
                DWORD *pdwUpdateOpt);


void IOleLink_GetUpdateOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleLink_SetSourceMoniker_Proxy(
    IOleLink * This,
                       IMoniker *pmk,
               const CLSID * const rclsid);


void IOleLink_SetSourceMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleLink_GetSourceMoniker_Proxy(
    IOleLink * This,
                IMoniker * *ppmk);


void IOleLink_GetSourceMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleLink_SetSourceDisplayName_Proxy(
    IOleLink * This,
               LPCOLESTR pszStatusText);


void IOleLink_SetSourceDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleLink_GetSourceDisplayName_Proxy(
    IOleLink * This,
                LPOLESTR *ppszDisplayName);


void IOleLink_GetSourceDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleLink_BindToSource_Proxy(
    IOleLink * This,
               DWORD bindflags,
                       IBindCtx *pbc);


void IOleLink_BindToSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleLink_BindIfRunning_Proxy(
    IOleLink * This);


void IOleLink_BindIfRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleLink_GetBoundSource_Proxy(
    IOleLink * This,
                IUnknown * *ppunk);


void IOleLink_GetBoundSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleLink_UnbindSource_Proxy(
    IOleLink * This);


void IOleLink_UnbindSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleLink_Update_Proxy(
    IOleLink * This,
                       IBindCtx *pbc);


void IOleLink_Update_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2484 "/usr/local/arm-wince-pe/include/oleidl.h" 3
typedef IOleItemContainer *LPOLEITEMCONTAINER;

typedef
enum tagBINDSPEED
    { BINDSPEED_INDEFINITE = 1,
        BINDSPEED_MODERATE = 2,
        BINDSPEED_IMMEDIATE = 3
    } BINDSPEED;

typedef
enum tagOLECONTF
    { OLECONTF_EMBEDDINGS = 1,
        OLECONTF_LINKS = 2,
        OLECONTF_OTHERS = 4,
        OLECONTF_ONLYUSER = 8,
        OLECONTF_ONLYIFRUNNING = 16
    } OLECONTF;


extern const IID IID_IOleItemContainer;
# 2531 "/usr/local/arm-wince-pe/include/oleidl.h" 3
    typedef struct IOleItemContainerVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IOleItemContainer * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IOleItemContainer * This);

        ULONG ( __export __stdcall *Release )(
            IOleItemContainer * This);

        HRESULT ( __export __stdcall *ParseDisplayName )(
            IOleItemContainer * This,
                               IBindCtx *pbc,
                       LPOLESTR pszDisplayName,
                        ULONG *pchEaten,
                        IMoniker * *ppmkOut);

        HRESULT ( __export __stdcall *EnumObjects )(
            IOleItemContainer * This,
                       DWORD grfFlags,
                        IEnumUnknown * *ppenum);

        HRESULT ( __export __stdcall *LockContainer )(
            IOleItemContainer * This,
                       BOOL fLock);

                      HRESULT ( __export __stdcall *GetObjectA )(
            IOleItemContainer * This,
                       LPOLESTR pszItem,
                       DWORD dwSpeedNeeded,
                               IBindCtx *pbc,
                       const IID * const riid,
                                void * *ppvObject);

                      HRESULT ( __export __stdcall *GetObjectStorage )(
            IOleItemContainer * This,
                       LPOLESTR pszItem,
                               IBindCtx *pbc,
                       const IID * const riid,
                                void * *ppvStorage);

        HRESULT ( __export __stdcall *IsRunning )(
            IOleItemContainer * This,
                       LPOLESTR pszItem);

       
    } IOleItemContainerVtbl;

    struct IOleItemContainer
    {
        struct IOleItemContainerVtbl *lpVtbl;
    };
# 2631 "/usr/local/arm-wince-pe/include/oleidl.h" 3
                HRESULT __export __stdcall IOleItemContainer_RemoteGetObject_Proxy(
    IOleItemContainer * This,
               LPOLESTR pszItem,
               DWORD dwSpeedNeeded,
                       IBindCtx *pbc,
               const IID * const riid,
                        IUnknown * *ppvObject);


void IOleItemContainer_RemoteGetObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall IOleItemContainer_RemoteGetObjectStorage_Proxy(
    IOleItemContainer * This,
               LPOLESTR pszItem,
                       IBindCtx *pbc,
               const IID * const riid,
                        IUnknown * *ppvStorage);


void IOleItemContainer_RemoteGetObjectStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleItemContainer_IsRunning_Proxy(
    IOleItemContainer * This,
               LPOLESTR pszItem);


void IOleItemContainer_IsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2689 "/usr/local/arm-wince-pe/include/oleidl.h" 3
typedef IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW;

typedef RECT BORDERWIDTHS;

typedef LPRECT LPBORDERWIDTHS;

typedef LPCRECT LPCBORDERWIDTHS;


extern const IID IID_IOleInPlaceUIWindow;
# 2723 "/usr/local/arm-wince-pe/include/oleidl.h" 3
    typedef struct IOleInPlaceUIWindowVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IOleInPlaceUIWindow * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IOleInPlaceUIWindow * This);

        ULONG ( __export __stdcall *Release )(
            IOleInPlaceUIWindow * This);

                           HRESULT ( __export __stdcall *GetWindow )(
            IOleInPlaceUIWindow * This,
                        HWND *phwnd);

        HRESULT ( __export __stdcall *ContextSensitiveHelp )(
            IOleInPlaceUIWindow * This,
                       BOOL fEnterMode);

                           HRESULT ( __export __stdcall *GetBorder )(
            IOleInPlaceUIWindow * This,
                        LPRECT lprectBorder);

                           HRESULT ( __export __stdcall *RequestBorderSpace )(
            IOleInPlaceUIWindow * This,
                               LPCBORDERWIDTHS pborderwidths);

                           HRESULT ( __export __stdcall *SetBorderSpace )(
            IOleInPlaceUIWindow * This,
                               LPCBORDERWIDTHS pborderwidths);

        HRESULT ( __export __stdcall *SetActiveObject )(
            IOleInPlaceUIWindow * This,
                               IOleInPlaceActiveObject *pActiveObject,
                                       LPCOLESTR pszObjName);

       
    } IOleInPlaceUIWindowVtbl;

    struct IOleInPlaceUIWindow
    {
        struct IOleInPlaceUIWindowVtbl *lpVtbl;
    };
# 2812 "/usr/local/arm-wince-pe/include/oleidl.h" 3
                   HRESULT __export __stdcall IOleInPlaceUIWindow_GetBorder_Proxy(
    IOleInPlaceUIWindow * This,
                LPRECT lprectBorder);


void IOleInPlaceUIWindow_GetBorder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                   HRESULT __export __stdcall IOleInPlaceUIWindow_RequestBorderSpace_Proxy(
    IOleInPlaceUIWindow * This,
                       LPCBORDERWIDTHS pborderwidths);


void IOleInPlaceUIWindow_RequestBorderSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                   HRESULT __export __stdcall IOleInPlaceUIWindow_SetBorderSpace_Proxy(
    IOleInPlaceUIWindow * This,
                       LPCBORDERWIDTHS pborderwidths);


void IOleInPlaceUIWindow_SetBorderSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleInPlaceUIWindow_SetActiveObject_Proxy(
    IOleInPlaceUIWindow * This,
                       IOleInPlaceActiveObject *pActiveObject,
                               LPCOLESTR pszObjName);


void IOleInPlaceUIWindow_SetActiveObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 2876 "/usr/local/arm-wince-pe/include/oleidl.h" 3
typedef IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT;


extern const IID IID_IOleInPlaceActiveObject;
# 2908 "/usr/local/arm-wince-pe/include/oleidl.h" 3
    typedef struct IOleInPlaceActiveObjectVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IOleInPlaceActiveObject * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IOleInPlaceActiveObject * This);

        ULONG ( __export __stdcall *Release )(
            IOleInPlaceActiveObject * This);

                           HRESULT ( __export __stdcall *GetWindow )(
            IOleInPlaceActiveObject * This,
                        HWND *phwnd);

        HRESULT ( __export __stdcall *ContextSensitiveHelp )(
            IOleInPlaceActiveObject * This,
                       BOOL fEnterMode);

                      HRESULT ( __export __stdcall *TranslateAcceleratorA )(
            IOleInPlaceActiveObject * This,
                       LPMSG lpmsg);

                           HRESULT ( __export __stdcall *OnFrameWindowActivate )(
            IOleInPlaceActiveObject * This,
                       BOOL fActivate);

                           HRESULT ( __export __stdcall *OnDocWindowActivate )(
            IOleInPlaceActiveObject * This,
                       BOOL fActivate);

                      HRESULT ( __export __stdcall *ResizeBorder )(
            IOleInPlaceActiveObject * This,
                       LPCRECT prcBorder,
                               IOleInPlaceUIWindow *pUIWindow,
                       BOOL fFrameWindow);

        HRESULT ( __export __stdcall *EnableModeless )(
            IOleInPlaceActiveObject * This,
                       BOOL fEnable);

       
    } IOleInPlaceActiveObjectVtbl;

    struct IOleInPlaceActiveObject
    {
        struct IOleInPlaceActiveObjectVtbl *lpVtbl;
    };
# 3005 "/usr/local/arm-wince-pe/include/oleidl.h" 3
                HRESULT __export __stdcall IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy(
    IOleInPlaceActiveObject * This);


void IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                   HRESULT __export __stdcall IOleInPlaceActiveObject_OnFrameWindowActivate_Proxy(
    IOleInPlaceActiveObject * This,
               BOOL fActivate);


void IOleInPlaceActiveObject_OnFrameWindowActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                   HRESULT __export __stdcall IOleInPlaceActiveObject_OnDocWindowActivate_Proxy(
    IOleInPlaceActiveObject * This,
               BOOL fActivate);


void IOleInPlaceActiveObject_OnDocWindowActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                            HRESULT __export __stdcall IOleInPlaceActiveObject_RemoteResizeBorder_Proxy(
    IOleInPlaceActiveObject * This,
               LPCRECT prcBorder,
               const IID * const riid,
                               IOleInPlaceUIWindow *pUIWindow,
               BOOL fFrameWindow);


void IOleInPlaceActiveObject_RemoteResizeBorder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleInPlaceActiveObject_EnableModeless_Proxy(
    IOleInPlaceActiveObject * This,
               BOOL fEnable);


void IOleInPlaceActiveObject_EnableModeless_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 3082 "/usr/local/arm-wince-pe/include/oleidl.h" 3
typedef IOleInPlaceFrame *LPOLEINPLACEFRAME;

typedef struct tagOIFI
    {
    UINT cb;
    BOOL fMDIApp;
    HWND hwndFrame;
    HACCEL haccel;
    UINT cAccelEntries;
    } OLEINPLACEFRAMEINFO;

typedef struct tagOIFI *LPOLEINPLACEFRAMEINFO;

typedef struct tagOleMenuGroupWidths
    {
    LONG width[ 6 ];
    } OLEMENUGROUPWIDTHS;

typedef struct tagOleMenuGroupWidths *LPOLEMENUGROUPWIDTHS;

typedef HGLOBAL HOLEMENU;


extern const IID IID_IOleInPlaceFrame;
# 3139 "/usr/local/arm-wince-pe/include/oleidl.h" 3
    typedef struct IOleInPlaceFrameVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IOleInPlaceFrame * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IOleInPlaceFrame * This);

        ULONG ( __export __stdcall *Release )(
            IOleInPlaceFrame * This);

                           HRESULT ( __export __stdcall *GetWindow )(
            IOleInPlaceFrame * This,
                        HWND *phwnd);

        HRESULT ( __export __stdcall *ContextSensitiveHelp )(
            IOleInPlaceFrame * This,
                       BOOL fEnterMode);

                           HRESULT ( __export __stdcall *GetBorder )(
            IOleInPlaceFrame * This,
                        LPRECT lprectBorder);

                           HRESULT ( __export __stdcall *RequestBorderSpace )(
            IOleInPlaceFrame * This,
                               LPCBORDERWIDTHS pborderwidths);

                           HRESULT ( __export __stdcall *SetBorderSpace )(
            IOleInPlaceFrame * This,
                               LPCBORDERWIDTHS pborderwidths);

        HRESULT ( __export __stdcall *SetActiveObject )(
            IOleInPlaceFrame * This,
                               IOleInPlaceActiveObject *pActiveObject,
                                       LPCOLESTR pszObjName);

        HRESULT ( __export __stdcall *InsertMenus )(
            IOleInPlaceFrame * This,
                       HMENU hmenuShared,
                            LPOLEMENUGROUPWIDTHS lpMenuWidths);

                           HRESULT ( __export __stdcall *SetMenu )(
            IOleInPlaceFrame * This,
                       HMENU hmenuShared,
                       HOLEMENU holemenu,
                       HWND hwndActiveObject);

        HRESULT ( __export __stdcall *RemoveMenus )(
            IOleInPlaceFrame * This,
                       HMENU hmenuShared);

                           HRESULT ( __export __stdcall *SetStatusText )(
            IOleInPlaceFrame * This,
                       LPCOLESTR pszStatusText);

        HRESULT ( __export __stdcall *EnableModeless )(
            IOleInPlaceFrame * This,
                       BOOL fEnable);

        HRESULT ( __export __stdcall *TranslateAcceleratorA )(
            IOleInPlaceFrame * This,
                       LPMSG lpmsg,
                       WORD wID);

       
    } IOleInPlaceFrameVtbl;

    struct IOleInPlaceFrame
    {
        struct IOleInPlaceFrameVtbl *lpVtbl;
    };
# 3275 "/usr/local/arm-wince-pe/include/oleidl.h" 3
HRESULT __export __stdcall IOleInPlaceFrame_InsertMenus_Proxy(
    IOleInPlaceFrame * This,
               HMENU hmenuShared,
                    LPOLEMENUGROUPWIDTHS lpMenuWidths);


void IOleInPlaceFrame_InsertMenus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                   HRESULT __export __stdcall IOleInPlaceFrame_SetMenu_Proxy(
    IOleInPlaceFrame * This,
               HMENU hmenuShared,
               HOLEMENU holemenu,
               HWND hwndActiveObject);


void IOleInPlaceFrame_SetMenu_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleInPlaceFrame_RemoveMenus_Proxy(
    IOleInPlaceFrame * This,
               HMENU hmenuShared);


void IOleInPlaceFrame_RemoveMenus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                   HRESULT __export __stdcall IOleInPlaceFrame_SetStatusText_Proxy(
    IOleInPlaceFrame * This,
               LPCOLESTR pszStatusText);


void IOleInPlaceFrame_SetStatusText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleInPlaceFrame_EnableModeless_Proxy(
    IOleInPlaceFrame * This,
               BOOL fEnable);


void IOleInPlaceFrame_EnableModeless_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleInPlaceFrame_TranslateAccelerator_Proxy(
    IOleInPlaceFrame * This,
               LPMSG lpmsg,
               WORD wID);


void IOleInPlaceFrame_TranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 3366 "/usr/local/arm-wince-pe/include/oleidl.h" 3
typedef IOleInPlaceObject *LPOLEINPLACEOBJECT;


extern const IID IID_IOleInPlaceObject;
# 3391 "/usr/local/arm-wince-pe/include/oleidl.h" 3
    typedef struct IOleInPlaceObjectVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IOleInPlaceObject * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IOleInPlaceObject * This);

        ULONG ( __export __stdcall *Release )(
            IOleInPlaceObject * This);

                           HRESULT ( __export __stdcall *GetWindow )(
            IOleInPlaceObject * This,
                        HWND *phwnd);

        HRESULT ( __export __stdcall *ContextSensitiveHelp )(
            IOleInPlaceObject * This,
                       BOOL fEnterMode);

        HRESULT ( __export __stdcall *InPlaceDeactivate )(
            IOleInPlaceObject * This);

        HRESULT ( __export __stdcall *UIDeactivate )(
            IOleInPlaceObject * This);

                           HRESULT ( __export __stdcall *SetObjectRects )(
            IOleInPlaceObject * This,
                       LPCRECT lprcPosRect,
                       LPCRECT lprcClipRect);

        HRESULT ( __export __stdcall *ReactivateAndUndo )(
            IOleInPlaceObject * This);

       
    } IOleInPlaceObjectVtbl;

    struct IOleInPlaceObject
    {
        struct IOleInPlaceObjectVtbl *lpVtbl;
    };
# 3477 "/usr/local/arm-wince-pe/include/oleidl.h" 3
HRESULT __export __stdcall IOleInPlaceObject_InPlaceDeactivate_Proxy(
    IOleInPlaceObject * This);


void IOleInPlaceObject_InPlaceDeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleInPlaceObject_UIDeactivate_Proxy(
    IOleInPlaceObject * This);


void IOleInPlaceObject_UIDeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                   HRESULT __export __stdcall IOleInPlaceObject_SetObjectRects_Proxy(
    IOleInPlaceObject * This,
               LPCRECT lprcPosRect,
               LPCRECT lprcClipRect);


void IOleInPlaceObject_SetObjectRects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleInPlaceObject_ReactivateAndUndo_Proxy(
    IOleInPlaceObject * This);


void IOleInPlaceObject_ReactivateAndUndo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 3538 "/usr/local/arm-wince-pe/include/oleidl.h" 3
typedef IOleInPlaceSite *LPOLEINPLACESITE;


extern const IID IID_IOleInPlaceSite;
# 3581 "/usr/local/arm-wince-pe/include/oleidl.h" 3
    typedef struct IOleInPlaceSiteVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IOleInPlaceSite * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IOleInPlaceSite * This);

        ULONG ( __export __stdcall *Release )(
            IOleInPlaceSite * This);

                           HRESULT ( __export __stdcall *GetWindow )(
            IOleInPlaceSite * This,
                        HWND *phwnd);

        HRESULT ( __export __stdcall *ContextSensitiveHelp )(
            IOleInPlaceSite * This,
                       BOOL fEnterMode);

        HRESULT ( __export __stdcall *CanInPlaceActivate )(
            IOleInPlaceSite * This);

        HRESULT ( __export __stdcall *OnInPlaceActivate )(
            IOleInPlaceSite * This);

        HRESULT ( __export __stdcall *OnUIActivate )(
            IOleInPlaceSite * This);

        HRESULT ( __export __stdcall *GetWindowContext )(
            IOleInPlaceSite * This,
                        IOleInPlaceFrame * *ppFrame,
                        IOleInPlaceUIWindow * *ppDoc,
                        LPRECT lprcPosRect,
                        LPRECT lprcClipRect,
                            LPOLEINPLACEFRAMEINFO lpFrameInfo);

        HRESULT ( __export __stdcall *Scroll )(
            IOleInPlaceSite * This,
                       SIZE scrollExtant);

        HRESULT ( __export __stdcall *OnUIDeactivate )(
            IOleInPlaceSite * This,
                       BOOL fUndoable);

        HRESULT ( __export __stdcall *OnInPlaceDeactivate )(
            IOleInPlaceSite * This);

        HRESULT ( __export __stdcall *DiscardUndoState )(
            IOleInPlaceSite * This);

        HRESULT ( __export __stdcall *DeactivateAndUndo )(
            IOleInPlaceSite * This);

        HRESULT ( __export __stdcall *OnPosRectChange )(
            IOleInPlaceSite * This,
                       LPCRECT lprcPosRect);

       
    } IOleInPlaceSiteVtbl;

    struct IOleInPlaceSite
    {
        struct IOleInPlaceSiteVtbl *lpVtbl;
    };
# 3709 "/usr/local/arm-wince-pe/include/oleidl.h" 3
HRESULT __export __stdcall IOleInPlaceSite_CanInPlaceActivate_Proxy(
    IOleInPlaceSite * This);


void IOleInPlaceSite_CanInPlaceActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleInPlaceSite_OnInPlaceActivate_Proxy(
    IOleInPlaceSite * This);


void IOleInPlaceSite_OnInPlaceActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleInPlaceSite_OnUIActivate_Proxy(
    IOleInPlaceSite * This);


void IOleInPlaceSite_OnUIActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleInPlaceSite_GetWindowContext_Proxy(
    IOleInPlaceSite * This,
                IOleInPlaceFrame * *ppFrame,
                IOleInPlaceUIWindow * *ppDoc,
                LPRECT lprcPosRect,
                LPRECT lprcClipRect,
                    LPOLEINPLACEFRAMEINFO lpFrameInfo);


void IOleInPlaceSite_GetWindowContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleInPlaceSite_Scroll_Proxy(
    IOleInPlaceSite * This,
               SIZE scrollExtant);


void IOleInPlaceSite_Scroll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleInPlaceSite_OnUIDeactivate_Proxy(
    IOleInPlaceSite * This,
               BOOL fUndoable);


void IOleInPlaceSite_OnUIDeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleInPlaceSite_OnInPlaceDeactivate_Proxy(
    IOleInPlaceSite * This);


void IOleInPlaceSite_OnInPlaceDeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleInPlaceSite_DiscardUndoState_Proxy(
    IOleInPlaceSite * This);


void IOleInPlaceSite_DiscardUndoState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleInPlaceSite_DeactivateAndUndo_Proxy(
    IOleInPlaceSite * This);


void IOleInPlaceSite_DeactivateAndUndo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IOleInPlaceSite_OnPosRectChange_Proxy(
    IOleInPlaceSite * This,
               LPCRECT lprcPosRect);


void IOleInPlaceSite_OnPosRectChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 3843 "/usr/local/arm-wince-pe/include/oleidl.h" 3
extern const IID IID_IContinue;
# 3857 "/usr/local/arm-wince-pe/include/oleidl.h" 3
    typedef struct IContinueVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IContinue * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IContinue * This);

        ULONG ( __export __stdcall *Release )(
            IContinue * This);

        HRESULT ( __export __stdcall *FContinue )(
            IContinue * This);

       
    } IContinueVtbl;

    struct IContinue
    {
        struct IContinueVtbl *lpVtbl;
    };
# 3908 "/usr/local/arm-wince-pe/include/oleidl.h" 3
HRESULT __export __stdcall IContinue_FContinue_Proxy(
    IContinue * This);


void IContinue_FContinue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 3934 "/usr/local/arm-wince-pe/include/oleidl.h" 3
typedef IViewObject *LPVIEWOBJECT;


extern const IID IID_IViewObject;
# 3989 "/usr/local/arm-wince-pe/include/oleidl.h" 3
    typedef struct IViewObjectVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IViewObject * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IViewObject * This);

        ULONG ( __export __stdcall *Release )(
            IViewObject * This);

                      HRESULT ( __export __stdcall *Draw )(
            IViewObject * This,
                       DWORD dwDrawAspect,
                       LONG lindex,
                               void *pvAspect,
                               DVTARGETDEVICE *ptd,
                       HDC hdcTargetDev,
                       HDC hdcDraw,
                       LPCRECTL lprcBounds,
                               LPCRECTL lprcWBounds,
                       BOOL ( __export __stdcall *pfnContinue )(
                DWORD dwContinue),
                       DWORD dwContinue);

                      HRESULT ( __export __stdcall *GetColorSet )(
            IViewObject * This,
                       DWORD dwDrawAspect,
                       LONG lindex,
                               void *pvAspect,
                               DVTARGETDEVICE *ptd,
                       HDC hicTargetDev,
                        LOGPALETTE * *ppColorSet);

                      HRESULT ( __export __stdcall *Freeze )(
            IViewObject * This,
                       DWORD dwDrawAspect,
                       LONG lindex,
                               void *pvAspect,
                        DWORD *pdwFreeze);

        HRESULT ( __export __stdcall *Unfreeze )(
            IViewObject * This,
                       DWORD dwFreeze);

        HRESULT ( __export __stdcall *SetAdvise )(
            IViewObject * This,
                       DWORD aspects,
                       DWORD advf,
                               IAdviseSink *pAdvSink);

        HRESULT ( __export __stdcall *GetAdvise )(
            IViewObject * This,
                        DWORD *pAspects,
                        DWORD *pAdvf,
                        IAdviseSink * *ppAdvSink);

       
    } IViewObjectVtbl;

    struct IViewObject
    {
        struct IViewObjectVtbl *lpVtbl;
    };
# 4098 "/usr/local/arm-wince-pe/include/oleidl.h" 3
                HRESULT __export __stdcall IViewObject_RemoteDraw_Proxy(
    IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               DWORD pvAspect,
                       DVTARGETDEVICE *ptd,
               DWORD hdcTargetDev,
               DWORD hdcDraw,
               LPCRECTL lprcBounds,
                       LPCRECTL lprcWBounds,
               IContinue *pContinue);


void IViewObject_RemoteDraw_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall IViewObject_RemoteGetColorSet_Proxy(
    IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               DWORD pvAspect,
                       DVTARGETDEVICE *ptd,
               DWORD hicTargetDev,
                LOGPALETTE * *ppColorSet);


void IViewObject_RemoteGetColorSet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


                HRESULT __export __stdcall IViewObject_RemoteFreeze_Proxy(
    IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               DWORD pvAspect,
                DWORD *pdwFreeze);


void IViewObject_RemoteFreeze_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IViewObject_Unfreeze_Proxy(
    IViewObject * This,
               DWORD dwFreeze);


void IViewObject_Unfreeze_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IViewObject_SetAdvise_Proxy(
    IViewObject * This,
               DWORD aspects,
               DWORD advf,
                       IAdviseSink *pAdvSink);


void IViewObject_SetAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IViewObject_GetAdvise_Proxy(
    IViewObject * This,
                DWORD *pAspects,
                DWORD *pAdvf,
                IAdviseSink * *ppAdvSink);


void IViewObject_GetAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 4205 "/usr/local/arm-wince-pe/include/oleidl.h" 3
typedef IViewObject2 *LPVIEWOBJECT2;


extern const IID IID_IViewObject2;
# 4226 "/usr/local/arm-wince-pe/include/oleidl.h" 3
    typedef struct IViewObject2Vtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IViewObject2 * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IViewObject2 * This);

        ULONG ( __export __stdcall *Release )(
            IViewObject2 * This);

                      HRESULT ( __export __stdcall *Draw )(
            IViewObject2 * This,
                       DWORD dwDrawAspect,
                       LONG lindex,
                               void *pvAspect,
                               DVTARGETDEVICE *ptd,
                       HDC hdcTargetDev,
                       HDC hdcDraw,
                       LPCRECTL lprcBounds,
                               LPCRECTL lprcWBounds,
                       BOOL ( __export __stdcall *pfnContinue )(
                DWORD dwContinue),
                       DWORD dwContinue);

                      HRESULT ( __export __stdcall *GetColorSet )(
            IViewObject2 * This,
                       DWORD dwDrawAspect,
                       LONG lindex,
                               void *pvAspect,
                               DVTARGETDEVICE *ptd,
                       HDC hicTargetDev,
                        LOGPALETTE * *ppColorSet);

                      HRESULT ( __export __stdcall *Freeze )(
            IViewObject2 * This,
                       DWORD dwDrawAspect,
                       LONG lindex,
                               void *pvAspect,
                        DWORD *pdwFreeze);

        HRESULT ( __export __stdcall *Unfreeze )(
            IViewObject2 * This,
                       DWORD dwFreeze);

        HRESULT ( __export __stdcall *SetAdvise )(
            IViewObject2 * This,
                       DWORD aspects,
                       DWORD advf,
                               IAdviseSink *pAdvSink);

        HRESULT ( __export __stdcall *GetAdvise )(
            IViewObject2 * This,
                        DWORD *pAspects,
                        DWORD *pAdvf,
                        IAdviseSink * *ppAdvSink);

        HRESULT ( __export __stdcall *GetExtent )(
            IViewObject2 * This,
                       DWORD dwDrawAspect,
                       LONG lindex,
                               DVTARGETDEVICE *ptd,
                        LPSIZEL lpsizel);

       
    } IViewObject2Vtbl;

    struct IViewObject2
    {
        struct IViewObject2Vtbl *lpVtbl;
    };
# 4346 "/usr/local/arm-wince-pe/include/oleidl.h" 3
HRESULT __export __stdcall IViewObject2_GetExtent_Proxy(
    IViewObject2 * This,
               DWORD dwDrawAspect,
               LONG lindex,
                       DVTARGETDEVICE *ptd,
                LPSIZEL lpsizel);


void IViewObject2_GetExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 4376 "/usr/local/arm-wince-pe/include/oleidl.h" 3
typedef IDropSource *LPDROPSOURCE;


extern const IID IID_IDropSource;
# 4398 "/usr/local/arm-wince-pe/include/oleidl.h" 3
    typedef struct IDropSourceVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IDropSource * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IDropSource * This);

        ULONG ( __export __stdcall *Release )(
            IDropSource * This);

        HRESULT ( __export __stdcall *QueryContinueDrag )(
            IDropSource * This,
                       BOOL fEscapePressed,
                       DWORD grfKeyState);

        HRESULT ( __export __stdcall *GiveFeedback )(
            IDropSource * This,
                       DWORD dwEffect);

       
    } IDropSourceVtbl;

    struct IDropSource
    {
        struct IDropSourceVtbl *lpVtbl;
    };
# 4458 "/usr/local/arm-wince-pe/include/oleidl.h" 3
HRESULT __export __stdcall IDropSource_QueryContinueDrag_Proxy(
    IDropSource * This,
               BOOL fEscapePressed,
               DWORD grfKeyState);


void IDropSource_QueryContinueDrag_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IDropSource_GiveFeedback_Proxy(
    IDropSource * This,
               DWORD dwEffect);


void IDropSource_GiveFeedback_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 4498 "/usr/local/arm-wince-pe/include/oleidl.h" 3
typedef IDropTarget *LPDROPTARGET;
# 4533 "/usr/local/arm-wince-pe/include/oleidl.h" 3
extern const IID IID_IDropTarget;
# 4564 "/usr/local/arm-wince-pe/include/oleidl.h" 3
    typedef struct IDropTargetVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IDropTarget * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IDropTarget * This);

        ULONG ( __export __stdcall *Release )(
            IDropTarget * This);

        HRESULT ( __export __stdcall *DragEnter )(
            IDropTarget * This,
                               IDataObject *pDataObj,
                       DWORD grfKeyState,
                       POINTL pt,
                            DWORD *pdwEffect);

        HRESULT ( __export __stdcall *DragOver )(
            IDropTarget * This,
                       DWORD grfKeyState,
                       POINTL pt,
                            DWORD *pdwEffect);

        HRESULT ( __export __stdcall *DragLeave )(
            IDropTarget * This);

        HRESULT ( __export __stdcall *Drop )(
            IDropTarget * This,
                               IDataObject *pDataObj,
                       DWORD grfKeyState,
                       POINTL pt,
                            DWORD *pdwEffect);

       
    } IDropTargetVtbl;

    struct IDropTarget
    {
        struct IDropTargetVtbl *lpVtbl;
    };
# 4644 "/usr/local/arm-wince-pe/include/oleidl.h" 3
HRESULT __export __stdcall IDropTarget_DragEnter_Proxy(
    IDropTarget * This,
                       IDataObject *pDataObj,
               DWORD grfKeyState,
               POINTL pt,
                    DWORD *pdwEffect);


void IDropTarget_DragEnter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IDropTarget_DragOver_Proxy(
    IDropTarget * This,
               DWORD grfKeyState,
               POINTL pt,
                    DWORD *pdwEffect);


void IDropTarget_DragOver_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IDropTarget_DragLeave_Proxy(
    IDropTarget * This);


void IDropTarget_DragLeave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IDropTarget_Drop_Proxy(
    IDropTarget * This,
                       IDataObject *pDataObj,
               DWORD grfKeyState,
               POINTL pt,
                    DWORD *pdwEffect);


void IDropTarget_Drop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 4714 "/usr/local/arm-wince-pe/include/oleidl.h" 3
typedef IEnumOLEVERB *LPENUMOLEVERB;

typedef struct tagOLEVERB
    {
    LONG lVerb;
    LPOLESTR lpszVerbName;
    DWORD fuFlags;
    DWORD grfAttribs;
    } OLEVERB;

typedef struct tagOLEVERB *LPOLEVERB;

typedef
enum tagOLEVERBATTRIB
    { OLEVERBATTRIB_NEVERDIRTIES = 1,
        OLEVERBATTRIB_ONCONTAINERMENU = 2
    } OLEVERBATTRIB;


extern const IID IID_IEnumOLEVERB;
# 4758 "/usr/local/arm-wince-pe/include/oleidl.h" 3
    typedef struct IEnumOLEVERBVtbl
    {
       

        HRESULT ( __export __stdcall *QueryInterface )(
            IEnumOLEVERB * This,
                       const IID * const riid,
                                void * *ppvObject);

        ULONG ( __export __stdcall *AddRef )(
            IEnumOLEVERB * This);

        ULONG ( __export __stdcall *Release )(
            IEnumOLEVERB * This);

                      HRESULT ( __export __stdcall *Next )(
            IEnumOLEVERB * This,
                       ULONG celt,
                                            LPOLEVERB rgelt,
                        ULONG *pceltFetched);

        HRESULT ( __export __stdcall *Skip )(
            IEnumOLEVERB * This,
                       ULONG celt);

        HRESULT ( __export __stdcall *Reset )(
            IEnumOLEVERB * This);

        HRESULT ( __export __stdcall *Clone )(
            IEnumOLEVERB * This,
                        IEnumOLEVERB * *ppenum);

       
    } IEnumOLEVERBVtbl;

    struct IEnumOLEVERB
    {
        struct IEnumOLEVERBVtbl *lpVtbl;
    };
# 4832 "/usr/local/arm-wince-pe/include/oleidl.h" 3
                HRESULT __export __stdcall IEnumOLEVERB_RemoteNext_Proxy(
    IEnumOLEVERB * This,
               ULONG celt,
                                    LPOLEVERB rgelt,
                ULONG *pceltFetched);


void IEnumOLEVERB_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumOLEVERB_Skip_Proxy(
    IEnumOLEVERB * This,
               ULONG celt);


void IEnumOLEVERB_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumOLEVERB_Reset_Proxy(
    IEnumOLEVERB * This);


void IEnumOLEVERB_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __export __stdcall IEnumOLEVERB_Clone_Proxy(
    IEnumOLEVERB * This,
                IEnumOLEVERB * *ppenum);


void IEnumOLEVERB_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);
# 4887 "/usr/local/arm-wince-pe/include/oleidl.h" 3
unsigned long CLIPFORMAT_UserSize( unsigned long *, unsigned long , CLIPFORMAT * );
unsigned char * CLIPFORMAT_UserMarshal( unsigned long *, unsigned char *, CLIPFORMAT * );
unsigned char * CLIPFORMAT_UserUnmarshal(unsigned long *, unsigned char *, CLIPFORMAT * );
void CLIPFORMAT_UserFree( unsigned long *, CLIPFORMAT * );

unsigned long HACCEL_UserSize( unsigned long *, unsigned long , HACCEL * );
unsigned char * HACCEL_UserMarshal( unsigned long *, unsigned char *, HACCEL * );
unsigned char * HACCEL_UserUnmarshal(unsigned long *, unsigned char *, HACCEL * );
void HACCEL_UserFree( unsigned long *, HACCEL * );

unsigned long HGLOBAL_UserSize( unsigned long *, unsigned long , HGLOBAL * );
unsigned char * HGLOBAL_UserMarshal( unsigned long *, unsigned char *, HGLOBAL * );
unsigned char * HGLOBAL_UserUnmarshal(unsigned long *, unsigned char *, HGLOBAL * );
void HGLOBAL_UserFree( unsigned long *, HGLOBAL * );

unsigned long HMENU_UserSize( unsigned long *, unsigned long , HMENU * );
unsigned char * HMENU_UserMarshal( unsigned long *, unsigned char *, HMENU * );
unsigned char * HMENU_UserUnmarshal(unsigned long *, unsigned char *, HMENU * );
void HMENU_UserFree( unsigned long *, HMENU * );

unsigned long HWND_UserSize( unsigned long *, unsigned long , HWND * );
unsigned char * HWND_UserMarshal( unsigned long *, unsigned char *, HWND * );
unsigned char * HWND_UserUnmarshal(unsigned long *, unsigned char *, HWND * );
void HWND_UserFree( unsigned long *, HWND * );

unsigned long STGMEDIUM_UserSize( unsigned long *, unsigned long , STGMEDIUM * );
unsigned char * STGMEDIUM_UserMarshal( unsigned long *, unsigned char *, STGMEDIUM * );
unsigned char * STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, STGMEDIUM * );
void STGMEDIUM_UserFree( unsigned long *, STGMEDIUM * );

              HRESULT __export __stdcall IOleCache2_UpdateCache_Proxy(
    IOleCache2 * This,
               LPDATAOBJECT pDataObject,
               DWORD grfUpdf,
               LPVOID pReserved);


                HRESULT __export __stdcall IOleCache2_UpdateCache_Stub(
    IOleCache2 * This,
               LPDATAOBJECT pDataObject,
               DWORD grfUpdf,
               DWORD pReserved);

              HRESULT __export __stdcall IOleItemContainer_GetObject_Proxy(
    IOleItemContainer * This,
               LPOLESTR pszItem,
               DWORD dwSpeedNeeded,
                       IBindCtx *pbc,
               const IID * const riid,
                        void * *ppvObject);


                HRESULT __export __stdcall IOleItemContainer_GetObject_Stub(
    IOleItemContainer * This,
               LPOLESTR pszItem,
               DWORD dwSpeedNeeded,
                       IBindCtx *pbc,
               const IID * const riid,
                        IUnknown * *ppvObject);

              HRESULT __export __stdcall IOleItemContainer_GetObjectStorage_Proxy(
    IOleItemContainer * This,
               LPOLESTR pszItem,
                       IBindCtx *pbc,
               const IID * const riid,
                        void * *ppvStorage);


                HRESULT __export __stdcall IOleItemContainer_GetObjectStorage_Stub(
    IOleItemContainer * This,
               LPOLESTR pszItem,
                       IBindCtx *pbc,
               const IID * const riid,
                        IUnknown * *ppvStorage);

              HRESULT __export __stdcall IOleInPlaceActiveObject_TranslateAccelerator_Proxy(
    IOleInPlaceActiveObject * This,
               LPMSG lpmsg);


                HRESULT __export __stdcall IOleInPlaceActiveObject_TranslateAccelerator_Stub(
    IOleInPlaceActiveObject * This);

              HRESULT __export __stdcall IOleInPlaceActiveObject_ResizeBorder_Proxy(
    IOleInPlaceActiveObject * This,
               LPCRECT prcBorder,
                       IOleInPlaceUIWindow *pUIWindow,
               BOOL fFrameWindow);


                            HRESULT __export __stdcall IOleInPlaceActiveObject_ResizeBorder_Stub(
    IOleInPlaceActiveObject * This,
               LPCRECT prcBorder,
               const IID * const riid,
                               IOleInPlaceUIWindow *pUIWindow,
               BOOL fFrameWindow);

              HRESULT __export __stdcall IViewObject_Draw_Proxy(
    IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
                       void *pvAspect,
                       DVTARGETDEVICE *ptd,
               HDC hdcTargetDev,
               HDC hdcDraw,
               LPCRECTL lprcBounds,
                       LPCRECTL lprcWBounds,
               BOOL ( __export __stdcall *pfnContinue )(
        DWORD dwContinue),
               DWORD dwContinue);


                HRESULT __export __stdcall IViewObject_Draw_Stub(
    IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               DWORD pvAspect,
                       DVTARGETDEVICE *ptd,
               DWORD hdcTargetDev,
               DWORD hdcDraw,
               LPCRECTL lprcBounds,
                       LPCRECTL lprcWBounds,
               IContinue *pContinue);

              HRESULT __export __stdcall IViewObject_GetColorSet_Proxy(
    IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
                       void *pvAspect,
                       DVTARGETDEVICE *ptd,
               HDC hicTargetDev,
                LOGPALETTE * *ppColorSet);


                HRESULT __export __stdcall IViewObject_GetColorSet_Stub(
    IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               DWORD pvAspect,
                       DVTARGETDEVICE *ptd,
               DWORD hicTargetDev,
                LOGPALETTE * *ppColorSet);

              HRESULT __export __stdcall IViewObject_Freeze_Proxy(
    IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
                       void *pvAspect,
                DWORD *pdwFreeze);


                HRESULT __export __stdcall IViewObject_Freeze_Stub(
    IViewObject * This,
               DWORD dwDrawAspect,
               LONG lindex,
               DWORD pvAspect,
                DWORD *pdwFreeze);

              HRESULT __export __stdcall IEnumOLEVERB_Next_Proxy(
    IEnumOLEVERB * This,
               ULONG celt,
                                    LPOLEVERB rgelt,
                ULONG *pceltFetched);


                HRESULT __export __stdcall IEnumOLEVERB_Next_Stub(
    IEnumOLEVERB * This,
               ULONG celt,
                                    LPOLEVERB rgelt,
                ULONG *pceltFetched);
# 65 "/usr/local/arm-wince-pe/include/ole2.h" 2 3
# 74 "/usr/local/arm-wince-pe/include/ole2.h" 3
extern HRESULT __export __stdcall CreateDataAdviseHolder(LPDATAADVISEHOLDER * ppDAHolder);
# 84 "/usr/local/arm-wince-pe/include/ole2.h" 3
extern DWORD __export __stdcall OleBuildVersion( void );


extern HRESULT __export __stdcall ReadClassStg(LPSTORAGE pStg, CLSID * pclsid);
extern HRESULT __export __stdcall WriteClassStg(LPSTORAGE pStg, const CLSID * const rclsid);
extern HRESULT __export __stdcall ReadClassStm(LPSTREAM pStm, CLSID * pclsid);
extern HRESULT __export __stdcall WriteClassStm(LPSTREAM pStm, const CLSID * const rclsid);
extern HRESULT __export __stdcall WriteFmtUserTypeStg (LPSTORAGE pstg, CLIPFORMAT cf, LPOLESTR lpszUserType);
extern HRESULT __export __stdcall ReadFmtUserTypeStg (LPSTORAGE pstg, CLIPFORMAT * pcf, LPOLESTR * lplpszUserType);




extern HRESULT __export __stdcall OleInitialize(LPVOID pvReserved);
extern void __export __stdcall OleUninitialize(void);





extern HRESULT __export __stdcall OleQueryLinkFromData(LPDATAOBJECT pSrcDataObject);
extern HRESULT __export __stdcall OleQueryCreateFromData(LPDATAOBJECT pSrcDataObject);




extern HRESULT __export __stdcall OleCreate(const CLSID * const rclsid, const IID * const riid, DWORD renderopt,
                LPFORMATETC pFormatEtc, LPOLECLIENTSITE pClientSite,
                LPSTORAGE pStg, LPVOID * ppvObj);

extern HRESULT __export __stdcall OleCreateEx(const CLSID * const rclsid, const IID * const riid, DWORD dwFlags,
                DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
                LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
                LPSTORAGE pStg, LPVOID * ppvObj);

extern HRESULT __export __stdcall OleCreateFromData(LPDATAOBJECT pSrcDataObj, const IID * const riid,
                DWORD renderopt, LPFORMATETC pFormatEtc,
                LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,
                LPVOID * ppvObj);

extern HRESULT __export __stdcall OleCreateFromDataEx(LPDATAOBJECT pSrcDataObj, const IID * const riid,
                DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
                LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
                LPSTORAGE pStg, LPVOID * ppvObj);

extern HRESULT __export __stdcall OleCreateLinkFromData(LPDATAOBJECT pSrcDataObj, const IID * const riid,
                DWORD renderopt, LPFORMATETC pFormatEtc,
                LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,
                LPVOID * ppvObj);

extern HRESULT __export __stdcall OleCreateLinkFromDataEx(LPDATAOBJECT pSrcDataObj, const IID * const riid,
                DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
                LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
                DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
                LPSTORAGE pStg, LPVOID * ppvObj);

extern HRESULT __export __stdcall OleCreateStaticFromData(LPDATAOBJECT pSrcDataObj, const IID * const iid,
                DWORD renderopt, LPFORMATETC pFormatEtc,
                LPOLECLIENTSITE pClientSite, LPSTORAGE pStg,
                LPVOID * ppvObj);


extern HRESULT __export __stdcall OleCreateLink(LPMONIKER pmkLinkSrc, const IID * const riid,
            DWORD renderopt, LPFORMATETC lpFormatEtc,
            LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);

extern HRESULT __export __stdcall OleCreateLinkEx(LPMONIKER pmkLinkSrc, const IID * const riid,
            DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
            LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
            DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
            LPSTORAGE pStg, LPVOID * ppvObj);

extern HRESULT __export __stdcall OleCreateLinkToFile(LPCOLESTR lpszFileName, const IID * const riid,
            DWORD renderopt, LPFORMATETC lpFormatEtc,
            LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);

extern HRESULT __export __stdcall OleCreateLinkToFileEx(LPCOLESTR lpszFileName, const IID * const riid,
            DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
            LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
            DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
            LPSTORAGE pStg, LPVOID * ppvObj);

extern HRESULT __export __stdcall OleCreateFromFile(const CLSID * const rclsid, LPCOLESTR lpszFileName, const IID * const riid,
            DWORD renderopt, LPFORMATETC lpFormatEtc,
            LPOLECLIENTSITE pClientSite, LPSTORAGE pStg, LPVOID * ppvObj);

extern HRESULT __export __stdcall OleCreateFromFileEx(const CLSID * const rclsid, LPCOLESTR lpszFileName, const IID * const riid,
            DWORD dwFlags, DWORD renderopt, ULONG cFormats, DWORD* rgAdvf,
            LPFORMATETC rgFormatEtc, IAdviseSink * lpAdviseSink,
            DWORD * rgdwConnection, LPOLECLIENTSITE pClientSite,
            LPSTORAGE pStg, LPVOID * ppvObj);

extern HRESULT __export __stdcall OleLoad(LPSTORAGE pStg, const IID * const riid, LPOLECLIENTSITE pClientSite,
            LPVOID * ppvObj);

extern HRESULT __export __stdcall OleSave(LPPERSISTSTORAGE pPS, LPSTORAGE pStg, BOOL fSameAsLoad);

extern HRESULT __export __stdcall OleLoadFromStream( LPSTREAM pStm, const IID * const iidInterface, LPVOID * ppvObj);
extern HRESULT __export __stdcall OleSaveToStream( LPPERSISTSTREAM pPStm, LPSTREAM pStm );


extern HRESULT __export __stdcall OleSetContainedObject(LPUNKNOWN pUnknown, BOOL fContained);
extern HRESULT __export __stdcall OleNoteObjectVisible(LPUNKNOWN pUnknown, BOOL fVisible);




extern HRESULT __export __stdcall RegisterDragDrop(HWND hwnd, LPDROPTARGET pDropTarget);
extern HRESULT __export __stdcall RevokeDragDrop(HWND hwnd);
extern HRESULT __export __stdcall DoDragDrop(LPDATAOBJECT pDataObj, LPDROPSOURCE pDropSource,
            DWORD dwOKEffects, LPDWORD pdwEffect);



extern HRESULT __export __stdcall OleSetClipboard(LPDATAOBJECT pDataObj);
extern HRESULT __export __stdcall OleGetClipboard(LPDATAOBJECT * ppDataObj);
extern HRESULT __export __stdcall OleFlushClipboard(void);
extern HRESULT __export __stdcall OleIsCurrentClipboard(LPDATAOBJECT pDataObj);




extern HOLEMENU __export __stdcall OleCreateMenuDescriptor (HMENU hmenuCombined,
                                LPOLEMENUGROUPWIDTHS lpMenuWidths);
extern HRESULT __export __stdcall OleSetMenuDescriptor (HOLEMENU holemenu, HWND hwndFrame,
                                HWND hwndActiveObject,
                                LPOLEINPLACEFRAME lpFrame,
                                LPOLEINPLACEACTIVEOBJECT lpActiveObj);
extern HRESULT __export __stdcall OleDestroyMenuDescriptor (HOLEMENU holemenu);

extern HRESULT __export __stdcall OleTranslateAccelerator (LPOLEINPLACEFRAME lpFrame,
                            LPOLEINPLACEFRAMEINFO lpFrameInfo, LPMSG lpmsg);



extern HANDLE __export __stdcall OleDuplicateData (HANDLE hSrc, CLIPFORMAT cfFormat,
                        UINT uiFlags);

extern HRESULT __export __stdcall OleDraw (LPUNKNOWN pUnknown, DWORD dwAspect, HDC hdcDraw,
                    LPCRECT lprcBounds);

extern HRESULT __export __stdcall OleRun(LPUNKNOWN pUnknown);
extern BOOL __export __stdcall OleIsRunning(LPOLEOBJECT pObject);
extern HRESULT __export __stdcall OleLockRunning(LPUNKNOWN pUnknown, BOOL fLock, BOOL fLastUnlockCloses);
extern void __export __stdcall ReleaseStgMedium(LPSTGMEDIUM);
extern HRESULT __export __stdcall CreateOleAdviseHolder(LPOLEADVISEHOLDER * ppOAHolder);

extern HRESULT __export __stdcall OleCreateDefaultHandler(const CLSID * const clsid, LPUNKNOWN pUnkOuter,
                    const IID * const riid, LPVOID * lplpObj);

extern HRESULT __export __stdcall OleCreateEmbeddingHelper(const CLSID * const clsid, LPUNKNOWN pUnkOuter,
                    DWORD flags, LPCLASSFACTORY pCF,
                                        const IID * const riid, LPVOID * lplpObj);

extern BOOL __export __stdcall IsAccelerator(HACCEL hAccel, int cAccelEntries, LPMSG lpMsg,
                                        WORD * lpwCmd);


extern HGLOBAL __export __stdcall OleGetIconOfFile(LPOLESTR lpszPath, BOOL fUseFileAsLabel);

extern HGLOBAL __export __stdcall OleGetIconOfClass(const CLSID * const rclsid, LPOLESTR lpszLabel,
                                        BOOL fUseTypeAsLabel);

extern HGLOBAL __export __stdcall OleMetafilePictFromIconAndLabel(HICON hIcon, LPOLESTR lpszLabel,
                                        LPOLESTR lpszSourceFile, UINT iIconIndex);





extern HRESULT __export __stdcall OleRegGetUserType (const CLSID * const clsid, DWORD dwFormOfType,
                                        LPOLESTR * pszUserType);

extern HRESULT __export __stdcall OleRegGetMiscStatus (const CLSID * const clsid, DWORD dwAspect,
                                        DWORD * pdwStatus);

extern HRESULT __export __stdcall OleRegEnumFormatEtc (const CLSID * const clsid, DWORD dwDirection,
                                        LPENUMFORMATETC * ppenum);

extern HRESULT __export __stdcall OleRegEnumVerbs (const CLSID * const clsid, LPENUMOLEVERB * ppenum);
# 275 "/usr/local/arm-wince-pe/include/ole2.h" 3
typedef struct _OLESTREAM * LPOLESTREAM;

typedef struct _OLESTREAMVTBL
{
    DWORD (* Get)(LPOLESTREAM, void *, DWORD);
    DWORD (* Put)(LPOLESTREAM, const void *, DWORD);
} OLESTREAMVTBL;
typedef OLESTREAMVTBL * LPOLESTREAMVTBL;

typedef struct _OLESTREAM
{
    LPOLESTREAMVTBL lpstbl;
} OLESTREAM;


extern HRESULT __export __stdcall OleConvertOLESTREAMToIStorage
    (LPOLESTREAM lpolestream,
    LPSTORAGE pstg,
    const DVTARGETDEVICE * ptd);

extern HRESULT __export __stdcall OleConvertIStorageToOLESTREAM
    (LPSTORAGE pstg,
    LPOLESTREAM lpolestream);



extern HRESULT __export __stdcall GetHGlobalFromILockBytes (LPLOCKBYTES plkbyt, HGLOBAL * phglobal);
extern HRESULT __export __stdcall CreateILockBytesOnHGlobal (HGLOBAL hGlobal, BOOL fDeleteOnRelease,
                                    LPLOCKBYTES * pplkbyt);

extern HRESULT __export __stdcall GetHGlobalFromStream (LPSTREAM pstm, HGLOBAL * phglobal);
extern HRESULT __export __stdcall CreateStreamOnHGlobal (HGLOBAL hGlobal, BOOL fDeleteOnRelease,
                                LPSTREAM * ppstm);




extern HRESULT __export __stdcall OleDoAutoConvert(LPSTORAGE pStg, LPCLSID pClsidNew);
extern HRESULT __export __stdcall OleGetAutoConvert(const CLSID * const clsidOld, LPCLSID pClsidNew);
extern HRESULT __export __stdcall OleSetAutoConvert(const CLSID * const clsidOld, const CLSID * const clsidNew);
extern HRESULT __export __stdcall GetConvertStg(LPSTORAGE pStg);
extern HRESULT __export __stdcall SetConvertStg(LPSTORAGE pStg, BOOL fConvert);


extern HRESULT __export __stdcall OleConvertIStorageToOLESTREAMEx
    (LPSTORAGE pstg,

     CLIPFORMAT cfFormat,
     LONG lWidth,
     LONG lHeight,
     DWORD dwSize,
     LPSTGMEDIUM pmedium,
     LPOLESTREAM polestm);

extern HRESULT __export __stdcall OleConvertOLESTREAMToIStorageEx
    (LPOLESTREAM polestm,
     LPSTORAGE pstg,

     CLIPFORMAT * pcfFormat,
     LONG * plwWidth,
     LONG * plHeight,
     DWORD * pdwSize,
     LPSTGMEDIUM pmedium);


# 1 "/usr/local/arm-wince-pe/include/poppack.h" 1 3
# 34 "/usr/local/arm-wince-pe/include/poppack.h" 3
#pragma pack()
# 341 "/usr/local/arm-wince-pe/include/ole2.h" 2 3
# 27 "/usr/local/arm-wince-pe/include/windows.h" 2 3


# 1 "/usr/local/arm-wince-pe/include/imm.h" 1 3
# 15 "/usr/local/arm-wince-pe/include/imm.h" 3
typedef DWORD HIMC;
typedef DWORD HIMCC;



typedef HKL *LPHKL;
typedef UINT *LPUINT;


typedef struct tagCOMPOSITIONFORM {
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
} COMPOSITIONFORM, *PCOMPOSITIONFORM, *NPCOMPOSITIONFORM, *LPCOMPOSITIONFORM;


typedef struct tagCANDIDATEFORM {
    DWORD dwIndex;
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT rcArea;
} CANDIDATEFORM, *PCANDIDATEFORM, *NPCANDIDATEFORM, *LPCANDIDATEFORM;


typedef struct tagCANDIDATELIST {
    DWORD dwSize;
    DWORD dwStyle;
    DWORD dwCount;
    DWORD dwSelection;
    DWORD dwPageStart;
    DWORD dwPageSize;
    DWORD dwOffset[1];
} CANDIDATELIST, *PCANDIDATELIST, *NPCANDIDATELIST, *LPCANDIDATELIST;

typedef struct tagREGISTERWORDA {
    LPSTR lpReading;
    LPSTR lpWord;
} REGISTERWORDA, *PREGISTERWORDA, *NPREGISTERWORDA, *LPREGISTERWORDA;
typedef struct tagREGISTERWORDW {
    LPWSTR lpReading;
    LPWSTR lpWord;
} REGISTERWORDW, *PREGISTERWORDW, *NPREGISTERWORDW, *LPREGISTERWORDW;







typedef REGISTERWORDA REGISTERWORD;
typedef PREGISTERWORDA PREGISTERWORD;
typedef NPREGISTERWORDA NPREGISTERWORD;
typedef LPREGISTERWORDA LPREGISTERWORD;






typedef struct tagSTYLEBUFA {
    DWORD dwStyle;
    CHAR szDescription[32];
} STYLEBUFA, *PSTYLEBUFA, *NPSTYLEBUFA, *LPSTYLEBUFA;
typedef struct tagSTYLEBUFW {
    DWORD dwStyle;
    WCHAR szDescription[32];
} STYLEBUFW, *PSTYLEBUFW, *NPSTYLEBUFW, *LPSTYLEBUFW;







typedef STYLEBUFA STYLEBUF;
typedef PSTYLEBUFA PSTYLEBUF;
typedef NPSTYLEBUFA NPSTYLEBUF;
typedef LPSTYLEBUFA LPSTYLEBUF;






typedef struct tagIMEMENUITEMINFOA {
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    CHAR szString[80];
    HBITMAP hbmpItem;
} IMEMENUITEMINFOA, *PIMEMENUITEMINFOA, *NPIMEMENUITEMINFOA, *LPIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW {
    UINT cbSize;
    UINT fType;
    UINT fState;
    UINT wID;
    HBITMAP hbmpChecked;
    HBITMAP hbmpUnchecked;
    DWORD dwItemData;
    WCHAR szString[80];
    HBITMAP hbmpItem;
} IMEMENUITEMINFOW, *PIMEMENUITEMINFOW, *NPIMEMENUITEMINFOW, *LPIMEMENUITEMINFOW;






typedef IMEMENUITEMINFOA IMEMENUITEMINFO;
typedef PIMEMENUITEMINFOA PIMEMENUITEMINFO;
typedef NPIMEMENUITEMINFOA NPIMEMENUITEMINFO;
typedef LPIMEMENUITEMINFOA LPIMEMENUITEMINFO;


typedef struct tagIMECHARPOSITION {
    DWORD dwSize;
    DWORD dwCharPos;
    POINT pt;
    UINT cLineHeight;
    RECT rcDocument;
} IMECHARPOSITION, *PIMECHARPOSITION, *NPIMECHARPOSITION, *LPIMECHARPOSITION;






HKL ImmInstallIMEW(LPCWSTR lpszIMEFileName, LPCWSTR lpszLayoutText);






HWND ImmGetDefaultIMEWnd(HWND);

UINT ImmGetDescriptionW(HKL, LPWSTR, UINT uBufLen);






UINT ImmGetIMEFileNameW(HKL, LPWSTR, UINT uBufLen);






DWORD ImmGetProperty(HKL, DWORD);


BOOL ImmIsIME(HKL);

BOOL ImmSimulateHotKey(HWND, DWORD);

HIMC ImmCreateContext(void);
BOOL ImmDestroyContext(HIMC);
HIMC ImmGetContext(HWND);
BOOL ImmReleaseContext(HWND, HIMC);
HIMC ImmAssociateContext(HWND, HIMC);
BOOL ImmAssociateContextEx(HWND, HIMC, DWORD);

LONG ImmGetCompositionStringW(HIMC, DWORD, LPVOID, DWORD);






BOOL ImmSetCompositionStringW(HIMC, DWORD dwIndex, LPCVOID lpComp, DWORD, LPCVOID lpRead, DWORD);






DWORD ImmGetCandidateListCountW(HIMC, LPDWORD lpdwListCount);






DWORD ImmGetCandidateListW(HIMC, DWORD deIndex, LPCANDIDATELIST, DWORD dwBufLen);






DWORD ImmGetGuideLineW(HIMC, DWORD dwIndex, LPWSTR, DWORD dwBufLen);






BOOL ImmGetConversionStatus(HIMC, LPDWORD, LPDWORD);
BOOL ImmSetConversionStatus(HIMC, DWORD, DWORD);
BOOL ImmGetOpenStatus(HIMC);
BOOL ImmSetOpenStatus(HIMC, BOOL);

BOOL ImmGetCompositionFontW(HIMC, LPLOGFONTW);






BOOL ImmSetCompositionFontW(HIMC, LPLOGFONTW);






BOOL ImmConfigureIMEW(HKL, HWND, DWORD, LPVOID);






LRESULT ImmEscapeW(HKL, HIMC, UINT, LPVOID);






DWORD ImmGetConversionListW(HKL, HIMC, LPCWSTR, LPCANDIDATELIST, DWORD dwBufLen, UINT uFlag);






BOOL ImmNotifyIME(HIMC, DWORD dwAction, DWORD dwIndex, DWORD dwValue);


BOOL ImmGetStatusWindowPos(HIMC, LPPOINT);
BOOL ImmSetStatusWindowPos(HIMC, LPPOINT);
BOOL ImmGetCompositionWindow(HIMC, LPCOMPOSITIONFORM);
BOOL ImmSetCompositionWindow(HIMC, LPCOMPOSITIONFORM);
BOOL ImmGetCandidateWindow(HIMC, DWORD, LPCANDIDATEFORM);
BOOL ImmSetCandidateWindow(HIMC, LPCANDIDATEFORM);

BOOL ImmIsUIMessageW(HWND, UINT, WPARAM, LPARAM);






UINT ImmGetVirtualKey(HWND);

typedef int ( *REGISTERWORDENUMPROCA)(LPCSTR, DWORD, LPCSTR, LPVOID);
typedef int ( *REGISTERWORDENUMPROCW)(LPCWSTR, DWORD, LPCWSTR, LPVOID);






BOOL ImmRegisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister);






BOOL ImmUnregisterWordW(HKL, LPCWSTR lpszReading, DWORD, LPCWSTR lpszUnregister);






UINT ImmGetRegisterWordStyleW(HKL, UINT nItem, LPSTYLEBUFW);






UINT ImmEnumRegisterWordW(HKL, REGISTERWORDENUMPROCW, LPCWSTR lpszReading, DWORD, LPCWSTR lpszRegister, LPVOID);






BOOL ImmDisableIME(DWORD);
DWORD ImmGetImeMenuItemsA(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOA, LPIMEMENUITEMINFOA, DWORD);
DWORD ImmGetImeMenuItemsW(HIMC, DWORD, DWORD, LPIMEMENUITEMINFOW, LPIMEMENUITEMINFOW, DWORD);
# 690 "/usr/local/arm-wince-pe/include/imm.h" 3
typedef struct tagCOMPOSITIONSTRING {
    DWORD dwSize;
    DWORD dwCompReadAttrLen;
    DWORD dwCompReadAttrOffset;
    DWORD dwCompReadClauseLen;
    DWORD dwCompReadClauseOffset;
    DWORD dwCompReadStrLen;
    DWORD dwCompReadStrOffset;
    DWORD dwCompAttrLen;
    DWORD dwCompAttrOffset;
    DWORD dwCompClauseLen;
    DWORD dwCompClauseOffset;
    DWORD dwCompStrLen;
    DWORD dwCompStrOffset;
    DWORD dwCursorPos;
    DWORD dwDeltaStart;
    DWORD dwResultReadClauseLen;
    DWORD dwResultReadClauseOffset;
    DWORD dwResultReadStrLen;
    DWORD dwResultReadStrOffset;
    DWORD dwResultClauseLen;
    DWORD dwResultClauseOffset;
    DWORD dwResultStrLen;
    DWORD dwResultStrOffset;
    DWORD dwPrivateSize;
    DWORD dwPrivateOffset;
} COMPOSITIONSTRING, *PCOMPOSITIONSTRING, *NPCOMPOSITIONSTRING, *LPCOMPOSITIONSTRING;


typedef struct tagGUIDELINE {
    DWORD dwSize;
    DWORD dwLevel;
    DWORD dwIndex;
    DWORD dwStrLen;
    DWORD dwStrOffset;
    DWORD dwPrivateSize;
    DWORD dwPrivateOffset;
} GUIDELINE, *PGUIDELINE, *NPGUIDELINE, *LPGUIDELINE;

typedef struct tagRECONVERTSTRING {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwStrLen;
    DWORD dwStrOffset;
    DWORD dwCompStrLen;
    DWORD dwCompStrOffset;
    DWORD dwTargetStrLen;
    DWORD dwTargetStrOffset;
} RECONVERTSTRING, *PRECONVERTSTRING, *NPRECONVERTSTRING, *LPRECONVERTSTRING;

typedef struct tagCANDIDATEINFO {
    DWORD dwSize;
    DWORD dwCount;
    DWORD dwOffset[32];
    DWORD dwPrivateSize;
    DWORD dwPrivateOffset;
} CANDIDATEINFO, *PCANDIDATEINFO, *NPCANDIDATEINFO, *LPCANDIDATEINFO;


typedef struct tagINPUTCONTEXT {
    HWND hWnd;
    BOOL fOpen;
        DWORD fdwClient;
        HWND hwndImeInUse;
    POINT ptStatusWndPos;
    POINT ptSoftKbdPos;
    DWORD fdwConversion;
    DWORD fdwSentence;
    union {
        LOGFONTA A;
        LOGFONTW W;
    } lfFont;
    COMPOSITIONFORM cfCompForm;
    CANDIDATEFORM cfCandForm[4];
    HIMCC hCompStr;
    HIMCC hCandInfo;
    HIMCC hGuideLine;
    HIMCC hPrivate;
    DWORD dwNumMsgBuf;
    HIMCC hMsgBuf;
    DWORD fdwInit;
    DWORD dwReserve[3];
    UINT uSavedVKey;
    BOOL fChgMsg;
    DWORD fdwFlags;
    DWORD fdw31Compat;
    DWORD dwRefCount;

} INPUTCONTEXT, *PINPUTCONTEXT, *NPINPUTCONTEXT, *LPINPUTCONTEXT;


typedef struct tagIMEINFO {
    DWORD dwPrivateDataSize;
    DWORD fdwProperty;
    DWORD fdwConversionCaps;
    DWORD fdwSentenceCaps;
    DWORD fdwUICaps;
    DWORD fdwSCSCaps;
    DWORD fdwSelectCaps;
} IMEINFO, *PIMEINFO, *NPIMEINFO, *LPIMEINFO;


typedef struct tagSOFTKBDDATA {
    UINT uCount;
    WORD wCode[1][256];
} SOFTKBDDATA, *PSOFTKBDDATA, *NPSOFTKBDDATA, * LPSOFTKBDDATA;


BOOL ImmGetHotKey(DWORD, LPUINT lpuModifiers, LPUINT lpuVKey, LPHKL);
BOOL ImmSetHotKey(DWORD, UINT, UINT, HKL);
BOOL ImmGenerateMessage(HIMC);

LRESULT ImmRequestMessageA(HIMC, WPARAM, LPARAM);
LRESULT ImmRequestMessageW(HIMC, WPARAM, LPARAM);
# 813 "/usr/local/arm-wince-pe/include/imm.h" 3
HWND ImmCreateSoftKeyboard(UINT, HWND, int, int);
BOOL ImmDestroySoftKeyboard(HWND);
BOOL ImmShowSoftKeyboard(HWND, int);


LPINPUTCONTEXT ImmLockIMC(HIMC);
BOOL ImmUnlockIMC(HIMC);
DWORD ImmGetIMCLockCount(HIMC);

HIMCC ImmCreateIMCC(DWORD);
HIMCC ImmDestroyIMCC(HIMCC);
LPVOID ImmLockIMCC(HIMCC);
BOOL ImmUnlockIMCC(HIMCC);
DWORD ImmGetIMCCLockCount(HIMCC);
HIMCC ImmReSizeIMCC(HIMCC, DWORD);
DWORD ImmGetIMCCSize(HIMCC);
# 978 "/usr/local/arm-wince-pe/include/imm.h" 3
BOOL ImeInquire(LPIMEINFO, LPWSTR lpszUIClass, DWORD dwSystemInfoFlags);
BOOL ImeConfigure(HKL, HWND, DWORD, LPVOID);
DWORD ImeConversionListW(HIMC, LPCWSTR, LPCANDIDATELIST, DWORD dwBufLen, UINT uFlag);
BOOL ImeDestroy(UINT);
LRESULT ImeEscape(HIMC, UINT, LPVOID);
BOOL ImeProcessKey(HIMC, UINT, LPARAM, const LPBYTE);
BOOL ImeSelect(HIMC, BOOL);
BOOL ImeSetActiveContext(HIMC, BOOL);
UINT ImeToAsciiEx(UINT uVirtKey, UINT uScaCode, const LPBYTE lpbKeyState, LPDWORD lpdwTransBuf, UINT fuState, HIMC);
BOOL NotifyIME(HIMC, DWORD, DWORD, DWORD);
BOOL ImeRegisterWord(LPCWSTR, DWORD, LPCWSTR);
BOOL ImeUnregisterWord(LPCWSTR, DWORD, LPCWSTR);
UINT ImeGetRegisterWordStyle(UINT nItem, LPSTYLEBUF);
UINT ImeEnumRegisterWord(REGISTERWORDENUMPROCA, LPCWSTR, DWORD, LPCWSTR, LPVOID);
BOOL ImeSetCompositionString(HIMC, DWORD dwIndex, LPCVOID lpComp, DWORD, LPCVOID lpRead, DWORD);
DWORD ImeGetImeMenuItems(HIMC hIMC, DWORD dwFlags, DWORD dwType, LPIMEMENUITEMINFO lpParentMenu, LPIMEMENUITEMINFO lpMenu, DWORD dwSize);
# 1002 "/usr/local/arm-wince-pe/include/imm.h" 3
BOOL ImmIsValidIMC (
        HIMC hIMC
        );
# 1043 "/usr/local/arm-wince-pe/include/imm.h" 3
typedef struct _MYCANDLIST {
    HWND ParentWnd;
    LPCANDIDATELIST CandList;
} MYCANDLIST;





typedef struct _tagHWXRESULT
{
   WORD cbCount;
   WORD iSelection;
   WORD iPosition;
   TCHAR chCandidate[1];
} HWXRESULT, *PHWXRESULT;
# 1137 "/usr/local/arm-wince-pe/include/imm.h" 3
BOOL ImmSIPanelState(
    UINT dwCmd,
    LPVOID pValue
    );
# 30 "/usr/local/arm-wince-pe/include/windows.h" 2 3

# 1 "/usr/local/arm-wince-pe/include/tchar.h" 1 3
# 28 "/usr/local/arm-wince-pe/include/tchar.h" 3
typedef LPCTSTR PCTSTR;
# 32 "/usr/local/arm-wince-pe/include/windows.h" 2 3
# 17 "/usr/local/arm-wince-pe/include/rpc.h" 2 3
# 13 "/usr/local/arm-wince-pe/include/wtypes.h" 2 3
# 4 "wm/main.c" 2
# 1 "/usr/local/arm-wince-pe/include/commdlg.h" 1 3
# 11 "/usr/local/arm-wince-pe/include/commdlg.h" 3
# 1 "/usr/local/arm-wince-pe/include/pshpack1.h" 1 3
# 30 "/usr/local/arm-wince-pe/include/pshpack1.h" 3
#pragma pack(1)
# 12 "/usr/local/arm-wince-pe/include/commdlg.h" 2 3
# 37 "/usr/local/arm-wince-pe/include/commdlg.h" 3
typedef UINT ( *LPOFNHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

typedef struct tagOFNA {
   DWORD lStructSize;
   HWND hwndOwner;
   HINSTANCE hInstance;
   LPCSTR lpstrFilter;
   LPSTR lpstrCustomFilter;
   DWORD nMaxCustFilter;
   DWORD nFilterIndex;
   LPSTR lpstrFile;
   DWORD nMaxFile;
   LPSTR lpstrFileTitle;
   DWORD nMaxFileTitle;
   LPCSTR lpstrInitialDir;
   LPCSTR lpstrTitle;
   DWORD Flags;
   WORD nFileOffset;
   WORD nFileExtension;
   LPCSTR lpstrDefExt;
   LPARAM lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCSTR lpTemplateName;
} OPENFILENAMEA, *LPOPENFILENAMEA;
typedef struct tagOFNW {
   DWORD lStructSize;
   HWND hwndOwner;
   HINSTANCE hInstance;
   LPCWSTR lpstrFilter;
   LPWSTR lpstrCustomFilter;
   DWORD nMaxCustFilter;
   DWORD nFilterIndex;
   LPWSTR lpstrFile;
   DWORD nMaxFile;
   LPWSTR lpstrFileTitle;
   DWORD nMaxFileTitle;
   LPCWSTR lpstrInitialDir;
   LPCWSTR lpstrTitle;
   DWORD Flags;
   WORD nFileOffset;
   WORD nFileExtension;
   LPCWSTR lpstrDefExt;
   LPARAM lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCWSTR lpTemplateName;
} OPENFILENAMEW, *LPOPENFILENAMEW;




typedef OPENFILENAMEA OPENFILENAME;
typedef LPOPENFILENAMEA LPOPENFILENAME;


BOOL GetOpenFileNameA(LPOPENFILENAMEA);
BOOL GetOpenFileNameW ( LPOPENFILENAMEW );
BOOL GetSaveFileNameW(LPOPENFILENAMEW);
BOOL GetSaveFileNameA(LPOPENFILENAMEA);
# 154 "/usr/local/arm-wince-pe/include/commdlg.h" 3
typedef UINT ( *LPCCHOOKPROC) (HWND, UINT, WPARAM, LPARAM);



typedef struct _OFNOTIFYW
{
        NMHDR hdr;
        LPOPENFILENAMEW lpOFN;
        LPWSTR pszFile;
} OFNOTIFYW, *LPOFNOTIFYW;
typedef struct _OFNOTIFYA
{
        NMHDR hdr;
        LPOPENFILENAMEA lpOFN;
        LPSTR pszFile;
} OFNOTIFYA, *LPOFNOTIFYA;




typedef OFNOTIFYA OFNOTIFY;
typedef LPOFNOTIFYA LPOFNOTIFY;
# 272 "/usr/local/arm-wince-pe/include/commdlg.h" 3
typedef UINT ( *LPCCHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

typedef struct tagCHOOSECOLOR {
   DWORD lStructSize;
   HWND hwndOwner;
   HINSTANCE hInstance;
   COLORREF rgbResult;
   COLORREF* lpCustColors;
   DWORD Flags;
   LPARAM lCustData;
   LPCCHOOKPROC lpfnHook;
   LPCTSTR lpTemplateName;
} CHOOSECOLOR , *LPCHOOSECOLOR ;

BOOL ChooseColor (LPCHOOSECOLOR );
# 299 "/usr/local/arm-wince-pe/include/commdlg.h" 3
DWORD CommDlgExtendedError(void);

typedef UINT ( *LPPRINTHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

typedef struct tagPD {
   DWORD cbStruct;
   HWND hwndOwner;
   HDC hdc;
   DWORD dwFlags;
   RECT rcMinMargin;
   RECT rcMargin;
   HINSTANCE hinst;
   LPARAM lCustData;
   LPPRINTHOOKPROC pfnPrintHook;
   LPCTSTR pszPrintTemplateName;
   HGLOBAL hglbPrintTemplateResource;
} PRINTDLG , *LPPRINTDLG ;

BOOL PrintDlg (LPPRINTDLG);
# 370 "/usr/local/arm-wince-pe/include/commdlg.h" 3
# 1 "/usr/local/arm-wince-pe/include/poppack.h" 1 3
# 34 "/usr/local/arm-wince-pe/include/poppack.h" 3
#pragma pack()
# 371 "/usr/local/arm-wince-pe/include/commdlg.h" 2 3
# 5 "wm/main.c" 2
# 1 "state.h" 1
# 13 "state.h"
int state_load(int num,int onlytest);
int state_save(int num);
void save_sram(void);
void load_sram(void);
# 6 "wm/main.c" 2
# 1 "wm/devmode.h" 1



uint CDS_RESET = 0x40000000;
uint CDS_TEST = 0x00000002;
uint DMDO_0 = 0;
uint DMDO_90 = 1;
uint DMDO_180 = 2;
uint DMDO_270 = 4;


typedef struct _devicemodeW4 {
  WCHAR dmDeviceName[32];
  WORD dmSpecVersion;
  WORD dmDriverVersion;
  WORD dmSize;
  WORD dmDriverExtra;
  DWORD dmFields;
  short dmOrientation;
  short dmPaperSize;
  short dmPaperLength;
  short dmPaperWidth;
  short dmScale;
  short dmCopies;
  short dmDefaultSource;
  short dmPrintQuality;
  short dmColor;
  short dmDuplex;
  short dmYResolution;
  short dmTTOption;
  short dmCollate;
  WCHAR dmFormName[32];
  WORD dmLogPixels;
  DWORD dmBitsPerPel;
  DWORD dmPelsWidth;
  DWORD dmPelsHeight;
  DWORD dmDisplayFlags;
  DWORD dmDisplayFrequency;
  DWORD dmDisplayOrientation;
} DEVMODEW4;
# 7 "wm/main.c" 2

int so=0;

int timer_count = 0;
int old_timer_count = 0;
int paused = 0;
int frame_count = 0;
int running = 1;

int FSPosX = 0;
int FSPosY = 0;
int FRPosX = 0;
int FRPosY = 0;

SDL_Surface *screen;


char RomPath[260];
char RomName[260];
char RomDir[260];
char SaveDir[260];
char ConfigDir[260];
char tempname[260];

int sdir = 0;
int cdir = 0;


uint8 rotateright = 0;
uint8 show_keys = 1;
uint8 landscape = 1;
uint8 square_screen = 0;
uint8 crop_screen = 0;
uint8 fastsound = 0;
uint8 sound = 0;
uint8 use_z80 = 1;
uint8 use_sem = 0;
uint8 sixbuttonpad = 0;
uint8 llsfilter = 0;
uint8 fast_vid = 0;
uint8 cheat = 0;

uint8 NeedMessage = 1;
uint8 UncachedRender = 0;

uint32 sound_rate = 22050;
uint32 buf_frames = 4;
int frameskip = 3;
int autofs = 0;


uint32 key_start = 13;
uint32 key_mode = 0xC5;
uint32 key_a = 0xC2;
uint32 key_b = 0xC3;
uint32 key_c = 0xC4;
uint32 key_x = 0xC2;
uint32 key_y = 0xC3;
uint32 key_z = 0xC4;
uint32 key_switch = 0xC1;
uint32 key_up = 273;
uint32 key_down = 274;
uint32 key_left = 276;
uint32 key_right = 275;
uint32 key_up_left = 278;
uint32 key_up_right = 280;
uint32 key_down_right = 281;
uint32 key_down_left = 279;

uint32 temp_key_start = 13;
uint32 temp_key_mode = 0xC5;
uint32 temp_key_a = 0xC2;
uint32 temp_key_b = 0xC3;
uint32 temp_key_c = 0xC4;
uint32 temp_key_x = 0xC2;
uint32 temp_key_y = 0xC3;
uint32 temp_key_z = 0xC4;
uint32 temp_key_switch = 0xC1;
uint32 temp_key_up = 273;
uint32 temp_key_down = 274;
uint32 temp_key_left = 276;
uint32 temp_key_right = 275;
uint32 temp_key_up_left = 278;
uint32 temp_key_up_right = 280;
uint32 temp_key_down_right = 281;
uint32 temp_key_down_left = 279;

uint16 ScreenCache[320*320];

uint16 Toolbar[320*240];
uint16 AltToolbar[320*240];
uint8 Map[320*240];
uint32 ToolbarHeight;
uint8 ToolbarState = 0;

uint32 ConfigHeight;

uint8 need_reinit = 0;
uint8 need_sound = 0;

unsigned short sfiles[5];

uint32 tmod = 2;
uint32 tzones[9];

uint32 temp_tzones[9];

int num_blocks;

SDL_sem *sound_sem;






int int_ft;
int acc_ft;
int min_delay = 2;
int max_delay = 30;
int skipnext = 0;
double s_t;
double e_t;
double t_res;
long long p_c;

uint z80_counter_8 = 0;
uint z80_counter_16 = 0;

extern uint8 country;

char filename[260]= "\0";
char cfgfilename[260]= "\0";
wchar_t szFile[260] = "\0";
char mypath[260]="\0";
# 160 "wm/main.c"
extern void DIB_ShowTaskBar(BOOL taskBarShown);

OPENFILENAME ofn;

extern
struct {
  mymessage msg[32];
  int num;
} messages;

void Pause() {
paused=1;
if (sound) SDL_PauseAudio(1);
}

void UnPause() {
paused=0;
s_t = 0;
if (sound) SDL_PauseAudio(0);
}

# 1 "wm/handlers.h" 1
void (*PrepareToolbar) (int CheckFiles);
void (*UpdateToolbar) ();
void (*HandleMouseButton) (SDL_MouseButtonEvent * button, int isdown);
void (*DrawLine) (uint16 *src, int line, int offset, uint16 *dst, int length);
# 36 "wm/handlers.h"
void PrepareToolbarLS(int CheckFiles) {
int i;
char v[10];
memcpy(AltToolbar,Toolbar,ToolbarHeight*2*320);
FSPosX=FSPosY=0;
FRPosX=FRPosY=0;
if (CheckFiles) {
   for (i=0; i<5; i++) {
        if (state_load(i+1,1)==0) sfiles[i]=1; else sfiles[i]=0;
        }
}
   for (i=320*16; i<320*(ToolbarHeight); i++) {
        switch (Map[i]) {

        case GENPP_H1: if (sfiles[0]) AltToolbar[i]^=0xFFFF; break; case GENPP_H2: if (sfiles[1]) AltToolbar[i]^=0xFFFF; break; case GENPP_H3: if (sfiles[2]) AltToolbar[i]^=0xFFFF; break; case GENPP_H4: if (sfiles[3]) AltToolbar[i]^=0xFFFF; break; case GENPP_H5: if (sfiles[4]) AltToolbar[i]^=0xFFFF; break; case GENPP_Z80: if (use_z80) AltToolbar[i]^=0xFFFF; break; case GENPP_SOUND: if (sound) AltToolbar[i]^=0xFFFF; break; case GENPP_RR: if (rotateright) AltToolbar[i]^=0xFFFF; break; case GENPP_FASTSOUND: if (fastsound) AltToolbar[i]^=0xFFFF; break; case GENPP_LLS: if (llsfilter) AltToolbar[i]^=0xFFFF; break; case GENPP_SIXBUTTON: if (sixbuttonpad) AltToolbar[i]^=0xFFFF; break; case GENPP_NINE: if (tmod==3) AltToolbar[i]^=0xFFFF; break; case GENPP_SHOW: if (show_keys) AltToolbar[i]^=0xFFFF; break; case GENPP_CHEAT: if (cheat) AltToolbar[i]^=0xFFFF; break;;

        case GENPP_FS: if ((!FSPosX)|(!FSPosY)) {
                                                FSPosY=(i/320); FSPosX=(i%320);
                                                  if (!autofs) {
                                                  sprintf(v,"%d",frameskip);
                                                  draw_text((uint8*)AltToolbar,FSPosX,FSPosY+1,v,320); } else {
                                                  sprintf(v,"%s","auto");
                                                  draw_text((uint8*)AltToolbar,FSPosX-6,FSPosY+1,v,320); }
                                                };
                                                break;
        case GENPP_FR: if ((!FRPosX)|(!FRPosY)) {
                                                FRPosY=(i/320); FRPosX=(i%320);
                                                  sprintf(v,"%d",sound_rate);
                                                  draw_text((uint8*)AltToolbar,FRPosX-(3*2),FRPosY+1,v,320);
                                                };
                                                break;
        }
   }
}



void PrepareToolbarPT(int CheckFiles) {
int i;
char v[10];
memcpy(AltToolbar,Toolbar,ToolbarHeight*2*240);
FSPosX=FSPosY=0;
FRPosX=FRPosY=0;
if (CheckFiles) {
   for (i=0; i<5; i++) {
        if (state_load(i+1,1)==0) sfiles[i]=1; else sfiles[i]=0;
        }
}
   for (i=240*80; i<240*(ToolbarHeight); i++) {
        switch (Map[i]) {

        case GENPP_H1: if (sfiles[0]) AltToolbar[i]^=0xFFFF; break; case GENPP_H2: if (sfiles[1]) AltToolbar[i]^=0xFFFF; break; case GENPP_H3: if (sfiles[2]) AltToolbar[i]^=0xFFFF; break; case GENPP_H4: if (sfiles[3]) AltToolbar[i]^=0xFFFF; break; case GENPP_H5: if (sfiles[4]) AltToolbar[i]^=0xFFFF; break; case GENPP_Z80: if (use_z80) AltToolbar[i]^=0xFFFF; break; case GENPP_SOUND: if (sound) AltToolbar[i]^=0xFFFF; break; case GENPP_RR: if (rotateright) AltToolbar[i]^=0xFFFF; break; case GENPP_FASTSOUND: if (fastsound) AltToolbar[i]^=0xFFFF; break; case GENPP_LLS: if (llsfilter) AltToolbar[i]^=0xFFFF; break; case GENPP_SIXBUTTON: if (sixbuttonpad) AltToolbar[i]^=0xFFFF; break; case GENPP_NINE: if (tmod==3) AltToolbar[i]^=0xFFFF; break; case GENPP_SHOW: if (show_keys) AltToolbar[i]^=0xFFFF; break; case GENPP_CHEAT: if (cheat) AltToolbar[i]^=0xFFFF; break;;

        case GENPP_FS: if ((!FSPosX)|(!FSPosY)) {
                                                FSPosY=(i/240); FSPosX=(i%240);
                                                  if (!autofs) {
                                                  sprintf(v,"%d",frameskip);
                                                  draw_text ((uint8*)AltToolbar,FSPosX,FSPosY+1,v,240); } else {
                                                  sprintf(v,"%s","auto");
                                                  draw_text ((uint8*)AltToolbar,FSPosX-6,FSPosY+1,v,240); }
                                                };
                                                break;
        case GENPP_FR: if ((!FRPosX)|(!FRPosY)) {
                                                FRPosY=(i/240); FRPosX=(i%240);
                                                  sprintf(v,"%d",sound_rate);
                                                  draw_text((uint8*)AltToolbar,FRPosX-(3*2),FRPosY+1,v,240);
                                                };
                                                break;
        }
   }
}


void PrepareToolbarSQ(int CheckFiles) {
int i;
char v[10];
memcpy(AltToolbar,Toolbar,ToolbarHeight*2*240);
FSPosX=FSPosY=0;
FRPosX=FRPosY=0;
if (CheckFiles) {
   for (i=0; i<5; i++) {
        if (state_load(i+1,1)==0) sfiles[i]=1; else sfiles[i]=0;
        }
}
   for (i=240*16; i<240*(ToolbarHeight); i++) {
        switch (Map[i]) {

        case GENPP_H1: if (sfiles[0]) AltToolbar[i]^=0xFFFF; break; case GENPP_H2: if (sfiles[1]) AltToolbar[i]^=0xFFFF; break; case GENPP_H3: if (sfiles[2]) AltToolbar[i]^=0xFFFF; break; case GENPP_H4: if (sfiles[3]) AltToolbar[i]^=0xFFFF; break; case GENPP_H5: if (sfiles[4]) AltToolbar[i]^=0xFFFF; break; case GENPP_Z80: if (use_z80) AltToolbar[i]^=0xFFFF; break; case GENPP_SOUND: if (sound) AltToolbar[i]^=0xFFFF; break; case GENPP_RR: if (rotateright) AltToolbar[i]^=0xFFFF; break; case GENPP_FASTSOUND: if (fastsound) AltToolbar[i]^=0xFFFF; break; case GENPP_LLS: if (llsfilter) AltToolbar[i]^=0xFFFF; break; case GENPP_SIXBUTTON: if (sixbuttonpad) AltToolbar[i]^=0xFFFF; break; case GENPP_NINE: if (tmod==3) AltToolbar[i]^=0xFFFF; break; case GENPP_SHOW: if (show_keys) AltToolbar[i]^=0xFFFF; break; case GENPP_CHEAT: if (cheat) AltToolbar[i]^=0xFFFF; break;;

        case GENPP_FS: if ((!FSPosX)|(!FSPosY)) {
                                                FSPosY=(i/240); FSPosX=(i%240);
                                                  if (!autofs) {
                                                  sprintf(v,"%d",frameskip);
                                                  draw_text ((uint8*)AltToolbar,FSPosX,FSPosY+1,v,240); } else {
                                                  sprintf(v,"%s","auto");
                                                  draw_text ((uint8*)AltToolbar,FSPosX-6,FSPosY+1,v,240); }
                                                };
                                        break;
        case GENPP_FR: if ((!FRPosX)|(!FRPosY)) {
                                                FRPosY=(i/240); FRPosX=(i%240);
                                                  sprintf(v,"%d",sound_rate);
                                                  draw_text((uint8*)AltToolbar,FRPosX-(3*2),FRPosY+1,v,240);
                                                };
                                                break;
        }
   }
}

void UpdateToolbarPT() {
uint16* buffer;
int i,j,line;
j=0;
buffer=_GetGAPIBuffer();
if (!ToolbarState) {
   i=80;
   line=320 -i;
     do {
       DrawLine(&Toolbar[j],line++,0,buffer,240);
       j+=240;
     } while (--i);
} else {
   i=(ToolbarHeight-80);
   line=320 -i;
     do {
       DrawLine(&AltToolbar[j]+80*240,line++,0,buffer,240);
       j+=240;
     } while (--i);
}
_FreeGAPIBuffer();
}

void UpdateToolbarSQ() {
uint16* buffer;
int i,j,line;
j=0;
buffer=_GetGAPIBuffer();
if (!ToolbarState) {
   i=16;
   line=240 -i;
     do {
       DrawLine(&Toolbar[j],line++,0,buffer,240);
       j+=240;
     } while (--i);
} else {
   i=(ToolbarHeight-16);
   line=240 -i;
     do {
       DrawLine(&AltToolbar[j]+16*240,line++,0,buffer,240);
       j+=240;
     } while (--i);
}
_FreeGAPIBuffer();
}

void UpdateToolbarLS() {
uint16* buffer;
int i,j,line;
j=0;
buffer=_GetGAPIBuffer();
if (!ToolbarState) {
   i=16;
   line=240 -i;
     do {
       DrawLine(&Toolbar[j],line++,0,buffer,320);
       j+=320;
     } while (--i);
} else {
   i=(ToolbarHeight-16);
   line=240 -i;
     do {
       DrawLine(&AltToolbar[j]+16*320,line++,0,buffer,320);
       j+=320;
     } while (--i);
}
_FreeGAPIBuffer();
}
# 227 "wm/handlers.h"
void HandleMiniToolbar(SDL_MouseButtonEvent *b, int isdown) {
int ypos,xpos;
Uint8 action;

if (square_screen) {
   ypos=((b->y)-(240 -16)); xpos=(b->x);
   action=Map[xpos+ypos*240];
} else {
  if (landscape) {
     ypos=((b->y)-(240 -16)); xpos=(b->x);
     action=Map[xpos+ypos*320];
  } else {
     ypos=((b->y)-(320 -80)); xpos=(b->x);
     action=Map[xpos+ypos*240];
  }
}
   if (action==0) return;
     if (isdown) {
        switch (action) {
        case GENPP_START: input.pad[0].data |= (0x00000080); break;
        case GENPP_MODE: input.pad[0].data |= (0x00000800); break;
        case GENPP_A: input.pad[0].data |= (0x00000010); break;
        case GENPP_B: input.pad[0].data |= (0x00000020); break;
        case GENPP_C: input.pad[0].data |= (0x00000040); break;
        case GENPP_X: input.pad[0].data |= (0x00000100); break;
        case GENPP_Y: input.pad[0].data |= (0x00000200); break;
        case GENPP_Z: input.pad[0].data |= (0x00000400); break;
        case GENPP_EXIT: running = 0; break;
        case GENPP_RESET: system_reset(); break;
        case GENPP_NEXT: Pause(); ToolbarState=1; PrepareToolbar(1); UpdateToolbar(); break;

        case GENPP_S1: Pause(); state_save(1); UnPause(); break;
        case GENPP_S2: Pause(); state_save(2); UnPause(); break;
        case GENPP_S3: Pause(); state_save(3); UnPause(); break;
        case GENPP_S4: Pause(); state_save(4); UnPause(); break;
        case GENPP_S5: Pause(); state_save(5); UnPause(); break;

        case GENPP_L1: Pause(); state_load(1,0); UnPause(); break;
        case GENPP_L2: Pause(); state_load(2,0); UnPause(); break;
        case GENPP_L3: Pause(); state_load(3,0); UnPause(); break;
        case GENPP_L4: Pause(); state_load(4,0); UnPause(); break;
        case GENPP_L5: Pause(); state_load(5,0); UnPause(); break;
        }
     } else {
        switch (action) {
        case GENPP_START: input.pad[0].data &=~ (0x00000080); break;
        case GENPP_MODE: input.pad[0].data &=~ (0x00000800); break;
        case GENPP_A: input.pad[0].data &=~ (0x00000010); break;
        case GENPP_B: input.pad[0].data &=~ (0x00000020); break;
        case GENPP_C: input.pad[0].data &=~ (0x00000040); break;
        case GENPP_X: input.pad[0].data &=~ (0x00000100); break;
        case GENPP_Y: input.pad[0].data &=~ (0x00000200); break;
        case GENPP_Z: input.pad[0].data &=~ (0x00000400); break;
        }
     }
return;
}

void ClearAll();






void HandleToolbar(SDL_MouseButtonEvent *b, int isdown) {
int ypos,xpos;
Uint8 action;
char filename[1000];
int resound=0;

if (square_screen) {
    ypos=((b->y)-(240 -(ToolbarHeight-16))); xpos=(b->x);
    action=Map[xpos+(ypos+16)*240];
} else {
  if (landscape) {
    ypos=((b->y)-(240 -(ToolbarHeight-16))); xpos=(b->x);
    action=Map[xpos+(ypos+16)*320];
  } else {
   ypos=((b->y)-(320 -(ToolbarHeight-80))); xpos=(b->x);
   action=Map[xpos+(ypos+80)*240];
  }
}

   if (action==0) return;
     if (isdown) {
        switch (action) {
        case GENPP_EXIT: running = 0; break;
        case GENPP_RESET: system_reset(); ClearAll(); ToolbarState=0; UpdateToolbar(); UnPause();; break;
        case GENPP_NEXT: ClearAll(); ToolbarState=0; UpdateToolbar(); UnPause();; break;

        case GENPP_S1: state_save(1); ClearAll(); ToolbarState=0; UpdateToolbar(); UnPause();; break;
        case GENPP_S2: state_save(2); ClearAll(); ToolbarState=0; UpdateToolbar(); UnPause();; break;
        case GENPP_S3: state_save(3); ClearAll(); ToolbarState=0; UpdateToolbar(); UnPause();; break;
        case GENPP_S4: state_save(4); ClearAll(); ToolbarState=0; UpdateToolbar(); UnPause();; break;
        case GENPP_S5: state_save(5); ClearAll(); ToolbarState=0; UpdateToolbar(); UnPause();; break;

        case GENPP_L1: state_load(1,0); ClearAll(); ToolbarState=0; UpdateToolbar(); UnPause();; break;
        case GENPP_L2: state_load(2,0); ClearAll(); ToolbarState=0; UpdateToolbar(); UnPause();; break;
        case GENPP_L3: state_load(3,0); ClearAll(); ToolbarState=0; UpdateToolbar(); UnPause();; break;
        case GENPP_L4: state_load(4,0); ClearAll(); ToolbarState=0; UpdateToolbar(); UnPause();; break;
        case GENPP_L5: state_load(5,0); ClearAll(); ToolbarState=0; UpdateToolbar(); UnPause();; break;

        case GENPP_PT: landscape=0; need_reinit=1; ClearAll(); ToolbarState=0; UpdateToolbar(); UnPause();; break;
        case GENPP_LS: landscape=1; need_reinit=1; ClearAll(); ToolbarState=0; UpdateToolbar(); UnPause();; break;
        case GENPP_RR: rotateright^=1; landscape=1; need_reinit=1; ClearAll(); ToolbarState=0; UpdateToolbar(); UnPause();; break;
        case GENPP_CS: crop_screen^=1; landscape=0; need_reinit=1; ClearAll(); ToolbarState=0; UpdateToolbar(); UnPause();; break;

        case GENPP_FASTSOUND: fastsound^=1; PrepareToolbar(0); UpdateToolbar(); break;
        case GENPP_LLS: llsfilter^=1; PrepareToolbar(0); UpdateToolbar(); break;
        case GENPP_SIXBUTTON: sixbuttonpad^=1; io_reset(); PrepareToolbar(0); UpdateToolbar(); break;
        case GENPP_NINE: if (tmod==3) tmod=2; else tmod=3; PrepareToolbar(0); UpdateToolbar(); break;
        case GENPP_SHOW: show_keys^=1; PrepareToolbar(0); UpdateToolbar(); break;
        case GENPP_CHEAT: cheat^=1; if (cheat) int_ft<<=1; else int_ft>>=1; PrepareToolbar(0); UpdateToolbar(); break;

        case GENPP_FS_UP: if (!autofs) { frameskip++;} else {frameskip=0;}; autofs=0; if (frameskip>9) frameskip=9; PrepareToolbar(0); UpdateToolbar(); break;
        case GENPP_FS_DOWN: frameskip--; autofs=0; if (frameskip<0) {frameskip=0; autofs=1;} PrepareToolbar(0); UpdateToolbar(); break;

        case GENPP_FR_UP:
                        if (sound_rate==22050) {sound_rate=44100; resound=1;};
                        if (sound_rate==11025) {sound_rate=22050; resound=1;};
                        if (sound_rate==8000) {sound_rate=11025; resound=1;};
                          if (resound) {
                             if (sound) {
                                SDL_LockAudio();
                                 sdl_soundstop();
                                 audio_shutdown();
                                 audio_init(sound_rate);
                                 sdl_soundstart();
                                SDL_PauseAudio(1);
                                SDL_UnlockAudio();
                                 };
                                PrepareToolbar(0); UpdateToolbar();
                             };
                        break;

        case GENPP_FR_DOWN:
                          if (sound_rate==11025) {sound_rate=8000; resound=1;} ;
                          if (sound_rate==22050) {sound_rate=11025; resound=1;} ;
                          if (sound_rate==44100) {sound_rate=22050; resound=1;} ;
                          if (resound) {
                             if (sound) {
                                SDL_LockAudio();
                                 sdl_soundstop();
                                 audio_shutdown();
                                 audio_init(sound_rate);
                                 sdl_soundstart();
                                SDL_PauseAudio(1);
                                SDL_UnlockAudio();
                                 };
                                PrepareToolbar(0); UpdateToolbar();
                             };
                        break;

        case GENPP_Z80: use_z80^=1;
                        if (!use_z80) {

                        } else {




                        z80_reset(0);
                        z80_set_irq_callback(z80_irq_callback);

                        }
                        PrepareToolbar(0); UpdateToolbar(); break;

        case GENPP_SOUND: sound^=1;
                                if (sound) {
                                  audio_init(sound_rate);
                                  if (snd.enabled) { sdl_soundstart(); SDL_PauseAudio(1); } else sound=0;
                                } else {
                                  if (snd.enabled) sdl_soundstop();
                                  audio_shutdown();
                                }
                                  PrepareToolbar(0); UpdateToolbar(); break;

        case GENPP_SAVE:
                                set_local_opts();
                                sprintf(filename,"%s\\%s%s",ConfigDir,RomName,".cfg");
                                        locopts_save(filename);
                                sprintf(filename,"Options saved to %s\\%s%s",ConfigDir,RomName,".cfg");
                                        AddMessage(filename,60);
                                        ClearAll(); ToolbarState=0; UpdateToolbar(); UnPause();;
                                        break;

        }
}
return;
}






void CopyToTemp() {
temp_x=key_start;
temp_x=key_mode;
temp_x=key_a;
temp_x=key_b;
temp_x=key_c;
temp_x=key_x;
temp_x=key_y;
temp_x=key_z;
temp_x=key_switch;
temp_x=key_up;
temp_x=key_down;
temp_x=key_left;
temp_x=key_right;
temp_x=key_up_left;
temp_x=key_up_right;
temp_x=key_down_right;
temp_x=key_down_left;
}



void HandleConfig(SDL_MouseButtonEvent *b, int isdown) {
int ypos,xpos;
Uint8 action;

if (square_screen) {
    ypos=((b->y)-(240 -(ConfigHeight))); xpos=(b->x);
    action=Map[xpos+(ypos+16)*240];
} else {
  if (landscape) {
    ypos=((b->y)-(240 -(ConfigHeight))); xpos=(b->x);
    if ((xpos<40)|(xpos>280)) return;
    action=Map[(xpos-40)+(ypos+16)*320];
  } else {
   ypos=((b->y)-(320 -(ConfigHeight))); xpos=(b->x);
   action=Map[xpos+(ypos+80)*240];
  }
}

   if (action==0) return;
     if (isdown) {
        switch (action) {

        }
}
return;
}
# 480 "wm/handlers.h"
void HandleMouseButtonSQ(SDL_MouseButtonEvent * button, int isdown) {
int zone;

        if ((button->y>=(240 -16))&(!ToolbarState)) { HandleMiniToolbar(button,isdown); return; }
        if ((button->y>=(240 -(ToolbarHeight-16)))&(ToolbarState==1)) { HandleToolbar(button,isdown); return; }

        int xzone = (button->x*tmod)/240;
        zone = (button->y/75) + xzone*3;
        if (zone>8) zone = 8;

if (isdown) input.pad[0].data |= tzones[zone];
        else input.pad[0].data &=~ tzones[zone];

}

void HandleMouseButtonPT(SDL_MouseButtonEvent * button, int isdown) {
int zone;

        if ((button->y>=(320 -80))&(!ToolbarState)) { HandleMiniToolbar(button,isdown); return; }
        if ((button->y>=(320 -(ToolbarHeight-80)))&(ToolbarState==1)) { HandleToolbar(button,isdown); return; }

        int xzone = (button->x*tmod)/240;
        zone = (button->y/75) + xzone*3;
        if (zone>8) zone = 8;

if (isdown) input.pad[0].data |= tzones[zone];
        else input.pad[0].data &=~ tzones[zone];

}

void HandleMouseButtonLS(SDL_MouseButtonEvent * button, int isdown) {
int zone;

        if ((button->y>=(240 -16))&(!ToolbarState)) { HandleMiniToolbar(button,isdown); return; }
        if ((button->y>=(240 -(ToolbarHeight-16)))&(ToolbarState==1)) { HandleToolbar(button,isdown); return; }

        int xzone = (button->x*tmod)/320;
        zone = (button->y/75) + xzone*3;
        if (zone>8) zone = 8;

if (isdown) input.pad[0].data |= tzones[zone];
        else input.pad[0].data &=~ tzones[zone];

}
# 182 "wm/main.c" 2

char * b2s(int val) {
if (val) return("On"); else return("Off");
}
# 211 "wm/main.c"
void ClearAll() {
                int cnt, ys;
                uint32 *outW;
                uint32 *outC;
                if (square_screen) ys=240; else ys=320;
                outW = (uint32 *)_GetGAPIBuffer();
                outC = (uint32 *)ScreenCache;
                cnt = ys*240/2;
                do {
                *outW++ = 0;
                *outC++ = 0;
                } while (--cnt);
                _FreeGAPIBuffer();
}

void SetHandlers() {
gzFile *g;
        if (square_screen) {
                PrepareToolbar=PrepareToolbarSQ;
                UpdateToolbar=UpdateToolbarSQ;
                HandleMouseButton=HandleMouseButtonSQ;
                DrawLine=DrawLine_P;
                sprintf(filename,"%s/%s",mypath,"genpp.sq");
            g = gzopen(filename,"rb");
            gzread(g,&ToolbarHeight,4);
            gzread(g,Toolbar,240*ToolbarHeight*2);
            gzread(g,Map,240*ToolbarHeight);
            gzclose(g);
        } else {
        if (landscape) {
                PrepareToolbar=PrepareToolbarLS;
                UpdateToolbar=UpdateToolbarLS;
                HandleMouseButton=HandleMouseButtonLS;
                sprintf(filename,"%s/%s",mypath,"genpp.ls");
                if (rotateright) DrawLine=DrawLine_RR; else DrawLine=DrawLine_RL;
            g = gzopen(filename,"rb");
            gzread(g,&ToolbarHeight,4);
            gzread(g,Toolbar,320*ToolbarHeight*2);
            gzread(g,Map,320*ToolbarHeight);
            gzclose(g);
                } else {
                PrepareToolbar=PrepareToolbarPT;
                UpdateToolbar=UpdateToolbarPT;
                HandleMouseButton=HandleMouseButtonPT;
                DrawLine=DrawLine_P;
                sprintf(filename,"%s/%s",mypath,"genpp.pt");
            g = gzopen(filename,"rb");
            gzread(g,&ToolbarHeight,4);
            gzread(g,Toolbar,240*ToolbarHeight*2);
            gzread(g,Map,240*ToolbarHeight);
            gzclose(g);
            }
        }
}

void ReinitScreen()
{
Pause();

SDL_QuitSubSystem(0x00000020);

if (square_screen) {

screen = SDL_SetVideoMode(240, 240, 16, 0x00000000|0x80000000);

} else {

if (landscape) {
if (rotateright) screen = SDL_SetVideoMode(320, 240, 16, 0x00000000|0x80000000|0x00010000); else screen = SDL_SetVideoMode(320, 240, 16, 0x00000000|0x80000000);

} else { screen = SDL_SetVideoMode(240, 320, 16, 0x00000000|0x80000000); }

}

    SetHandlers();
    set_renderer();
    ToolbarState=0;
    UpdateToolbar();

UnPause();

}

void RestoreOrientation()
{
DEVMODEW4 devmode = {0};
  devmode.dmSize = sizeof(DEVMODEW4);
  devmode.dmDisplayOrientation = so;
  devmode.dmFields = 0x00800000;;
  ChangeDisplaySettingsEx(((void *)0), &devmode, ((void *)0), 0, ((void *)0));
}

void SetOrientation()
{
DEVMODEW4 devmode = {0};
devmode.dmSize = sizeof(DEVMODEW4);
devmode.dmFields = 0x00800000;;
ChangeDisplaySettingsEx(((void *)0), &devmode, 0, CDS_TEST, ((void *)0));
so=devmode.dmDisplayOrientation;

if (so!=0) {
devmode.dmSize = sizeof(DEVMODEW4);
devmode.dmDisplayOrientation = DMDO_0;
devmode.dmFields = 0x00800000;;
ChangeDisplaySettingsEx(((void *)0), &devmode, ((void *)0), 0, ((void *)0));
}
}

volatile int ScreenMemSpeed(void)
{
                int cnt;
                double tb,te;
                uint16 *outW, s;
                outW = (uint16 *)_GetGAPIBuffer();
                s = outW;

{ QueryPerformanceFrequency(&p_c); t_res = (double)(p_c); };
{ QueryPerformanceCounter(&p_c); tb = ((double)(p_c)*1000)/t_res; };
                cnt = 240*240;
                do {
                *outW++ = 1; }
                while (--cnt);

                cnt = 240*240;
                do {
                *outW-- = 0; }
                while (--cnt);

{ QueryPerformanceCounter(&p_c); te = ((double)(p_c)*1000)/t_res; };
                _FreeGAPIBuffer();
cnt = te-tb;
return cnt;
}

volatile int DeviceMemSpeed(void)
{
                int cnt;
                double tb,te;
                uint16 *outW;
                outW = (uint16 *)ScreenCache;

{ QueryPerformanceFrequency(&p_c); t_res = (double)(p_c); };
{ QueryPerformanceCounter(&p_c); tb = ((double)(p_c)*1000)/t_res; };
                cnt = 240*240;
                do {
                *outW++ = 1; }
                while (--cnt);
                cnt = 240*240;
                do {
                *outW-- = 0; }
                while (--cnt);

{ QueryPerformanceCounter(&p_c); te = ((double)(p_c)*1000)/t_res; };
cnt = te-tb;
return cnt;
}

void ExitApp()
{




        RestoreOrientation();
        DIB_ShowTaskBar(1);
        exit(1);


}



int WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPTSTR lpCmdLine, int nCmdShow)
{

gzFile *g;
int i,xs,ys;
char c[80];
SDL_Event event;
FILE *mylog;



    getcwd(mypath,260);

    mylog = fopen("GenPP.log","w+");
    *(_impure_ptr->_stderr) = *mylog;

    fprintf ((_impure_ptr->_stderr),"Genesis Plus/Pocket PC\n");

    sprintf(cfgfilename,"%s/%s",mypath,"genpp.cfg");
    if (gtkopts_load(cfgfilename)==(-1)) gtkopts_save(cfgfilename);
    get_global_opts();

    SetOrientation();

    xs=GetSystemMetrics(0);
    ys=GetSystemMetrics(1);

    if (ys==240)
     if (xs==ys) { square_screen=1; landscape=0; ys=240; } else { square_screen=0; ys=320; };

    screen = SDL_SetVideoMode(240, ys, 16, 0x00000000|0x80000000);

    sprintf(filename,"%s/%s",mypath,"genpp.logo");
    g = gzopen(filename,"rb");
    gzread(g,screen->pixels,ys*240*2);
    gzclose(g);
    SDL_Flip(screen);



extern gsGetOpenFileName(OPENFILENAME * ofn);
extern HWND SDL_Window;



wchar_t rp[260];




   memset( &(ofn), 0, sizeof(ofn));
   ofn.lStructSize = sizeof(ofn);
   ofn.hwndOwner = SDL_Window;
   ofn.lpstrFile = szFile;
   ofn.nMaxFile = 260;
   ofn.lpstrFilter = "Genesis/Megadrive ROMs\0*.bin;*.smd;*.gen;*.zip\0";
   ofn.lpstrTitle = "GenPP - Select ROM";

const char * v1 = gtkopts_getvalue("romfolder");


   mbstowcs(rp,v1,260);



   ofn.lpstrInitialDir = rp;

   ofn.Flags = 0x00080000;

   if (gsGetOpenFileName(&ofn)) {
   wcstombs(filename,szFile,260);



   sprintf(RomPath,"%s",filename);
   } else { ExitApp(); };




   i=strlen(RomPath);
   do {
   if (RomPath[i]=='.') { RomPath[i]='\0'; break; }
   if (RomPath[i]=='\\') break;
   if (RomPath[i]=='/') break;
   } while (--i);


   char TRN[260];
   TRN[0]='\0';
   i=strlen(RomPath);
   int j=0;
   do {
   if (RomPath[i]=='\\') { RomPath[i]='\0'; RomPath[i+1]='\0'; break; };
   if (RomPath[i]=='/') { RomPath[i]='\0'; RomPath[i+1]='\0'; break; };
   TRN[j++]=RomPath[i];
   } while (i--);

   i=0;
   if (j>0) {
     do {
     RomName[i++]=TRN[j-1];
     } while (--j);
   } else { RomName[0]='\0'; };
   RomName[i]='\0';


   if (strlen(RomPath)==0) { RomPath[0]='\\'; RomPath[1]='\0'; }

   sprintf(RomDir,"%s",RomPath);

   sprintf(SaveDir,"%s",RomDir);
   sprintf(ConfigDir,"%s",RomDir);

   const char * v;

   switch (sdir) {
       case 0: sprintf(SaveDir,"%s",RomDir); break;
       case 1: sprintf(SaveDir,"%s",mypath); break;
       case 2: {v = gtkopts_getvalue("savefolder"); sprintf(SaveDir,"%s",v); } break;
   };

   switch (cdir) {
       case 0: sprintf(ConfigDir,"%s",RomDir); break;
       case 1: sprintf(ConfigDir,"%s",mypath); break;
       case 2: {v = gtkopts_getvalue("configfolder"); sprintf(ConfigDir,"%s",v); } break;
   };

   gtkopts_setvalue("romfolder",RomDir);

   gtkopts_save(cfgfilename);

   SDL_Flip(screen);

  sprintf(tempname,"%s\\%s%s",ConfigDir,RomName,".cfg");
    if (locopts_load(tempname)!=(-1)) {
        get_local_opts();
        sprintf(tempname,"Using options from %s\\%s%s",ConfigDir,RomName,".cfg");
        AddMessage(tempname,80); };

   if(!load_rom(filename))
        {
          ExitApp();
        }

    if (sram.mem) { load_sram(); }

    if (!use_z80) AddMessage("Z80: Off",100); else AddMessage("Z80: On",100);

    if (llsfilter) AddMessage("Lame sound filter used",100);




    if ( ScreenMemSpeed()>>1 >= DeviceMemSpeed() ) fast_vid = 0; else fast_vid = 1;
    if (fast_vid) AddMessage("Fast video",100); else AddMessage("Slow video",100);

    ReinitScreen();

    memset(&bitmap, 0, sizeof(t_bitmap));
    bitmap.width = 320;
    bitmap.height = 240;
    bitmap.depth = 16;
    bitmap.granularity = 2;
    bitmap.pitch = (bitmap.width * bitmap.granularity);
    bitmap.data = ((void *)0);
    bitmap.viewport.w = 256;
    bitmap.viewport.h = 224;
    bitmap.viewport.x = 0x20;
    bitmap.viewport.y = 0x00;
    bitmap.remap = 1;

    system_init();





    int_ft = 1000 / vdp_rate;
    if (vdp_rate==50) int_ft--;
    s_t = 0;
    { QueryPerformanceFrequency(&p_c); t_res = (double)(p_c); };

if (sound) {
    audio_init(sound_rate);
    if (snd.enabled) sdl_soundstart(); else sound=0;
}
    sprintf(c,"Sound: %s @ %dHz",b2s(sound),sound_rate);
    AddMessage(c,100);

    system_reset();

        while(running)
        {

                running = 1;

                while (SDL_PollEvent(&event))
                {
                        switch(event.type)
                        {
                                case SDL_QUIT:
                                        running = 0;
                                        break;

                                case SDL_ACTIVEEVENT:
                                        if(event.active.state & (0x02 | 0x04))
                                        {
                                                paused = !event.active.gain;
                                                if (paused) Pause(); else UnPause();
                                        }
                                        break;

                                case SDL_MOUSEBUTTONDOWN:
                                        HandleMouseButton(&event.button, 1);
                                break;

                                case SDL_MOUSEBUTTONUP:
                                        HandleMouseButton(&event.button, 0);
                                break;

                                case SDL_KEYDOWN:

                                        if(event.key.keysym.sym==key_switch) {
                                        if (!ToolbarState) {
                                        Pause(); ToolbarState=1; PrepareToolbar(1); UpdateToolbar();
                                        } else { ClearAll(); ToolbarState=0; UpdateToolbar(); UnPause();; };
                                        break;
                                        }

    if(event.key.keysym.sym==key_up) { input.pad[0].data |= (0x00000001); break; }
    if(event.key.keysym.sym==key_down) { input.pad[0].data |= (0x00000002); break; }
    if(event.key.keysym.sym==key_left) { input.pad[0].data |= (0x00000008); break; }
    if(event.key.keysym.sym==key_right) { input.pad[0].data |= (0x00000004); break; }

    if(event.key.keysym.sym==key_up_left) { input.pad[0].data |= (0x00000001); input.pad[0].data |= (0x00000008); break; }
    if(event.key.keysym.sym==key_up_right) { input.pad[0].data |= (0x00000001); input.pad[0].data |= (0x00000004); break; }
    if(event.key.keysym.sym==key_down_right) { input.pad[0].data |= (0x00000002); input.pad[0].data |= (0x00000004); break; }
    if(event.key.keysym.sym==key_down_left) { input.pad[0].data |= (0x00000002); input.pad[0].data |= (0x00000008); break; }

    if(event.key.keysym.sym==key_a) { input.pad[0].data |= (0x00000010); break;}
    if(event.key.keysym.sym==key_b) { input.pad[0].data |= (0x00000020); break;}
    if(event.key.keysym.sym==key_c) { input.pad[0].data |= (0x00000040); break;}
    if(event.key.keysym.sym==key_x) { input.pad[0].data |= (0x00000100); break;}
    if(event.key.keysym.sym==key_y) { input.pad[0].data |= (0x00000200); break;}
    if(event.key.keysym.sym==key_z) { input.pad[0].data |= (0x00000400); break;}
    if(event.key.keysym.sym==key_start) { input.pad[0].data |= (0x00000080); break;}
    if(event.key.keysym.sym==key_mode) { input.pad[0].data |= (0x00000800); break;}

if (show_keys) {
    sprintf(c,"Key press: %d",event.key.keysym.sym);
    AddMessage(c,100);
    }
    break;

                                case SDL_KEYUP:

    if(event.key.keysym.sym==key_up) { input.pad[0].data &=~ (0x00000001); break; }
    if(event.key.keysym.sym==key_down) { input.pad[0].data &=~ (0x00000002); break; }
    if(event.key.keysym.sym==key_left) { input.pad[0].data &=~ (0x00000008); break; }
    if(event.key.keysym.sym==key_right) { input.pad[0].data &=~ (0x00000004); break; }

    if(event.key.keysym.sym==key_up_left) { input.pad[0].data &=~ (0x00000001); input.pad[0].data &=~ (0x00000008); break; }
    if(event.key.keysym.sym==key_up_right) { input.pad[0].data &=~ (0x00000001); input.pad[0].data &=~ (0x00000004); break; }
    if(event.key.keysym.sym==key_down_right) { input.pad[0].data &=~ (0x00000002); input.pad[0].data &=~ (0x00000004); break; }
    if(event.key.keysym.sym==key_down_left) { input.pad[0].data &=~ (0x00000002); input.pad[0].data &=~ (0x00000008); break; }

    if(event.key.keysym.sym==key_a) { input.pad[0].data &=~ (0x00000010); break; }
    if(event.key.keysym.sym==key_b) { input.pad[0].data &=~ (0x00000020); break; }
    if(event.key.keysym.sym==key_c) { input.pad[0].data &=~ (0x00000040); break; }
    if(event.key.keysym.sym==key_x) { input.pad[0].data &=~ (0x00000100); break; }
    if(event.key.keysym.sym==key_y) { input.pad[0].data &=~ (0x00000200); break; }
    if(event.key.keysym.sym==key_z) { input.pad[0].data &=~ (0x00000400); break; }
    if(event.key.keysym.sym==key_start) { input.pad[0].data &=~ (0x00000080); break; }
    if(event.key.keysym.sym==key_mode) { input.pad[0].data &=~ (0x00000800); break; }

if (show_keys) {
    sprintf(c,"Key release: %d",event.key.keysym.sym);
    AddMessage(c,100);
}

    break;

                                default:
                                        break;
                        }
                }

if (need_reinit) {
        if (square_screen) { landscape=0; rotateright=0; };
        SDL_QuitSubSystem(0x00000020);
        ReinitScreen();
        bitmap.viewport.changed = 1;
        need_reinit=0;
}


if(!paused)
        {
        frame_count++;


        if (s_t == 0) { { QueryPerformanceCounter(&p_c); s_t = ((double)(p_c)*1000)/t_res; }; acc_ft = int_ft; };


        if ((frame_count > frameskip )&(!skipnext)) {
                        if(bitmap.viewport.changed)
                        {
                        bitmap.viewport.changed = 0;
                        bitmap.viewport.x = (320-bitmap.viewport.w)>>1;
                        ClearAll();
                        UpdateToolbar();
                        }

                        frame_count=0;
                        bitmap.data = _GetGAPIBuffer();
                        if(!system_frame_gens(0)) system_reset();
                        if (fast_vid)
                              {
                                if ((!NeedMessage)&(!UncachedRender)) set_renderer();
                                if ((NeedMessage)&(UncachedRender)) { UpdateCache(); set_renderer(); }
                              };
                        ProcessMessages();
                        _FreeGAPIBuffer();

        } else { system_frame_gens(1); }


        skipnext = 0;
                if (s_t!=0) {
                        { QueryPerformanceCounter(&p_c); e_t = ((double)(p_c)*1000)/t_res; };
                        int diff_ft = e_t - s_t;
                        if ((acc_ft - diff_ft) > min_delay) {
                                if ((acc_ft - diff_ft) < max_delay) Sleep(acc_ft - diff_ft - 1);
                                s_t = 0;
                        } else {
                                skipnext = ((diff_ft>int_ft)&(autofs));
                        }
                        acc_ft += int_ft;
                }


         } else

          { Sleep(1); };
  }

  if (sram.mem) save_sram();

  system_shutdown();

  fclose (log);

  ExitApp();

}

void sdl_soundcallback(void *userdata, uint8 *stream, int len)
{
snd.block_size=len>>2;
snd.buffer=(int16*)stream;
num_blocks=0;
if (use_sem) {if (SDL_SemValue(sound_sem)==0) SDL_SemPost(sound_sem);}
}

int sdl_soundstart(void)
{
  SDL_AudioSpec as;

  if (SDL_InitSubSystem(0x00000010) == -1) {
      fprintf((_impure_ptr->_stderr),("SDL_InitSubSystem failed"));
      return 1;
    }

  as.userdata = snd.buffer;
  as.freq = snd.sample_rate;
  as.format = 0x8010;
  as.channels = 2;
  buf_frames = (vdp_rate/4 + 1);
  as.samples = snd.buffer_size*buf_frames;
  as.callback = sdl_soundcallback;

  if (SDL_OpenAudio(&as, ((void *)0)) == -1) {
    fprintf((_impure_ptr->_stderr),("SDL_OpenAudio failed: %s", SDL_GetError()));
        SDL_Delay(500);
    SDL_QuitSubSystem(0x00000010);
    return 1;
  }

  if (use_sem) sound_sem = SDL_CreateSemaphore(1);

  SDL_PauseAudio(0);

  return 0;
}

int sdl_soundstop(void)
{
  if (use_sem) SDL_DestroySemaphore(sound_sem);
  SDL_QuitSubSystem(0x00000010);
}
